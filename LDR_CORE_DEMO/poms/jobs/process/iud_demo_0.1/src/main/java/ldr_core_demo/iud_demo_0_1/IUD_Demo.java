// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ldr_core_demo.iud_demo_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: IUD_Demo Purpose: <br>
 * Description: Two tables one LDR and Core will be used to mark the IUD column
 * and then on that basis we will be marking the IUD and see if it works <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class IUD_Demo implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "IUD_Demo";
	private final String projectName = "LDR_CORE_DEMO";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					IUD_Demo.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(IUD_Demo.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBSCD_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock_LDR_CORE_DEMO_IUD_Demo = new byte[0];
		static byte[] commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String FNAME;

		public String getFNAME() {
			return this.FNAME;
		}

		public String LNAME;

		public String getLNAME() {
			return this.LNAME;
		}

		public Integer IUD;

		public Integer getIUD() {
			return this.IUD;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out2Struct other = (out2Struct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(out2Struct other) {

			other.ID = this.ID;
			other.FNAME = this.FNAME;
			other.LNAME = this.LNAME;
			other.IUD = this.IUD;

		}

		public void copyKeysDataTo(out2Struct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LDR_CORE_DEMO_IUD_Demo.length) {
					if (length < 1024 && commonByteArray_LDR_CORE_DEMO_IUD_Demo.length == 0) {
						commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[1024];
					} else {
						commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LDR_CORE_DEMO_IUD_Demo, 0, length);
				strReturn = new String(commonByteArray_LDR_CORE_DEMO_IUD_Demo, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LDR_CORE_DEMO_IUD_Demo) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.FNAME = readString(dis);

					this.LNAME = readString(dis);

					this.IUD = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.FNAME, dos);

				// String

				writeString(this.LNAME, dos);

				// Integer

				writeInteger(this.IUD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",FNAME=" + FNAME);
			sb.append(",LNAME=" + LNAME);
			sb.append(",IUD=" + String.valueOf(IUD));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_LDR_CORE_DEMO_IUD_Demo = new byte[0];
		static byte[] commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public Integer IUD;

		public Integer getIUD() {
			return this.IUD;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.ID = this.ID;
			other.IUD = this.IUD;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LDR_CORE_DEMO_IUD_Demo) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.IUD = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// Integer

				writeInteger(this.IUD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",IUD=" + String.valueOf(IUD));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LDR_CORE_DEMO_IUD_Demo = new byte[0];
		static byte[] commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[0];

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String FNAME;

		public String getFNAME() {
			return this.FNAME;
		}

		public String LNAME;

		public String getLNAME() {
			return this.LNAME;
		}

		public Integer IUD;

		public Integer getIUD() {
			return this.IUD;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LDR_CORE_DEMO_IUD_Demo.length) {
					if (length < 1024 && commonByteArray_LDR_CORE_DEMO_IUD_Demo.length == 0) {
						commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[1024];
					} else {
						commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LDR_CORE_DEMO_IUD_Demo, 0, length);
				strReturn = new String(commonByteArray_LDR_CORE_DEMO_IUD_Demo, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LDR_CORE_DEMO_IUD_Demo) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.FNAME = readString(dis);

					this.LNAME = readString(dis);

					this.IUD = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.FNAME, dos);

				// String

				writeString(this.LNAME, dos);

				// Integer

				writeInteger(this.IUD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",FNAME=" + FNAME);
			sb.append(",LNAME=" + LNAME);
			sb.append(",IUD=" + String.valueOf(IUD));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_LDR_CORE_DEMO_IUD_Demo = new byte[0];
		static byte[] commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[0];

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String FNAME;

		public String getFNAME() {
			return this.FNAME;
		}

		public String LNAME;

		public String getLNAME() {
			return this.LNAME;
		}

		public Integer IUD;

		public Integer getIUD() {
			return this.IUD;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LDR_CORE_DEMO_IUD_Demo.length) {
					if (length < 1024 && commonByteArray_LDR_CORE_DEMO_IUD_Demo.length == 0) {
						commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[1024];
					} else {
						commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LDR_CORE_DEMO_IUD_Demo, 0, length);
				strReturn = new String(commonByteArray_LDR_CORE_DEMO_IUD_Demo, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LDR_CORE_DEMO_IUD_Demo) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.FNAME = readString(dis);

					this.LNAME = readString(dis);

					this.IUD = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.FNAME, dos);

				// String

				writeString(this.LNAME, dos);

				// Integer

				writeInteger(this.IUD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",FNAME=" + FNAME);
			sb.append(",LNAME=" + LNAME);
			sb.append(",IUD=" + String.valueOf(IUD));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				out2Struct out2 = new out2Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out2");
				}

				int tos_count_tDBOutput_2 = 0;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				String tableName_tDBOutput_2 = "LDR";
				boolean whetherReject_tDBOutput_2 = false;
				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int updateKeyCount_tDBOutput_2 = 1;
				if (updateKeyCount_tDBOutput_2 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}
				String dbname_tDBOutput_2 = "talend";
				String driverClass_tDBOutput_2 = "com.teradata.jdbc.TeraDriver";

				java.lang.Class.forName(driverClass_tDBOutput_2);
				String dbProperties_tDBOutput_2 = "";
				String url_tDBOutput_2 = null;
				if (dbProperties_tDBOutput_2 == null || dbProperties_tDBOutput_2.trim().length() == 0) {
					url_tDBOutput_2 = "jdbc:teradata://" + "192.168.197.128";
				} else {
					url_tDBOutput_2 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
				}
				String dbUser_tDBOutput_2 = "Talend";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:i+JW7ST9NiHEIGWS5sN7BIpRvyGjwx3G6twH5VLu+RnEi0nc");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

				java.sql.Connection conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,
						dbUser_tDBOutput_2, dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;
				String dbschema_tDBOutput_2 = dbname_tDBOutput_2;
				if (dbname_tDBOutput_2 == null || dbname_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = "LDR";
				} else {
					tableName_tDBOutput_2 = dbname_tDBOutput_2 + "\".\"" + "LDR";
				}
				int count_tDBOutput_2 = 0;
				conn_tDBOutput_2.commit();
				String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2
						+ "\" SET \"FNAME\" = ?,\"LNAME\" = ?,\"IUD\" = ? WHERE \"ID\" = ?";
				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "LDR";
				boolean whetherReject_tDBOutput_1 = false;
				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}
				String dbname_tDBOutput_1 = "talend";
				String driverClass_tDBOutput_1 = "com.teradata.jdbc.TeraDriver";

				java.lang.Class.forName(driverClass_tDBOutput_1);
				String dbProperties_tDBOutput_1 = "";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:teradata://" + "192.168.197.128";
				} else {
					url_tDBOutput_1 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
				}
				String dbUser_tDBOutput_1 = "Talend";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:timX8T85mvXfQru7qXTyDQC963k7sSUAS5ev8onEhRuE/e5o");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,
						dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;
				String dbschema_tDBOutput_1 = dbname_tDBOutput_1;
				if (dbname_tDBOutput_1 == null || dbname_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "LDR";
				} else {
					tableName_tDBOutput_1 = dbname_tDBOutput_1 + "\".\"" + "LDR";
				}
				int count_tDBOutput_1 = 0;
				conn_tDBOutput_1.commit();
				String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"IUD\" = ? WHERE \"ID\" = ?";
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out2Struct out2_tmp = new out2Struct();
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.teradata.jdbc.TeraDriver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "Talend";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:uUi9gi/rJ0LN9+ePNBNAII/adqwBjbYJwNs5aidaJUw8PivB");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String dbProperties_tDBInput_1 = "";
				String url_tDBInput_1 = null;
				if (dbProperties_tDBInput_1 == null || dbProperties_tDBInput_1.trim().length() == 0) {
					url_tDBInput_1 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "talend";
				} else {
					url_tDBInput_1 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "talend" + "," + "";
				}

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();
				stmt_tDBInput_1.setFetchSize(200000);

				String dbquery_tDBInput_1 = "SELECT talend.LDR.\"ID\",\n		talend.LDR.FNAME,\n		talend.LDR.LNAME,\n		talend.LDR.IUD\nFROM	talend.LDR";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.ID = 0;
						} else {

							row1.ID = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.FNAME = null;
						} else {

							row1.FNAME = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.LNAME = null;
						} else {

							row1.LNAME = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.IUD = null;
						} else {

							row1.IUD = rs_tDBInput_1.getInt(4);
							if (rs_tDBInput_1.wasNull()) {
								row1.IUD = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row2"
						///////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row2__ID = row1.ID;
							if (exprKeyValue_row2__ID == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row2HashKey.ID = (int) (Integer) exprKeyValue_row2__ID;
							}

							row2HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row2.lookup(row2HashKey);

							} // G_TM_M_091

							if (hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_row2.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2'
							// and it contains more one result from keys : row2.ID = '" + row2HashKey.ID +
							// "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							out2 = null;
							out1 = null;

							if (!rejectedInnerJoin_tMap_1) {

// # Output table : 'out2'
// # Filter conditions 
								if (

								!row2.FNAME.equals(row1.FNAME) && !(Relational.ISNULL(row2.ID)) && (row1.ID == row2.ID)

								) {
									out2_tmp.ID = row2.ID;
									out2_tmp.FNAME = row1.FNAME;
									out2_tmp.LNAME = row1.LNAME;
									out2_tmp.IUD = 2;
									out2 = out2_tmp;
								} // closing filter/reject
							} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'out1'
// # Filter conditions 
							if (rejectedInnerJoin_tMap_1) {
								out1_tmp.ID = row1.ID;
								out1_tmp.IUD = 1;
								out1 = out1_tmp;
							} // closing filter/reject
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "out2"
						if (out2 != null) {

							/**
							 * [tDBOutput_2 main ] start
							 */

							currentComponent = "tDBOutput_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "out2");
							}

							whetherReject_tDBOutput_2 = false;
							if (out2.FNAME == null) {
								pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(1, out2.FNAME);
							}

							if (out2.LNAME == null) {
								pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(2, out2.LNAME);
							}

							if (out2.IUD == null) {
								pstmt_tDBOutput_2.setNull(3, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_2.setInt(3, out2.IUD);
							}

							pstmt_tDBOutput_2.setInt(4 + count_tDBOutput_2, out2.ID);

							pstmt_tDBOutput_2.addBatch();
							batchSizeCounter_tDBOutput_2++;
							nb_line_tDBOutput_2++;
							if (!whetherReject_tDBOutput_2) {
							}
							if ((batchSize_tDBOutput_2 > 0)
									&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
								try {
									batchSizeCounter_tDBOutput_2 = 0;
									int countSum_tDBOutput_2 = 0;

									for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
									}

									updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
								} catch (java.sql.SQLException e_tDBOutput_2) {
									java.sql.SQLException e3_tDBOutput_2 = e_tDBOutput_2;
									boolean isFailure = false;
									while (e_tDBOutput_2 != null) {
										if (e_tDBOutput_2.getErrorCode() == -2801) {
											System.out.println(" Message: " + e_tDBOutput_2.getMessage());
											e_tDBOutput_2.printStackTrace();
											System.out.println();
										} else if (e_tDBOutput_2.getErrorCode() == 1339) {
											isFailure = true;
										} else {
											System.out.println(" Message: " + e_tDBOutput_2.getMessage());
											e_tDBOutput_2.printStackTrace();
										}
										e_tDBOutput_2 = e_tDBOutput_2.getNextException();
									}
									if (isFailure && e_tDBOutput_2 != null) {
										System.out.println(" Message: " + e_tDBOutput_2.getMessage());
										e_tDBOutput_2.printStackTrace();
									}
									System.err.println(e3_tDBOutput_2.getMessage());
								}
							}
							commitCounter_tDBOutput_2++;
							if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
								try {
									if (batchSizeCounter_tDBOutput_2 > 0) {
										int countSum_tDBOutput_2 = 0;

										for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
											countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
													: countEach_tDBOutput_2);
										}

										updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
										batchSizeCounter_tDBOutput_2 = 0;
									}
									conn_tDBOutput_2.commit();
									commitCounter_tDBOutput_2 = 0;
								} catch (java.sql.SQLException e_tDBOutput_2) {
									java.sql.SQLException e3_tDBOutput_2 = e_tDBOutput_2;
									boolean isFailure = false;
									while (e_tDBOutput_2 != null) {
										if (e_tDBOutput_2.getErrorCode() == -2801) {
											System.out.println(" Message: " + e_tDBOutput_2.getMessage());
											e_tDBOutput_2.printStackTrace();
											System.out.println();
										} else if (e_tDBOutput_2.getErrorCode() == 1339) {
											isFailure = true;
										} else {
											System.out.println(" Message: " + e_tDBOutput_2.getMessage());
											e_tDBOutput_2.printStackTrace();
										}
										e_tDBOutput_2 = e_tDBOutput_2.getNextException();
									}
									if (isFailure && e_tDBOutput_2 != null) {
										System.out.println(" Message: " + e_tDBOutput_2.getMessage());
										e_tDBOutput_2.printStackTrace();
									}
									System.err.println(e3_tDBOutput_2.getMessage());
								}
							}

							tos_count_tDBOutput_2++;

							/**
							 * [tDBOutput_2 main ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_end ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_end ] stop
							 */

						} // End of branch "out2"

// Start of branch "out1"
						if (out1 != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "out1");
							}

							whetherReject_tDBOutput_1 = false;
							if (out1.IUD == null) {
								pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(1, out1.IUD);
							}

							pstmt_tDBOutput_1.setInt(2 + count_tDBOutput_1, out1.ID);

							pstmt_tDBOutput_1.addBatch();
							batchSizeCounter_tDBOutput_1++;
							nb_line_tDBOutput_1++;
							if (!whetherReject_tDBOutput_1) {
							}
							if ((batchSize_tDBOutput_1 > 0)
									&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
								try {
									batchSizeCounter_tDBOutput_1 = 0;
									int countSum_tDBOutput_1 = 0;

									for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
									}

									updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
								} catch (java.sql.SQLException e_tDBOutput_1) {
									java.sql.SQLException e3_tDBOutput_1 = e_tDBOutput_1;
									boolean isFailure = false;
									while (e_tDBOutput_1 != null) {
										if (e_tDBOutput_1.getErrorCode() == -2801) {
											System.out.println(" Message: " + e_tDBOutput_1.getMessage());
											e_tDBOutput_1.printStackTrace();
											System.out.println();
										} else if (e_tDBOutput_1.getErrorCode() == 1339) {
											isFailure = true;
										} else {
											System.out.println(" Message: " + e_tDBOutput_1.getMessage());
											e_tDBOutput_1.printStackTrace();
										}
										e_tDBOutput_1 = e_tDBOutput_1.getNextException();
									}
									if (isFailure && e_tDBOutput_1 != null) {
										System.out.println(" Message: " + e_tDBOutput_1.getMessage());
										e_tDBOutput_1.printStackTrace();
									}
									throw (e3_tDBOutput_1);
								}
							}
							commitCounter_tDBOutput_1++;
							if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
								try {
									if (batchSizeCounter_tDBOutput_1 > 0) {
										int countSum_tDBOutput_1 = 0;

										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}

										updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
										batchSizeCounter_tDBOutput_1 = 0;
									}
									conn_tDBOutput_1.commit();
									commitCounter_tDBOutput_1 = 0;
								} catch (java.sql.SQLException e_tDBOutput_1) {
									java.sql.SQLException e3_tDBOutput_1 = e_tDBOutput_1;
									boolean isFailure = false;
									while (e_tDBOutput_1 != null) {
										if (e_tDBOutput_1.getErrorCode() == -2801) {
											System.out.println(" Message: " + e_tDBOutput_1.getMessage());
											e_tDBOutput_1.printStackTrace();
											System.out.println();
										} else if (e_tDBOutput_1.getErrorCode() == 1339) {
											isFailure = true;
										} else {
											System.out.println(" Message: " + e_tDBOutput_1.getMessage());
											e_tDBOutput_1.printStackTrace();
										}
										e_tDBOutput_1 = e_tDBOutput_1.getNextException();
									}
									if (isFailure && e_tDBOutput_1 != null) {
										System.out.println(" Message: " + e_tDBOutput_1.getMessage());
										e_tDBOutput_1.printStackTrace();
									}
									throw (e3_tDBOutput_1);
								}
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "out1"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (batchSizeCounter_tDBOutput_2 > 0) { // do not commit empty batch, this is a jdbc error
						int countSum_tDBOutput_2 = 0;
						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}

						updatedCount_tDBOutput_2 += countSum_tDBOutput_2;

					}
					// }catch (java.sql.BatchUpdateException e){
				} catch (java.sql.SQLException e) {
					java.sql.SQLException e3 = e;
					boolean isFailure = false;
					int errorCode = 0;
					String sqlState = "";
					String message = "";
					while (e != null) {
						if (e.getErrorCode() == -2801) {
							System.out.println("[Message]: " + e.getMessage());
							e.printStackTrace();
							System.out.println();
						} else if (e.getErrorCode() == 1339) {
							isFailure = true;
						} else {
							System.out.println("[Message]: " + e.getMessage());
							e.printStackTrace();
						}
						e = e.getNextException();
					}
					if (isFailure && e != null) {
						System.out.println("[Message]: " + e.getMessage());
						e.printStackTrace();
					}
					System.err.println(e3.getMessage());
				}

				if (pstmt_tDBOutput_2 != null) {
					pstmt_tDBOutput_2.close();
					pstmt_tDBOutput_2 = null;
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);
				if (commitCounter_tDBOutput_2 > 0) {
					conn_tDBOutput_2.commit();
				}

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out2");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBInput_4Process(globalMap);

				/**
				 * [tDBOutput_2 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 > 0) { // do not commit empty batch, this is a jdbc error
						int countSum_tDBOutput_1 = 0;
						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}

						updatedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}
					// }catch (java.sql.BatchUpdateException e){
				} catch (java.sql.SQLException e) {
					java.sql.SQLException e3 = e;
					boolean isFailure = false;
					int errorCode = 0;
					String sqlState = "";
					String message = "";
					while (e != null) {
						if (e.getErrorCode() == -2801) {
							System.out.println("[Message]: " + e.getMessage());
							e.printStackTrace();
							System.out.println();
						} else if (e.getErrorCode() == 1339) {
							isFailure = true;
						} else {
							System.out.println("[Message]: " + e.getMessage());
							e.printStackTrace();
						}
						e = e.getNextException();
					}
					if (isFailure && e != null) {
						System.out.println("[Message]: " + e.getMessage());
						e.printStackTrace();
					}
					throw (e3);
				}

				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					pstmt_tDBOutput_1 = null;
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {
					conn_tDBOutput_1.commit();
				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBInput_3Process(globalMap);

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_LDR_CORE_DEMO_IUD_Demo = new byte[0];
		static byte[] commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[0];

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String FNAME;

		public String getFNAME() {
			return this.FNAME;
		}

		public String LNAME;

		public String getLNAME() {
			return this.LNAME;
		}

		public Integer IUD;

		public Integer getIUD() {
			return this.IUD;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LDR_CORE_DEMO_IUD_Demo.length) {
					if (length < 1024 && commonByteArray_LDR_CORE_DEMO_IUD_Demo.length == 0) {
						commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[1024];
					} else {
						commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LDR_CORE_DEMO_IUD_Demo, 0, length);
				strReturn = new String(commonByteArray_LDR_CORE_DEMO_IUD_Demo, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LDR_CORE_DEMO_IUD_Demo) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.FNAME = readString(dis);

					this.LNAME = readString(dis);

					this.IUD = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.FNAME, dos);

				// String

				writeString(this.LNAME, dos);

				// Integer

				writeInteger(this.IUD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",FNAME=" + FNAME);
			sb.append(",LNAME=" + LNAME);
			sb.append(",IUD=" + String.valueOf(IUD));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tDBSCD_1 begin ] start
				 */

				ok_Hash.put("tDBSCD_1", false);
				start_Hash.put("tDBSCD_1", System.currentTimeMillis());

				currentComponent = "tDBSCD_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tDBSCD_1 = 0;

				class SCDSK_tDBSCD_1 {
					private int hashCode;
					public boolean hashCodeDirty = true;
					int ID;

					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final SCDSK_tDBSCD_1 other = (SCDSK_tDBSCD_1) obj;
						if (this.ID != other.ID)
							return false;

						return true;
					}

					public int hashCode() {
						if (hashCodeDirty) {
							int prime = 31;
							hashCode = prime * hashCode + ID;
							hashCodeDirty = false;
						}
						return hashCode;
					}
				}

				class SCDStruct_tDBSCD_1 {
					private String FNAME;
					private String LNAME;
				}

				int nb_line_update_tDBSCD_1 = 0;
				int nb_line_inserted_tDBSCD_1 = 0;
				String tableName_tDBSCD_1 = "CORE_SCD";
				String dbName_tDBSCD_1 = "talend";

				java.lang.Class.forName("com.teradata.jdbc.TeraDriver");

				String connectionString_tDBSCD_1 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "talend";

				final String decryptedPassword_tDBSCD_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:qLf7TBFMbYdi0FSB+iSUjvENRAoXTQ7MrVmyGnO3L6GUrfzc");

				java.sql.Connection connection_tDBSCD_1 = java.sql.DriverManager
						.getConnection(connectionString_tDBSCD_1, "Talend", decryptedPassword_tDBSCD_1);

				java.util.Calendar calendar_tDBSCD_1 = java.util.Calendar.getInstance();
				java.util.Calendar calendarYear0_tDBSCD_1 = java.util.Calendar.getInstance();

				calendar_tDBSCD_1.set(1, 0, 1, 0, 0, 0);
				calendarYear0_tDBSCD_1.set(0, 0, 0, 0, 0, 0);

				final java.util.Date dateYear0_tDBSCD_1 = calendarYear0_tDBSCD_1.getTime();
				final long year1_tDBSCD_1 = calendar_tDBSCD_1.getTime().getTime();

				calendar_tDBSCD_1.set(10000, 0, 1, 0, 0, 0);
				final long year10000_tDBSCD_1 = calendar_tDBSCD_1.getTime().getTime();
				long date_tDBSCD_1 = 0;

				String dateStr_tDBSCD_1 = null;
				String tmpValue_tDBSCD_1 = null;

				String search_tDBSCD_1 = "SELECT \"ID\", \"FNAME\", \"LNAME\" FROM \"" + tableName_tDBSCD_1
						+ "\" WHERE \"END_DATE\" IS NULL";
				java.sql.Statement statement_tDBSCD_1 = connection_tDBSCD_1.createStatement();
				java.sql.ResultSet resultSet_tDBSCD_1 = statement_tDBSCD_1.executeQuery(search_tDBSCD_1);
				java.util.Map<SCDSK_tDBSCD_1, SCDStruct_tDBSCD_1> cache_tDBSCD_1 = new java.util.HashMap<SCDSK_tDBSCD_1, SCDStruct_tDBSCD_1>();

				while (resultSet_tDBSCD_1.next()) {
					SCDSK_tDBSCD_1 sk_tDBSCD_1 = new SCDSK_tDBSCD_1();
					SCDStruct_tDBSCD_1 row_tDBSCD_1 = new SCDStruct_tDBSCD_1();

					if (resultSet_tDBSCD_1.getObject(1) != null) {
						sk_tDBSCD_1.ID = resultSet_tDBSCD_1.getInt(1);
					}

					if (resultSet_tDBSCD_1.getObject(2) != null) {
						row_tDBSCD_1.FNAME = resultSet_tDBSCD_1.getString(2);
					}

					if (resultSet_tDBSCD_1.getObject(3) != null) {
						row_tDBSCD_1.LNAME = resultSet_tDBSCD_1.getString(3);
					}

					cache_tDBSCD_1.put(sk_tDBSCD_1, row_tDBSCD_1);
				}
				resultSet_tDBSCD_1.close();
				statement_tDBSCD_1.close();

				String insertionSQL_tDBSCD_1 = "INSERT INTO \"" + tableName_tDBSCD_1
						+ "\"(\"ID\", \"FNAME\", \"LNAME\", \"ST_DATE\", \"END_DATE\") VALUES(?, ?, ?, ?, ?)";
				java.sql.PreparedStatement insertionStatement_tDBSCD_1 = connection_tDBSCD_1
						.prepareStatement(insertionSQL_tDBSCD_1);

				insertionStatement_tDBSCD_1.setTimestamp(4, new java.sql.Timestamp(start_Hash.get("tDBSCD_1")));

				insertionStatement_tDBSCD_1.setNull(5, java.sql.Types.DATE);
				String updateSQLForType2_tDBSCD_1 = "UPDATE \"" + tableName_tDBSCD_1
						+ "\" SET \"END_DATE\" = ? WHERE \"ID\" = ? AND \"END_DATE\" IS NULL";
				java.sql.PreparedStatement updateForType2_tDBSCD_1 = connection_tDBSCD_1
						.prepareStatement(updateSQLForType2_tDBSCD_1);

				updateForType2_tDBSCD_1.setTimestamp(1, new java.sql.Timestamp(start_Hash.get("tDBSCD_1")));

				SCDSK_tDBSCD_1 lookUpKey_tDBSCD_1 = null;

				SCDStruct_tDBSCD_1 lookUpValue_tDBSCD_1 = null;

				/**
				 * [tDBSCD_1 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.teradata.jdbc.TeraDriver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "Talend";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:/ZEB7GWEH5DLD5w4iI3pB1Mlpy9f1GLPXvewNnXMfR7jlGLR");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String dbProperties_tDBInput_4 = "";
				String url_tDBInput_4 = null;
				if (dbProperties_tDBInput_4 == null || dbProperties_tDBInput_4.trim().length() == 0) {
					url_tDBInput_4 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "talend";
				} else {
					url_tDBInput_4 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "talend" + "," + "";
				}

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();
				stmt_tDBInput_4.setFetchSize(200000);

				String dbquery_tDBInput_4 = "SELECT talend.LDR.\"ID\",\n		talend.LDR.FNAME,\n		talend.LDR.LNAME,\n		talend.LDR.IUD\nFROM	talend.LDR\nWHERE IUD = 2";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.ID = 0;
						} else {

							row4.ID = rs_tDBInput_4.getInt(1);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row4.FNAME = null;
						} else {

							row4.FNAME = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row4.LNAME = null;
						} else {

							row4.LNAME = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row4.IUD = null;
						} else {

							row4.IUD = rs_tDBInput_4.getInt(4);
							if (rs_tDBInput_4.wasNull()) {
								row4.IUD = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBSCD_1 main ] start
						 */

						currentComponent = "tDBSCD_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
						}

						try {
							lookUpKey_tDBSCD_1 = new SCDSK_tDBSCD_1();

							lookUpKey_tDBSCD_1.ID = row4.ID;

							lookUpKey_tDBSCD_1.hashCodeDirty = true;
							lookUpValue_tDBSCD_1 = cache_tDBSCD_1.get(lookUpKey_tDBSCD_1);

							if (lookUpValue_tDBSCD_1 == null) {

								lookUpValue_tDBSCD_1 = new SCDStruct_tDBSCD_1();

								insertionStatement_tDBSCD_1.setInt(1, row4.ID);

								if (row4.FNAME == null) {
									insertionStatement_tDBSCD_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									insertionStatement_tDBSCD_1.setString(2, row4.FNAME);
								}

								if (row4.LNAME == null) {
									insertionStatement_tDBSCD_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									insertionStatement_tDBSCD_1.setString(3, row4.LNAME);
								}

								nb_line_inserted_tDBSCD_1 += insertionStatement_tDBSCD_1.executeUpdate();

							} else {

								if ((lookUpValue_tDBSCD_1.FNAME == null && row4.FNAME != null)
										|| (lookUpValue_tDBSCD_1.FNAME != null
												&& !lookUpValue_tDBSCD_1.FNAME.equals(row4.FNAME))
										|| (lookUpValue_tDBSCD_1.LNAME == null && row4.LNAME != null)
										|| (lookUpValue_tDBSCD_1.LNAME != null
												&& !lookUpValue_tDBSCD_1.LNAME.equals(row4.LNAME))) {

									updateForType2_tDBSCD_1.setInt(2, row4.ID);

									nb_line_update_tDBSCD_1 += updateForType2_tDBSCD_1.executeUpdate();

									insertionStatement_tDBSCD_1.setInt(1, row4.ID);

									if (row4.FNAME == null) {
										insertionStatement_tDBSCD_1.setNull(2, java.sql.Types.VARCHAR);
									} else {
										insertionStatement_tDBSCD_1.setString(2, row4.FNAME);
									}

									if (row4.LNAME == null) {
										insertionStatement_tDBSCD_1.setNull(3, java.sql.Types.VARCHAR);
									} else {
										insertionStatement_tDBSCD_1.setString(3, row4.LNAME);
									}

									nb_line_inserted_tDBSCD_1 += insertionStatement_tDBSCD_1.executeUpdate();

								}

							}

						} catch (java.lang.Exception e) {// catch

							System.err.print(e.getMessage());

						} // end catch

						lookUpValue_tDBSCD_1.FNAME = row4.FNAME;

						lookUpValue_tDBSCD_1.LNAME = row4.LNAME;

						cache_tDBSCD_1.put(lookUpKey_tDBSCD_1, lookUpValue_tDBSCD_1);

						tos_count_tDBSCD_1++;

						/**
						 * [tDBSCD_1 main ] stop
						 */

						/**
						 * [tDBSCD_1 process_data_begin ] start
						 */

						currentComponent = "tDBSCD_1";

						/**
						 * [tDBSCD_1 process_data_begin ] stop
						 */

						/**
						 * [tDBSCD_1 process_data_end ] start
						 */

						currentComponent = "tDBSCD_1";

						/**
						 * [tDBSCD_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tDBSCD_1 end ] start
				 */

				currentComponent = "tDBSCD_1";

				insertionStatement_tDBSCD_1.close();

				updateForType2_tDBSCD_1.close();

				if (connection_tDBSCD_1 != null && !connection_tDBSCD_1.isClosed()) {
					connection_tDBSCD_1.close();
				}

				globalMap.put("tDBSCD_1_NB_LINE_UPDATED", nb_line_update_tDBSCD_1);
				globalMap.put("tDBSCD_1_NB_LINE_INSERTED", nb_line_inserted_tDBSCD_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tDBSCD_1", true);
				end_Hash.put("tDBSCD_1", System.currentTimeMillis());

				/**
				 * [tDBSCD_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tDBSCD_1 finally ] start
				 */

				currentComponent = "tDBSCD_1";

				/**
				 * [tDBSCD_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LDR_CORE_DEMO_IUD_Demo = new byte[0];
		static byte[] commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[0];

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String FNAME;

		public String getFNAME() {
			return this.FNAME;
		}

		public String LNAME;

		public String getLNAME() {
			return this.LNAME;
		}

		public Integer IUD;

		public Integer getIUD() {
			return this.IUD;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LDR_CORE_DEMO_IUD_Demo.length) {
					if (length < 1024 && commonByteArray_LDR_CORE_DEMO_IUD_Demo.length == 0) {
						commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[1024];
					} else {
						commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LDR_CORE_DEMO_IUD_Demo, 0, length);
				strReturn = new String(commonByteArray_LDR_CORE_DEMO_IUD_Demo, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LDR_CORE_DEMO_IUD_Demo) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.FNAME = readString(dis);

					this.LNAME = readString(dis);

					this.IUD = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.FNAME, dos);

				// String

				writeString(this.LNAME, dos);

				// Integer

				writeInteger(this.IUD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",FNAME=" + FNAME);
			sb.append(",LNAME=" + LNAME);
			sb.append(",IUD=" + String.valueOf(IUD));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tDBRow_1 begin ] start
				 */

				ok_Hash.put("tDBRow_1", false);
				start_Hash.put("tDBRow_1", System.currentTimeMillis());

				currentComponent = "tDBRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tDBRow_1 = 0;

				java.sql.Connection conn_tDBRow_1 = null;
				String query_tDBRow_1 = "";
				boolean whetherReject_tDBRow_1 = false;
				String driverClass_tDBRow_1 = "com.teradata.jdbc.TeraDriver";
				java.lang.Class jdbcclazz_tDBRow_1 = java.lang.Class.forName(driverClass_tDBRow_1);

				String dbProperties_tDBRow_1 = "";
				String url_tDBRow_1 = null;
				if (dbProperties_tDBRow_1 == null || dbProperties_tDBRow_1.trim().length() == 0) {
					url_tDBRow_1 = "jdbc:teradata://" + "192.168.197.128";
				} else {
					url_tDBRow_1 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
				}

				String dbUser_tDBRow_1 = "Talend";

				final String decryptedPassword_tDBRow_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:+7RW01RE7JSV/BlxCfzB9cGcTSmwix3pqoXI7F6Ez8CrLP8z");

				String dbPwd_tDBRow_1 = decryptedPassword_tDBRow_1;

				conn_tDBRow_1 = java.sql.DriverManager.getConnection(url_tDBRow_1, dbUser_tDBRow_1, dbPwd_tDBRow_1);

				resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
				if (conn_tDBRow_1.getAutoCommit()) {

					conn_tDBRow_1.setAutoCommit(false);

				}
				int commitEvery_tDBRow_1 = 10000;
				int commitCounter_tDBRow_1 = 0;

				java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
				resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);

				/**
				 * [tDBRow_1 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.teradata.jdbc.TeraDriver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "Talend";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:rXh45PaLutbcCX7lEsohw8zok79z5412dyrgs853D3jPEUR+");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String dbProperties_tDBInput_3 = "";
				String url_tDBInput_3 = null;
				if (dbProperties_tDBInput_3 == null || dbProperties_tDBInput_3.trim().length() == 0) {
					url_tDBInput_3 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "talend";
				} else {
					url_tDBInput_3 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "talend" + "," + "";
				}

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();
				stmt_tDBInput_3.setFetchSize(200000);

				String dbquery_tDBInput_3 = "SELECT talend.LDR.\"ID\",\n		talend.LDR.FNAME,\n		talend.LDR.LNAME,\n		talend.LDR.IUD\nFROM	talend.LDR";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.ID = 0;
						} else {

							row3.ID = rs_tDBInput_3.getInt(1);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.FNAME = null;
						} else {

							row3.FNAME = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row3.LNAME = null;
						} else {

							row3.LNAME = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row3.IUD = null;
						} else {

							row3.IUD = rs_tDBInput_3.getInt(4);
							if (rs_tDBInput_3.wasNull()) {
								row3.IUD = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBRow_1 main ] start
						 */

						currentComponent = "tDBRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
						}

						query_tDBRow_1 = "INSERT INTO CORE (ID, FNAME, LNAME)\nSELECT ID, FNAME, LNAME FROM LDR\nWHERE IUD = 1; ";
						whetherReject_tDBRow_1 = false;
						globalMap.put("tDBRow_1_QUERY", query_tDBRow_1);
						try {
							stmt_tDBRow_1.execute(query_tDBRow_1);

						} catch (java.lang.Exception e) {
							whetherReject_tDBRow_1 = true;

							throw (e);

						}

						commitCounter_tDBRow_1++;
						if (commitEvery_tDBRow_1 <= commitCounter_tDBRow_1) {

							conn_tDBRow_1.commit();

							commitCounter_tDBRow_1 = 0;
						}

						tos_count_tDBRow_1++;

						/**
						 * [tDBRow_1 main ] stop
						 */

						/**
						 * [tDBRow_1 process_data_begin ] start
						 */

						currentComponent = "tDBRow_1";

						/**
						 * [tDBRow_1 process_data_begin ] stop
						 */

						/**
						 * [tDBRow_1 process_data_end ] start
						 */

						currentComponent = "tDBRow_1";

						/**
						 * [tDBRow_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tDBRow_1 end ] start
				 */

				currentComponent = "tDBRow_1";

				stmt_tDBRow_1.close();
				resourceMap.remove("stmt_tDBRow_1");
				resourceMap.put("statementClosed_tDBRow_1", true);
				if (commitEvery_tDBRow_1 > commitCounter_tDBRow_1) {

					conn_tDBRow_1.commit();

					commitCounter_tDBRow_1 = 0;

				}

				conn_tDBRow_1.close();

				if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
						&& routines.system.BundleUtils.inOSGi()) {
					Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").getMethod("checkedShutdown")
							.invoke(null, (Object[]) null);
				}

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tDBRow_1", true);
				end_Hash.put("tDBRow_1", System.currentTimeMillis());

				/**
				 * [tDBRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tDBRow_1 finally ] start
				 */

				currentComponent = "tDBRow_1";

				try {
					if (resourceMap.get("statementClosed_tDBRow_1") == null) {
						java.sql.Statement stmtToClose_tDBRow_1 = null;
						if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
							stmtToClose_tDBRow_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBRow_1") == null) {
						java.sql.Connection ctn_tDBRow_1 = null;
						if ((ctn_tDBRow_1 = (java.sql.Connection) resourceMap.get("conn_tDBRow_1")) != null) {
							try {
								ctn_tDBRow_1.close();
							} catch (java.sql.SQLException sqlEx_tDBRow_1) {
								String errorMessage_tDBRow_1 = "failed to close the connection in tDBRow_1 :"
										+ sqlEx_tDBRow_1.getMessage();
								System.err.println(errorMessage_tDBRow_1);
							}
						}
					}
				}

				/**
				 * [tDBRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_LDR_CORE_DEMO_IUD_Demo = new byte[0];
		static byte[] commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String FNAME;

		public String getFNAME() {
			return this.FNAME;
		}

		public String LNAME;

		public String getLNAME() {
			return this.LNAME;
		}

		public Integer DELETE_FLAG;

		public Integer getDELETE_FLAG() {
			return this.DELETE_FLAG;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.ID = this.ID;
			other.FNAME = this.FNAME;
			other.LNAME = this.LNAME;
			other.DELETE_FLAG = this.DELETE_FLAG;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.ID = this.ID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LDR_CORE_DEMO_IUD_Demo) {

				try {

					int length = 0;

					this.ID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.FNAME = readString(dis, ois);

				this.LNAME = readString(dis, ois);

				this.DELETE_FLAG = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.FNAME, dos, oos);

				writeString(this.LNAME, dos, oos);

				writeInteger(this.DELETE_FLAG, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",FNAME=" + FNAME);
			sb.append(",LNAME=" + LNAME);
			sb.append(",DELETE_FLAG=" + String.valueOf(DELETE_FLAG));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2) outputs:(out2,out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct>getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.teradata.jdbc.TeraDriver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "Talend";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:lW7hFLarchJ/7NQXEL5olimN+EgsdZVJr7QDD8XFJd8AQgb6");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String dbProperties_tDBInput_2 = "";
				String url_tDBInput_2 = null;
				if (dbProperties_tDBInput_2 == null || dbProperties_tDBInput_2.trim().length() == 0) {
					url_tDBInput_2 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "talend";
				} else {
					url_tDBInput_2 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "talend" + "," + "";
				}

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();
				stmt_tDBInput_2.setFetchSize(200000);

				String dbquery_tDBInput_2 = "SELECT talend.CORE.\"ID\",\n		talend.CORE.FNAME,\n		talend.CORE.LNAME,\n		talend.CORE.DELETE_FLAG\nFROM	talend.CORE";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.ID = 0;
						} else {

							row2.ID = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.FNAME = null;
						} else {

							row2.FNAME = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.LNAME = null;
						} else {

							row2.LNAME = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.DELETE_FLAG = null;
						} else {

							row2.DELETE_FLAG = rs_tDBInput_2.getInt(4);
							if (rs_tDBInput_2.wasNull()) {
								row2.DELETE_FLAG = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.ID = row2.ID;

						row2_HashRow.FNAME = row2.FNAME;

						row2_HashRow.LNAME = row2.LNAME;

						row2_HashRow.DELETE_FLAG = row2.DELETE_FLAG;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_LDR_CORE_DEMO_IUD_Demo = new byte[0];
		static byte[] commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[0];

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String FNAME;

		public String getFNAME() {
			return this.FNAME;
		}

		public String LNAME;

		public String getLNAME() {
			return this.LNAME;
		}

		public Integer IUD;

		public Integer getIUD() {
			return this.IUD;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LDR_CORE_DEMO_IUD_Demo.length) {
					if (length < 1024 && commonByteArray_LDR_CORE_DEMO_IUD_Demo.length == 0) {
						commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[1024];
					} else {
						commonByteArray_LDR_CORE_DEMO_IUD_Demo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LDR_CORE_DEMO_IUD_Demo, 0, length);
				strReturn = new String(commonByteArray_LDR_CORE_DEMO_IUD_Demo, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LDR_CORE_DEMO_IUD_Demo) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.FNAME = readString(dis);

					this.LNAME = readString(dis);

					this.IUD = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.FNAME, dos);

				// String

				writeString(this.LNAME, dos);

				// Integer

				writeInteger(this.IUD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",FNAME=" + FNAME);
			sb.append(",LNAME=" + LNAME);
			sb.append(",IUD=" + String.valueOf(IUD));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tDBRow_3 begin ] start
				 */

				ok_Hash.put("tDBRow_3", false);
				start_Hash.put("tDBRow_3", System.currentTimeMillis());

				currentComponent = "tDBRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tDBRow_3 = 0;

				java.sql.Connection conn_tDBRow_3 = null;
				String query_tDBRow_3 = "";
				boolean whetherReject_tDBRow_3 = false;
				String driverClass_tDBRow_3 = "com.teradata.jdbc.TeraDriver";
				java.lang.Class jdbcclazz_tDBRow_3 = java.lang.Class.forName(driverClass_tDBRow_3);

				String dbProperties_tDBRow_3 = "";
				String url_tDBRow_3 = null;
				if (dbProperties_tDBRow_3 == null || dbProperties_tDBRow_3.trim().length() == 0) {
					url_tDBRow_3 = "jdbc:teradata://" + "192.168.197.128";
				} else {
					url_tDBRow_3 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
				}

				String dbUser_tDBRow_3 = "Talend";

				final String decryptedPassword_tDBRow_3 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:X7PWq48+w8T+6uD1VR3QoX0q8gdF/hajOwYgZXYOTQRMEHIn");

				String dbPwd_tDBRow_3 = decryptedPassword_tDBRow_3;

				conn_tDBRow_3 = java.sql.DriverManager.getConnection(url_tDBRow_3, dbUser_tDBRow_3, dbPwd_tDBRow_3);

				resourceMap.put("conn_tDBRow_3", conn_tDBRow_3);
				if (conn_tDBRow_3.getAutoCommit()) {

					conn_tDBRow_3.setAutoCommit(false);

				}
				int commitEvery_tDBRow_3 = 10000;
				int commitCounter_tDBRow_3 = 0;

				java.sql.Statement stmt_tDBRow_3 = conn_tDBRow_3.createStatement();
				resourceMap.put("stmt_tDBRow_3", stmt_tDBRow_3);

				/**
				 * [tDBRow_3 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.teradata.jdbc.TeraDriver";
				java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "Talend";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:YhuIQY0dpgyYRXOLbQMqbK2kXFnuC0rX5mfUaSP9zmrAWtui");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String dbProperties_tDBInput_5 = "";
				String url_tDBInput_5 = null;
				if (dbProperties_tDBInput_5 == null || dbProperties_tDBInput_5.trim().length() == 0) {
					url_tDBInput_5 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "talend";
				} else {
					url_tDBInput_5 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "talend" + "," + "";
				}

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, dbUser_tDBInput_5,
						dbPwd_tDBInput_5);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();
				stmt_tDBInput_5.setFetchSize(200000);

				String dbquery_tDBInput_5 = "SELECT talend.LDR.\"ID\",\n		talend.LDR.FNAME,\n		talend.LDR.LNAME,\n		talend.LDR.IUD\nFROM	talend.LDR";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row5.ID = 0;
						} else {

							row5.ID = rs_tDBInput_5.getInt(1);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row5.FNAME = null;
						} else {

							row5.FNAME = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row5.LNAME = null;
						} else {

							row5.LNAME = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row5.IUD = null;
						} else {

							row5.IUD = rs_tDBInput_5.getInt(4);
							if (rs_tDBInput_5.wasNull()) {
								row5.IUD = null;
							}
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tDBRow_3 main ] start
						 */

						currentComponent = "tDBRow_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
						}

						query_tDBRow_3 = "DELETE FROM LDR ALL;";
						whetherReject_tDBRow_3 = false;
						globalMap.put("tDBRow_3_QUERY", query_tDBRow_3);
						try {
							stmt_tDBRow_3.execute(query_tDBRow_3);

						} catch (java.lang.Exception e) {
							whetherReject_tDBRow_3 = true;

							throw (e);

						}

						commitCounter_tDBRow_3++;
						if (commitEvery_tDBRow_3 <= commitCounter_tDBRow_3) {

							conn_tDBRow_3.commit();

							commitCounter_tDBRow_3 = 0;
						}

						tos_count_tDBRow_3++;

						/**
						 * [tDBRow_3 main ] stop
						 */

						/**
						 * [tDBRow_3 process_data_begin ] start
						 */

						currentComponent = "tDBRow_3";

						/**
						 * [tDBRow_3 process_data_begin ] stop
						 */

						/**
						 * [tDBRow_3 process_data_end ] start
						 */

						currentComponent = "tDBRow_3";

						/**
						 * [tDBRow_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tDBRow_3 end ] start
				 */

				currentComponent = "tDBRow_3";

				stmt_tDBRow_3.close();
				resourceMap.remove("stmt_tDBRow_3");
				resourceMap.put("statementClosed_tDBRow_3", true);
				if (commitEvery_tDBRow_3 > commitCounter_tDBRow_3) {

					conn_tDBRow_3.commit();

					commitCounter_tDBRow_3 = 0;

				}

				conn_tDBRow_3.close();

				if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
						&& routines.system.BundleUtils.inOSGi()) {
					Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").getMethod("checkedShutdown")
							.invoke(null, (Object[]) null);
				}

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tDBRow_3", true);
				end_Hash.put("tDBRow_3", System.currentTimeMillis());

				/**
				 * [tDBRow_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tDBRow_3 finally ] start
				 */

				currentComponent = "tDBRow_3";

				try {
					if (resourceMap.get("statementClosed_tDBRow_3") == null) {
						java.sql.Statement stmtToClose_tDBRow_3 = null;
						if ((stmtToClose_tDBRow_3 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_3")) != null) {
							stmtToClose_tDBRow_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBRow_3") == null) {
						java.sql.Connection ctn_tDBRow_3 = null;
						if ((ctn_tDBRow_3 = (java.sql.Connection) resourceMap.get("conn_tDBRow_3")) != null) {
							try {
								ctn_tDBRow_3.close();
							} catch (java.sql.SQLException sqlEx_tDBRow_3) {
								String errorMessage_tDBRow_3 = "failed to close the connection in tDBRow_3 :"
										+ sqlEx_tDBRow_3.getMessage();
								System.err.println(errorMessage_tDBRow_3);
							}
						}
					}
				}

				/**
				 * [tDBRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final IUD_Demo IUD_DemoClass = new IUD_Demo();

		int exitCode = IUD_DemoClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = IUD_Demo.class.getClassLoader()
					.getResourceAsStream("ldr_core_demo/iud_demo_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = IUD_Demo.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_5) {
			globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);

			e_tDBInput_5.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : IUD_Demo");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 148516 characters generated by Talend Open Studio for Data Integration on the
 * December 30, 2020 5:40:56 PM PKT
 ************************************************************************************************/