// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package demo_1.file_input_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: File_Input Purpose: <br>
 * Description: Will provide a file will just write it to another file <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class File_Input implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "File_Input";
	private final String projectName = "DEMO_1";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					File_Input.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(File_Input.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_1_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_1_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_1_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_DEMO_1_File_Input = new byte[0];
		static byte[] commonByteArray_DEMO_1_File_Input = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Photo;

		public String getPhoto() {
			return this.Photo;
		}

		public String Nationality;

		public String getNationality() {
			return this.Nationality;
		}

		public String Flag;

		public String getFlag() {
			return this.Flag;
		}

		public Integer Overall;

		public Integer getOverall() {
			return this.Overall;
		}

		public Integer Potential;

		public Integer getPotential() {
			return this.Potential;
		}

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public String Club_Logo;

		public String getClub_Logo() {
			return this.Club_Logo;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String Wage;

		public String getWage() {
			return this.Wage;
		}

		public Integer Special;

		public Integer getSpecial() {
			return this.Special;
		}

		public String Preferred_Foot;

		public String getPreferred_Foot() {
			return this.Preferred_Foot;
		}

		public Integer International_Reputation;

		public Integer getInternational_Reputation() {
			return this.International_Reputation;
		}

		public Integer Weak_Foot;

		public Integer getWeak_Foot() {
			return this.Weak_Foot;
		}

		public Integer Skill_Moves;

		public Integer getSkill_Moves() {
			return this.Skill_Moves;
		}

		public String Work_Rate;

		public String getWork_Rate() {
			return this.Work_Rate;
		}

		public String Body_Type;

		public String getBody_Type() {
			return this.Body_Type;
		}

		public String Real_Face;

		public String getReal_Face() {
			return this.Real_Face;
		}

		public String Position;

		public String getPosition() {
			return this.Position;
		}

		public Integer Jersey_Number;

		public Integer getJersey_Number() {
			return this.Jersey_Number;
		}

		public String Joined;

		public String getJoined() {
			return this.Joined;
		}

		public String Loaned_From;

		public String getLoaned_From() {
			return this.Loaned_From;
		}

		public String Contract_Valid_Until;

		public String getContract_Valid_Until() {
			return this.Contract_Valid_Until;
		}

		public String Height;

		public String getHeight() {
			return this.Height;
		}

		public String Weight;

		public String getWeight() {
			return this.Weight;
		}

		public String LS;

		public String getLS() {
			return this.LS;
		}

		public String ST;

		public String getST() {
			return this.ST;
		}

		public String RS;

		public String getRS() {
			return this.RS;
		}

		public String LW;

		public String getLW() {
			return this.LW;
		}

		public String LF;

		public String getLF() {
			return this.LF;
		}

		public String CF;

		public String getCF() {
			return this.CF;
		}

		public String RF;

		public String getRF() {
			return this.RF;
		}

		public String RW;

		public String getRW() {
			return this.RW;
		}

		public String LAM;

		public String getLAM() {
			return this.LAM;
		}

		public String CAM;

		public String getCAM() {
			return this.CAM;
		}

		public String RAM;

		public String getRAM() {
			return this.RAM;
		}

		public String LM;

		public String getLM() {
			return this.LM;
		}

		public String LCM;

		public String getLCM() {
			return this.LCM;
		}

		public String CM;

		public String getCM() {
			return this.CM;
		}

		public String RCM;

		public String getRCM() {
			return this.RCM;
		}

		public String RM;

		public String getRM() {
			return this.RM;
		}

		public String LWB;

		public String getLWB() {
			return this.LWB;
		}

		public String LDM;

		public String getLDM() {
			return this.LDM;
		}

		public String CDM;

		public String getCDM() {
			return this.CDM;
		}

		public String RDM;

		public String getRDM() {
			return this.RDM;
		}

		public String RWB;

		public String getRWB() {
			return this.RWB;
		}

		public String LB;

		public String getLB() {
			return this.LB;
		}

		public String LCB;

		public String getLCB() {
			return this.LCB;
		}

		public String CB;

		public String getCB() {
			return this.CB;
		}

		public String RCB;

		public String getRCB() {
			return this.RCB;
		}

		public String RB;

		public String getRB() {
			return this.RB;
		}

		public Integer Crossing;

		public Integer getCrossing() {
			return this.Crossing;
		}

		public Integer Finishing;

		public Integer getFinishing() {
			return this.Finishing;
		}

		public Integer HeadingAccuracy;

		public Integer getHeadingAccuracy() {
			return this.HeadingAccuracy;
		}

		public Integer ShortPassing;

		public Integer getShortPassing() {
			return this.ShortPassing;
		}

		public Integer Volleys;

		public Integer getVolleys() {
			return this.Volleys;
		}

		public Integer Dribbling;

		public Integer getDribbling() {
			return this.Dribbling;
		}

		public Integer Curve;

		public Integer getCurve() {
			return this.Curve;
		}

		public Integer FKAccuracy;

		public Integer getFKAccuracy() {
			return this.FKAccuracy;
		}

		public Integer LongPassing;

		public Integer getLongPassing() {
			return this.LongPassing;
		}

		public Integer BallControl;

		public Integer getBallControl() {
			return this.BallControl;
		}

		public Integer Acceleration;

		public Integer getAcceleration() {
			return this.Acceleration;
		}

		public Integer SprintSpeed;

		public Integer getSprintSpeed() {
			return this.SprintSpeed;
		}

		public Integer Agility;

		public Integer getAgility() {
			return this.Agility;
		}

		public Integer Reactions;

		public Integer getReactions() {
			return this.Reactions;
		}

		public Integer Balance;

		public Integer getBalance() {
			return this.Balance;
		}

		public Integer ShotPower;

		public Integer getShotPower() {
			return this.ShotPower;
		}

		public Integer Jumping;

		public Integer getJumping() {
			return this.Jumping;
		}

		public Integer Stamina;

		public Integer getStamina() {
			return this.Stamina;
		}

		public Integer Strength;

		public Integer getStrength() {
			return this.Strength;
		}

		public Integer LongShots;

		public Integer getLongShots() {
			return this.LongShots;
		}

		public Integer Aggression;

		public Integer getAggression() {
			return this.Aggression;
		}

		public Integer Interceptions;

		public Integer getInterceptions() {
			return this.Interceptions;
		}

		public Integer Positioning;

		public Integer getPositioning() {
			return this.Positioning;
		}

		public Integer Vision;

		public Integer getVision() {
			return this.Vision;
		}

		public Integer Penalties;

		public Integer getPenalties() {
			return this.Penalties;
		}

		public Integer Composure;

		public Integer getComposure() {
			return this.Composure;
		}

		public Integer Marking;

		public Integer getMarking() {
			return this.Marking;
		}

		public Integer StandingTackle;

		public Integer getStandingTackle() {
			return this.StandingTackle;
		}

		public Integer SlidingTackle;

		public Integer getSlidingTackle() {
			return this.SlidingTackle;
		}

		public Integer GKDiving;

		public Integer getGKDiving() {
			return this.GKDiving;
		}

		public Integer GKHandling;

		public Integer getGKHandling() {
			return this.GKHandling;
		}

		public Integer GKKicking;

		public Integer getGKKicking() {
			return this.GKKicking;
		}

		public Integer GKPositioning;

		public Integer getGKPositioning() {
			return this.GKPositioning;
		}

		public Integer GKReflexes;

		public Integer getGKReflexes() {
			return this.GKReflexes;
		}

		public String Release_Clause;

		public String getRelease_Clause() {
			return this.Release_Clause;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_1_File_Input.length) {
					if (length < 1024 && commonByteArray_DEMO_1_File_Input.length == 0) {
						commonByteArray_DEMO_1_File_Input = new byte[1024];
					} else {
						commonByteArray_DEMO_1_File_Input = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_1_File_Input, 0, length);
				strReturn = new String(commonByteArray_DEMO_1_File_Input, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_1_File_Input) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readString(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readInteger(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// String

				writeString(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// Integer

				writeInteger(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// String

				writeString(this.Release_Clause, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Photo=" + Photo);
			sb.append(",Nationality=" + Nationality);
			sb.append(",Flag=" + Flag);
			sb.append(",Overall=" + String.valueOf(Overall));
			sb.append(",Potential=" + String.valueOf(Potential));
			sb.append(",Club=" + Club);
			sb.append(",Club_Logo=" + Club_Logo);
			sb.append(",Value=" + Value);
			sb.append(",Wage=" + Wage);
			sb.append(",Special=" + String.valueOf(Special));
			sb.append(",Preferred_Foot=" + Preferred_Foot);
			sb.append(",International_Reputation=" + String.valueOf(International_Reputation));
			sb.append(",Weak_Foot=" + String.valueOf(Weak_Foot));
			sb.append(",Skill_Moves=" + String.valueOf(Skill_Moves));
			sb.append(",Work_Rate=" + Work_Rate);
			sb.append(",Body_Type=" + Body_Type);
			sb.append(",Real_Face=" + Real_Face);
			sb.append(",Position=" + Position);
			sb.append(",Jersey_Number=" + String.valueOf(Jersey_Number));
			sb.append(",Joined=" + Joined);
			sb.append(",Loaned_From=" + Loaned_From);
			sb.append(",Contract_Valid_Until=" + Contract_Valid_Until);
			sb.append(",Height=" + Height);
			sb.append(",Weight=" + Weight);
			sb.append(",LS=" + LS);
			sb.append(",ST=" + ST);
			sb.append(",RS=" + RS);
			sb.append(",LW=" + LW);
			sb.append(",LF=" + LF);
			sb.append(",CF=" + CF);
			sb.append(",RF=" + RF);
			sb.append(",RW=" + RW);
			sb.append(",LAM=" + LAM);
			sb.append(",CAM=" + CAM);
			sb.append(",RAM=" + RAM);
			sb.append(",LM=" + LM);
			sb.append(",LCM=" + LCM);
			sb.append(",CM=" + CM);
			sb.append(",RCM=" + RCM);
			sb.append(",RM=" + RM);
			sb.append(",LWB=" + LWB);
			sb.append(",LDM=" + LDM);
			sb.append(",CDM=" + CDM);
			sb.append(",RDM=" + RDM);
			sb.append(",RWB=" + RWB);
			sb.append(",LB=" + LB);
			sb.append(",LCB=" + LCB);
			sb.append(",CB=" + CB);
			sb.append(",RCB=" + RCB);
			sb.append(",RB=" + RB);
			sb.append(",Crossing=" + String.valueOf(Crossing));
			sb.append(",Finishing=" + String.valueOf(Finishing));
			sb.append(",HeadingAccuracy=" + String.valueOf(HeadingAccuracy));
			sb.append(",ShortPassing=" + String.valueOf(ShortPassing));
			sb.append(",Volleys=" + String.valueOf(Volleys));
			sb.append(",Dribbling=" + String.valueOf(Dribbling));
			sb.append(",Curve=" + String.valueOf(Curve));
			sb.append(",FKAccuracy=" + String.valueOf(FKAccuracy));
			sb.append(",LongPassing=" + String.valueOf(LongPassing));
			sb.append(",BallControl=" + String.valueOf(BallControl));
			sb.append(",Acceleration=" + String.valueOf(Acceleration));
			sb.append(",SprintSpeed=" + String.valueOf(SprintSpeed));
			sb.append(",Agility=" + String.valueOf(Agility));
			sb.append(",Reactions=" + String.valueOf(Reactions));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append(",ShotPower=" + String.valueOf(ShotPower));
			sb.append(",Jumping=" + String.valueOf(Jumping));
			sb.append(",Stamina=" + String.valueOf(Stamina));
			sb.append(",Strength=" + String.valueOf(Strength));
			sb.append(",LongShots=" + String.valueOf(LongShots));
			sb.append(",Aggression=" + String.valueOf(Aggression));
			sb.append(",Interceptions=" + String.valueOf(Interceptions));
			sb.append(",Positioning=" + String.valueOf(Positioning));
			sb.append(",Vision=" + String.valueOf(Vision));
			sb.append(",Penalties=" + String.valueOf(Penalties));
			sb.append(",Composure=" + String.valueOf(Composure));
			sb.append(",Marking=" + String.valueOf(Marking));
			sb.append(",StandingTackle=" + String.valueOf(StandingTackle));
			sb.append(",SlidingTackle=" + String.valueOf(SlidingTackle));
			sb.append(",GKDiving=" + String.valueOf(GKDiving));
			sb.append(",GKHandling=" + String.valueOf(GKHandling));
			sb.append(",GKKicking=" + String.valueOf(GKKicking));
			sb.append(",GKPositioning=" + String.valueOf(GKPositioning));
			sb.append(",GKReflexes=" + String.valueOf(GKReflexes));
			sb.append(",Release_Clause=" + Release_Clause);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DEMO_1_File_Input = new byte[0];
		static byte[] commonByteArray_DEMO_1_File_Input = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Photo;

		public String getPhoto() {
			return this.Photo;
		}

		public String Nationality;

		public String getNationality() {
			return this.Nationality;
		}

		public String Flag;

		public String getFlag() {
			return this.Flag;
		}

		public Integer Overall;

		public Integer getOverall() {
			return this.Overall;
		}

		public Integer Potential;

		public Integer getPotential() {
			return this.Potential;
		}

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public String Club_Logo;

		public String getClub_Logo() {
			return this.Club_Logo;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String Wage;

		public String getWage() {
			return this.Wage;
		}

		public Integer Special;

		public Integer getSpecial() {
			return this.Special;
		}

		public String Preferred_Foot;

		public String getPreferred_Foot() {
			return this.Preferred_Foot;
		}

		public Integer International_Reputation;

		public Integer getInternational_Reputation() {
			return this.International_Reputation;
		}

		public Integer Weak_Foot;

		public Integer getWeak_Foot() {
			return this.Weak_Foot;
		}

		public Integer Skill_Moves;

		public Integer getSkill_Moves() {
			return this.Skill_Moves;
		}

		public String Work_Rate;

		public String getWork_Rate() {
			return this.Work_Rate;
		}

		public String Body_Type;

		public String getBody_Type() {
			return this.Body_Type;
		}

		public String Real_Face;

		public String getReal_Face() {
			return this.Real_Face;
		}

		public String Position;

		public String getPosition() {
			return this.Position;
		}

		public Integer Jersey_Number;

		public Integer getJersey_Number() {
			return this.Jersey_Number;
		}

		public String Joined;

		public String getJoined() {
			return this.Joined;
		}

		public String Loaned_From;

		public String getLoaned_From() {
			return this.Loaned_From;
		}

		public String Contract_Valid_Until;

		public String getContract_Valid_Until() {
			return this.Contract_Valid_Until;
		}

		public String Height;

		public String getHeight() {
			return this.Height;
		}

		public String Weight;

		public String getWeight() {
			return this.Weight;
		}

		public String LS;

		public String getLS() {
			return this.LS;
		}

		public String ST;

		public String getST() {
			return this.ST;
		}

		public String RS;

		public String getRS() {
			return this.RS;
		}

		public String LW;

		public String getLW() {
			return this.LW;
		}

		public String LF;

		public String getLF() {
			return this.LF;
		}

		public String CF;

		public String getCF() {
			return this.CF;
		}

		public String RF;

		public String getRF() {
			return this.RF;
		}

		public String RW;

		public String getRW() {
			return this.RW;
		}

		public String LAM;

		public String getLAM() {
			return this.LAM;
		}

		public String CAM;

		public String getCAM() {
			return this.CAM;
		}

		public String RAM;

		public String getRAM() {
			return this.RAM;
		}

		public String LM;

		public String getLM() {
			return this.LM;
		}

		public String LCM;

		public String getLCM() {
			return this.LCM;
		}

		public String CM;

		public String getCM() {
			return this.CM;
		}

		public String RCM;

		public String getRCM() {
			return this.RCM;
		}

		public String RM;

		public String getRM() {
			return this.RM;
		}

		public String LWB;

		public String getLWB() {
			return this.LWB;
		}

		public String LDM;

		public String getLDM() {
			return this.LDM;
		}

		public String CDM;

		public String getCDM() {
			return this.CDM;
		}

		public String RDM;

		public String getRDM() {
			return this.RDM;
		}

		public String RWB;

		public String getRWB() {
			return this.RWB;
		}

		public String LB;

		public String getLB() {
			return this.LB;
		}

		public String LCB;

		public String getLCB() {
			return this.LCB;
		}

		public String CB;

		public String getCB() {
			return this.CB;
		}

		public String RCB;

		public String getRCB() {
			return this.RCB;
		}

		public String RB;

		public String getRB() {
			return this.RB;
		}

		public Integer Crossing;

		public Integer getCrossing() {
			return this.Crossing;
		}

		public Integer Finishing;

		public Integer getFinishing() {
			return this.Finishing;
		}

		public Integer HeadingAccuracy;

		public Integer getHeadingAccuracy() {
			return this.HeadingAccuracy;
		}

		public Integer ShortPassing;

		public Integer getShortPassing() {
			return this.ShortPassing;
		}

		public Integer Volleys;

		public Integer getVolleys() {
			return this.Volleys;
		}

		public Integer Dribbling;

		public Integer getDribbling() {
			return this.Dribbling;
		}

		public Integer Curve;

		public Integer getCurve() {
			return this.Curve;
		}

		public Integer FKAccuracy;

		public Integer getFKAccuracy() {
			return this.FKAccuracy;
		}

		public Integer LongPassing;

		public Integer getLongPassing() {
			return this.LongPassing;
		}

		public Integer BallControl;

		public Integer getBallControl() {
			return this.BallControl;
		}

		public Integer Acceleration;

		public Integer getAcceleration() {
			return this.Acceleration;
		}

		public Integer SprintSpeed;

		public Integer getSprintSpeed() {
			return this.SprintSpeed;
		}

		public Integer Agility;

		public Integer getAgility() {
			return this.Agility;
		}

		public Integer Reactions;

		public Integer getReactions() {
			return this.Reactions;
		}

		public Integer Balance;

		public Integer getBalance() {
			return this.Balance;
		}

		public Integer ShotPower;

		public Integer getShotPower() {
			return this.ShotPower;
		}

		public Integer Jumping;

		public Integer getJumping() {
			return this.Jumping;
		}

		public Integer Stamina;

		public Integer getStamina() {
			return this.Stamina;
		}

		public Integer Strength;

		public Integer getStrength() {
			return this.Strength;
		}

		public Integer LongShots;

		public Integer getLongShots() {
			return this.LongShots;
		}

		public Integer Aggression;

		public Integer getAggression() {
			return this.Aggression;
		}

		public Integer Interceptions;

		public Integer getInterceptions() {
			return this.Interceptions;
		}

		public Integer Positioning;

		public Integer getPositioning() {
			return this.Positioning;
		}

		public Integer Vision;

		public Integer getVision() {
			return this.Vision;
		}

		public Integer Penalties;

		public Integer getPenalties() {
			return this.Penalties;
		}

		public Integer Composure;

		public Integer getComposure() {
			return this.Composure;
		}

		public Integer Marking;

		public Integer getMarking() {
			return this.Marking;
		}

		public Integer StandingTackle;

		public Integer getStandingTackle() {
			return this.StandingTackle;
		}

		public Integer SlidingTackle;

		public Integer getSlidingTackle() {
			return this.SlidingTackle;
		}

		public Integer GKDiving;

		public Integer getGKDiving() {
			return this.GKDiving;
		}

		public Integer GKHandling;

		public Integer getGKHandling() {
			return this.GKHandling;
		}

		public Integer GKKicking;

		public Integer getGKKicking() {
			return this.GKKicking;
		}

		public Integer GKPositioning;

		public Integer getGKPositioning() {
			return this.GKPositioning;
		}

		public Integer GKReflexes;

		public Integer getGKReflexes() {
			return this.GKReflexes;
		}

		public String Release_Clause;

		public String getRelease_Clause() {
			return this.Release_Clause;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_1_File_Input.length) {
					if (length < 1024 && commonByteArray_DEMO_1_File_Input.length == 0) {
						commonByteArray_DEMO_1_File_Input = new byte[1024];
					} else {
						commonByteArray_DEMO_1_File_Input = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_1_File_Input, 0, length);
				strReturn = new String(commonByteArray_DEMO_1_File_Input, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_1_File_Input) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readString(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readInteger(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// String

				writeString(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// Integer

				writeInteger(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// String

				writeString(this.Release_Clause, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Photo=" + Photo);
			sb.append(",Nationality=" + Nationality);
			sb.append(",Flag=" + Flag);
			sb.append(",Overall=" + String.valueOf(Overall));
			sb.append(",Potential=" + String.valueOf(Potential));
			sb.append(",Club=" + Club);
			sb.append(",Club_Logo=" + Club_Logo);
			sb.append(",Value=" + Value);
			sb.append(",Wage=" + Wage);
			sb.append(",Special=" + String.valueOf(Special));
			sb.append(",Preferred_Foot=" + Preferred_Foot);
			sb.append(",International_Reputation=" + String.valueOf(International_Reputation));
			sb.append(",Weak_Foot=" + String.valueOf(Weak_Foot));
			sb.append(",Skill_Moves=" + String.valueOf(Skill_Moves));
			sb.append(",Work_Rate=" + Work_Rate);
			sb.append(",Body_Type=" + Body_Type);
			sb.append(",Real_Face=" + Real_Face);
			sb.append(",Position=" + Position);
			sb.append(",Jersey_Number=" + String.valueOf(Jersey_Number));
			sb.append(",Joined=" + Joined);
			sb.append(",Loaned_From=" + Loaned_From);
			sb.append(",Contract_Valid_Until=" + Contract_Valid_Until);
			sb.append(",Height=" + Height);
			sb.append(",Weight=" + Weight);
			sb.append(",LS=" + LS);
			sb.append(",ST=" + ST);
			sb.append(",RS=" + RS);
			sb.append(",LW=" + LW);
			sb.append(",LF=" + LF);
			sb.append(",CF=" + CF);
			sb.append(",RF=" + RF);
			sb.append(",RW=" + RW);
			sb.append(",LAM=" + LAM);
			sb.append(",CAM=" + CAM);
			sb.append(",RAM=" + RAM);
			sb.append(",LM=" + LM);
			sb.append(",LCM=" + LCM);
			sb.append(",CM=" + CM);
			sb.append(",RCM=" + RCM);
			sb.append(",RM=" + RM);
			sb.append(",LWB=" + LWB);
			sb.append(",LDM=" + LDM);
			sb.append(",CDM=" + CDM);
			sb.append(",RDM=" + RDM);
			sb.append(",RWB=" + RWB);
			sb.append(",LB=" + LB);
			sb.append(",LCB=" + LCB);
			sb.append(",CB=" + CB);
			sb.append(",RCB=" + RCB);
			sb.append(",RB=" + RB);
			sb.append(",Crossing=" + String.valueOf(Crossing));
			sb.append(",Finishing=" + String.valueOf(Finishing));
			sb.append(",HeadingAccuracy=" + String.valueOf(HeadingAccuracy));
			sb.append(",ShortPassing=" + String.valueOf(ShortPassing));
			sb.append(",Volleys=" + String.valueOf(Volleys));
			sb.append(",Dribbling=" + String.valueOf(Dribbling));
			sb.append(",Curve=" + String.valueOf(Curve));
			sb.append(",FKAccuracy=" + String.valueOf(FKAccuracy));
			sb.append(",LongPassing=" + String.valueOf(LongPassing));
			sb.append(",BallControl=" + String.valueOf(BallControl));
			sb.append(",Acceleration=" + String.valueOf(Acceleration));
			sb.append(",SprintSpeed=" + String.valueOf(SprintSpeed));
			sb.append(",Agility=" + String.valueOf(Agility));
			sb.append(",Reactions=" + String.valueOf(Reactions));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append(",ShotPower=" + String.valueOf(ShotPower));
			sb.append(",Jumping=" + String.valueOf(Jumping));
			sb.append(",Stamina=" + String.valueOf(Stamina));
			sb.append(",Strength=" + String.valueOf(Strength));
			sb.append(",LongShots=" + String.valueOf(LongShots));
			sb.append(",Aggression=" + String.valueOf(Aggression));
			sb.append(",Interceptions=" + String.valueOf(Interceptions));
			sb.append(",Positioning=" + String.valueOf(Positioning));
			sb.append(",Vision=" + String.valueOf(Vision));
			sb.append(",Penalties=" + String.valueOf(Penalties));
			sb.append(",Composure=" + String.valueOf(Composure));
			sb.append(",Marking=" + String.valueOf(Marking));
			sb.append(",StandingTackle=" + String.valueOf(StandingTackle));
			sb.append(",SlidingTackle=" + String.valueOf(SlidingTackle));
			sb.append(",GKDiving=" + String.valueOf(GKDiving));
			sb.append(",GKHandling=" + String.valueOf(GKHandling));
			sb.append(",GKKicking=" + String.valueOf(GKKicking));
			sb.append(",GKPositioning=" + String.valueOf(GKPositioning));
			sb.append(",GKReflexes=" + String.valueOf(GKReflexes));
			sb.append(",Release_Clause=" + Release_Clause);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DEMO_1_File_Input = new byte[0];
		static byte[] commonByteArray_DEMO_1_File_Input = new byte[0];

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public Integer Number_of_players;

		public Integer getNumber_of_players() {
			return this.Number_of_players;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_1_File_Input.length) {
					if (length < 1024 && commonByteArray_DEMO_1_File_Input.length == 0) {
						commonByteArray_DEMO_1_File_Input = new byte[1024];
					} else {
						commonByteArray_DEMO_1_File_Input = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_1_File_Input, 0, length);
				strReturn = new String(commonByteArray_DEMO_1_File_Input, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_1_File_Input) {

				try {

					int length = 0;

					this.Club = readString(dis);

					this.Number_of_players = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Club, dos);

				// Integer

				writeInteger(this.Number_of_players, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Club=" + Club);
			sb.append(",Number_of_players=" + String.valueOf(Number_of_players));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_DEMO_1_File_Input = new byte[0];
		static byte[] commonByteArray_DEMO_1_File_Input = new byte[0];

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public Integer Number_of_players;

		public Integer getNumber_of_players() {
			return this.Number_of_players;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_1_File_Input.length) {
					if (length < 1024 && commonByteArray_DEMO_1_File_Input.length == 0) {
						commonByteArray_DEMO_1_File_Input = new byte[1024];
					} else {
						commonByteArray_DEMO_1_File_Input = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_1_File_Input, 0, length);
				strReturn = new String(commonByteArray_DEMO_1_File_Input, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_1_File_Input) {

				try {

					int length = 0;

					this.Club = readString(dis);

					this.Number_of_players = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Club, dos);

				// Integer

				writeInteger(this.Number_of_players, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Club=" + Club);
			sb.append(",Number_of_players=" + String.valueOf(Number_of_players));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DEMO_1_File_Input = new byte[0];
		static byte[] commonByteArray_DEMO_1_File_Input = new byte[0];

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public Integer Number_of_players;

		public Integer getNumber_of_players() {
			return this.Number_of_players;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_1_File_Input.length) {
					if (length < 1024 && commonByteArray_DEMO_1_File_Input.length == 0) {
						commonByteArray_DEMO_1_File_Input = new byte[1024];
					} else {
						commonByteArray_DEMO_1_File_Input = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_1_File_Input, 0, length);
				strReturn = new String(commonByteArray_DEMO_1_File_Input, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_1_File_Input) {

				try {

					int length = 0;

					this.Club = readString(dis);

					this.Number_of_players = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Club, dos);

				// Integer

				writeInteger(this.Number_of_players, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Club=" + Club);
			sb.append(",Number_of_players=" + String.valueOf(Number_of_players));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_DEMO_1_File_Input = new byte[0];
		static byte[] commonByteArray_DEMO_1_File_Input = new byte[0];

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public Integer Number_of_players;

		public Integer getNumber_of_players() {
			return this.Number_of_players;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_1_File_Input.length) {
					if (length < 1024 && commonByteArray_DEMO_1_File_Input.length == 0) {
						commonByteArray_DEMO_1_File_Input = new byte[1024];
					} else {
						commonByteArray_DEMO_1_File_Input = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_1_File_Input, 0, length);
				strReturn = new String(commonByteArray_DEMO_1_File_Input, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_1_File_Input) {

				try {

					int length = 0;

					this.Club = readString(dis);

					this.Number_of_players = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Club, dos);

				// Integer

				writeInteger(this.Number_of_players, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Club=" + Club);
			sb.append(",Number_of_players=" + String.valueOf(Number_of_players));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEMO_1_File_Input = new byte[0];
		static byte[] commonByteArray_DEMO_1_File_Input = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Photo;

		public String getPhoto() {
			return this.Photo;
		}

		public String Nationality;

		public String getNationality() {
			return this.Nationality;
		}

		public String Flag;

		public String getFlag() {
			return this.Flag;
		}

		public Integer Overall;

		public Integer getOverall() {
			return this.Overall;
		}

		public Integer Potential;

		public Integer getPotential() {
			return this.Potential;
		}

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public String Club_Logo;

		public String getClub_Logo() {
			return this.Club_Logo;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String Wage;

		public String getWage() {
			return this.Wage;
		}

		public Integer Special;

		public Integer getSpecial() {
			return this.Special;
		}

		public String Preferred_Foot;

		public String getPreferred_Foot() {
			return this.Preferred_Foot;
		}

		public Integer International_Reputation;

		public Integer getInternational_Reputation() {
			return this.International_Reputation;
		}

		public Integer Weak_Foot;

		public Integer getWeak_Foot() {
			return this.Weak_Foot;
		}

		public Integer Skill_Moves;

		public Integer getSkill_Moves() {
			return this.Skill_Moves;
		}

		public String Work_Rate;

		public String getWork_Rate() {
			return this.Work_Rate;
		}

		public String Body_Type;

		public String getBody_Type() {
			return this.Body_Type;
		}

		public String Real_Face;

		public String getReal_Face() {
			return this.Real_Face;
		}

		public String Position;

		public String getPosition() {
			return this.Position;
		}

		public Integer Jersey_Number;

		public Integer getJersey_Number() {
			return this.Jersey_Number;
		}

		public String Joined;

		public String getJoined() {
			return this.Joined;
		}

		public String Loaned_From;

		public String getLoaned_From() {
			return this.Loaned_From;
		}

		public String Contract_Valid_Until;

		public String getContract_Valid_Until() {
			return this.Contract_Valid_Until;
		}

		public String Height;

		public String getHeight() {
			return this.Height;
		}

		public String Weight;

		public String getWeight() {
			return this.Weight;
		}

		public String LS;

		public String getLS() {
			return this.LS;
		}

		public String ST;

		public String getST() {
			return this.ST;
		}

		public String RS;

		public String getRS() {
			return this.RS;
		}

		public String LW;

		public String getLW() {
			return this.LW;
		}

		public String LF;

		public String getLF() {
			return this.LF;
		}

		public String CF;

		public String getCF() {
			return this.CF;
		}

		public String RF;

		public String getRF() {
			return this.RF;
		}

		public String RW;

		public String getRW() {
			return this.RW;
		}

		public String LAM;

		public String getLAM() {
			return this.LAM;
		}

		public String CAM;

		public String getCAM() {
			return this.CAM;
		}

		public String RAM;

		public String getRAM() {
			return this.RAM;
		}

		public String LM;

		public String getLM() {
			return this.LM;
		}

		public String LCM;

		public String getLCM() {
			return this.LCM;
		}

		public String CM;

		public String getCM() {
			return this.CM;
		}

		public String RCM;

		public String getRCM() {
			return this.RCM;
		}

		public String RM;

		public String getRM() {
			return this.RM;
		}

		public String LWB;

		public String getLWB() {
			return this.LWB;
		}

		public String LDM;

		public String getLDM() {
			return this.LDM;
		}

		public String CDM;

		public String getCDM() {
			return this.CDM;
		}

		public String RDM;

		public String getRDM() {
			return this.RDM;
		}

		public String RWB;

		public String getRWB() {
			return this.RWB;
		}

		public String LB;

		public String getLB() {
			return this.LB;
		}

		public String LCB;

		public String getLCB() {
			return this.LCB;
		}

		public String CB;

		public String getCB() {
			return this.CB;
		}

		public String RCB;

		public String getRCB() {
			return this.RCB;
		}

		public String RB;

		public String getRB() {
			return this.RB;
		}

		public Integer Crossing;

		public Integer getCrossing() {
			return this.Crossing;
		}

		public Integer Finishing;

		public Integer getFinishing() {
			return this.Finishing;
		}

		public Integer HeadingAccuracy;

		public Integer getHeadingAccuracy() {
			return this.HeadingAccuracy;
		}

		public Integer ShortPassing;

		public Integer getShortPassing() {
			return this.ShortPassing;
		}

		public Integer Volleys;

		public Integer getVolleys() {
			return this.Volleys;
		}

		public Integer Dribbling;

		public Integer getDribbling() {
			return this.Dribbling;
		}

		public Integer Curve;

		public Integer getCurve() {
			return this.Curve;
		}

		public Integer FKAccuracy;

		public Integer getFKAccuracy() {
			return this.FKAccuracy;
		}

		public Integer LongPassing;

		public Integer getLongPassing() {
			return this.LongPassing;
		}

		public Integer BallControl;

		public Integer getBallControl() {
			return this.BallControl;
		}

		public Integer Acceleration;

		public Integer getAcceleration() {
			return this.Acceleration;
		}

		public Integer SprintSpeed;

		public Integer getSprintSpeed() {
			return this.SprintSpeed;
		}

		public Integer Agility;

		public Integer getAgility() {
			return this.Agility;
		}

		public Integer Reactions;

		public Integer getReactions() {
			return this.Reactions;
		}

		public Integer Balance;

		public Integer getBalance() {
			return this.Balance;
		}

		public Integer ShotPower;

		public Integer getShotPower() {
			return this.ShotPower;
		}

		public Integer Jumping;

		public Integer getJumping() {
			return this.Jumping;
		}

		public Integer Stamina;

		public Integer getStamina() {
			return this.Stamina;
		}

		public Integer Strength;

		public Integer getStrength() {
			return this.Strength;
		}

		public Integer LongShots;

		public Integer getLongShots() {
			return this.LongShots;
		}

		public Integer Aggression;

		public Integer getAggression() {
			return this.Aggression;
		}

		public Integer Interceptions;

		public Integer getInterceptions() {
			return this.Interceptions;
		}

		public Integer Positioning;

		public Integer getPositioning() {
			return this.Positioning;
		}

		public Integer Vision;

		public Integer getVision() {
			return this.Vision;
		}

		public Integer Penalties;

		public Integer getPenalties() {
			return this.Penalties;
		}

		public Integer Composure;

		public Integer getComposure() {
			return this.Composure;
		}

		public Integer Marking;

		public Integer getMarking() {
			return this.Marking;
		}

		public Integer StandingTackle;

		public Integer getStandingTackle() {
			return this.StandingTackle;
		}

		public Integer SlidingTackle;

		public Integer getSlidingTackle() {
			return this.SlidingTackle;
		}

		public Integer GKDiving;

		public Integer getGKDiving() {
			return this.GKDiving;
		}

		public Integer GKHandling;

		public Integer getGKHandling() {
			return this.GKHandling;
		}

		public Integer GKKicking;

		public Integer getGKKicking() {
			return this.GKKicking;
		}

		public Integer GKPositioning;

		public Integer getGKPositioning() {
			return this.GKPositioning;
		}

		public Integer GKReflexes;

		public Integer getGKReflexes() {
			return this.GKReflexes;
		}

		public String Release_Clause;

		public String getRelease_Clause() {
			return this.Release_Clause;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_1_File_Input.length) {
					if (length < 1024 && commonByteArray_DEMO_1_File_Input.length == 0) {
						commonByteArray_DEMO_1_File_Input = new byte[1024];
					} else {
						commonByteArray_DEMO_1_File_Input = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_1_File_Input, 0, length);
				strReturn = new String(commonByteArray_DEMO_1_File_Input, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_1_File_Input) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readString(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readInteger(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// String

				writeString(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// Integer

				writeInteger(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// String

				writeString(this.Release_Clause, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Photo=" + Photo);
			sb.append(",Nationality=" + Nationality);
			sb.append(",Flag=" + Flag);
			sb.append(",Overall=" + String.valueOf(Overall));
			sb.append(",Potential=" + String.valueOf(Potential));
			sb.append(",Club=" + Club);
			sb.append(",Club_Logo=" + Club_Logo);
			sb.append(",Value=" + Value);
			sb.append(",Wage=" + Wage);
			sb.append(",Special=" + String.valueOf(Special));
			sb.append(",Preferred_Foot=" + Preferred_Foot);
			sb.append(",International_Reputation=" + String.valueOf(International_Reputation));
			sb.append(",Weak_Foot=" + String.valueOf(Weak_Foot));
			sb.append(",Skill_Moves=" + String.valueOf(Skill_Moves));
			sb.append(",Work_Rate=" + Work_Rate);
			sb.append(",Body_Type=" + Body_Type);
			sb.append(",Real_Face=" + Real_Face);
			sb.append(",Position=" + Position);
			sb.append(",Jersey_Number=" + String.valueOf(Jersey_Number));
			sb.append(",Joined=" + Joined);
			sb.append(",Loaned_From=" + Loaned_From);
			sb.append(",Contract_Valid_Until=" + Contract_Valid_Until);
			sb.append(",Height=" + Height);
			sb.append(",Weight=" + Weight);
			sb.append(",LS=" + LS);
			sb.append(",ST=" + ST);
			sb.append(",RS=" + RS);
			sb.append(",LW=" + LW);
			sb.append(",LF=" + LF);
			sb.append(",CF=" + CF);
			sb.append(",RF=" + RF);
			sb.append(",RW=" + RW);
			sb.append(",LAM=" + LAM);
			sb.append(",CAM=" + CAM);
			sb.append(",RAM=" + RAM);
			sb.append(",LM=" + LM);
			sb.append(",LCM=" + LCM);
			sb.append(",CM=" + CM);
			sb.append(",RCM=" + RCM);
			sb.append(",RM=" + RM);
			sb.append(",LWB=" + LWB);
			sb.append(",LDM=" + LDM);
			sb.append(",CDM=" + CDM);
			sb.append(",RDM=" + RDM);
			sb.append(",RWB=" + RWB);
			sb.append(",LB=" + LB);
			sb.append(",LCB=" + LCB);
			sb.append(",CB=" + CB);
			sb.append(",RCB=" + RCB);
			sb.append(",RB=" + RB);
			sb.append(",Crossing=" + String.valueOf(Crossing));
			sb.append(",Finishing=" + String.valueOf(Finishing));
			sb.append(",HeadingAccuracy=" + String.valueOf(HeadingAccuracy));
			sb.append(",ShortPassing=" + String.valueOf(ShortPassing));
			sb.append(",Volleys=" + String.valueOf(Volleys));
			sb.append(",Dribbling=" + String.valueOf(Dribbling));
			sb.append(",Curve=" + String.valueOf(Curve));
			sb.append(",FKAccuracy=" + String.valueOf(FKAccuracy));
			sb.append(",LongPassing=" + String.valueOf(LongPassing));
			sb.append(",BallControl=" + String.valueOf(BallControl));
			sb.append(",Acceleration=" + String.valueOf(Acceleration));
			sb.append(",SprintSpeed=" + String.valueOf(SprintSpeed));
			sb.append(",Agility=" + String.valueOf(Agility));
			sb.append(",Reactions=" + String.valueOf(Reactions));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append(",ShotPower=" + String.valueOf(ShotPower));
			sb.append(",Jumping=" + String.valueOf(Jumping));
			sb.append(",Stamina=" + String.valueOf(Stamina));
			sb.append(",Strength=" + String.valueOf(Strength));
			sb.append(",LongShots=" + String.valueOf(LongShots));
			sb.append(",Aggression=" + String.valueOf(Aggression));
			sb.append(",Interceptions=" + String.valueOf(Interceptions));
			sb.append(",Positioning=" + String.valueOf(Positioning));
			sb.append(",Vision=" + String.valueOf(Vision));
			sb.append(",Penalties=" + String.valueOf(Penalties));
			sb.append(",Composure=" + String.valueOf(Composure));
			sb.append(",Marking=" + String.valueOf(Marking));
			sb.append(",StandingTackle=" + String.valueOf(StandingTackle));
			sb.append(",SlidingTackle=" + String.valueOf(SlidingTackle));
			sb.append(",GKDiving=" + String.valueOf(GKDiving));
			sb.append(",GKHandling=" + String.valueOf(GKHandling));
			sb.append(",GKKicking=" + String.valueOf(GKKicking));
			sb.append(",GKPositioning=" + String.valueOf(GKPositioning));
			sb.append(",GKReflexes=" + String.valueOf(GKReflexes));
			sb.append(",Release_Clause=" + Release_Clause);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DEMO_1_File_Input = new byte[0];
		static byte[] commonByteArray_DEMO_1_File_Input = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Photo;

		public String getPhoto() {
			return this.Photo;
		}

		public String Nationality;

		public String getNationality() {
			return this.Nationality;
		}

		public String Flag;

		public String getFlag() {
			return this.Flag;
		}

		public Integer Overall;

		public Integer getOverall() {
			return this.Overall;
		}

		public Integer Potential;

		public Integer getPotential() {
			return this.Potential;
		}

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public String Club_Logo;

		public String getClub_Logo() {
			return this.Club_Logo;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String Wage;

		public String getWage() {
			return this.Wage;
		}

		public Integer Special;

		public Integer getSpecial() {
			return this.Special;
		}

		public String Preferred_Foot;

		public String getPreferred_Foot() {
			return this.Preferred_Foot;
		}

		public Integer International_Reputation;

		public Integer getInternational_Reputation() {
			return this.International_Reputation;
		}

		public Integer Weak_Foot;

		public Integer getWeak_Foot() {
			return this.Weak_Foot;
		}

		public Integer Skill_Moves;

		public Integer getSkill_Moves() {
			return this.Skill_Moves;
		}

		public String Work_Rate;

		public String getWork_Rate() {
			return this.Work_Rate;
		}

		public String Body_Type;

		public String getBody_Type() {
			return this.Body_Type;
		}

		public String Real_Face;

		public String getReal_Face() {
			return this.Real_Face;
		}

		public String Position;

		public String getPosition() {
			return this.Position;
		}

		public Integer Jersey_Number;

		public Integer getJersey_Number() {
			return this.Jersey_Number;
		}

		public String Joined;

		public String getJoined() {
			return this.Joined;
		}

		public String Loaned_From;

		public String getLoaned_From() {
			return this.Loaned_From;
		}

		public String Contract_Valid_Until;

		public String getContract_Valid_Until() {
			return this.Contract_Valid_Until;
		}

		public String Height;

		public String getHeight() {
			return this.Height;
		}

		public String Weight;

		public String getWeight() {
			return this.Weight;
		}

		public String LS;

		public String getLS() {
			return this.LS;
		}

		public String ST;

		public String getST() {
			return this.ST;
		}

		public String RS;

		public String getRS() {
			return this.RS;
		}

		public String LW;

		public String getLW() {
			return this.LW;
		}

		public String LF;

		public String getLF() {
			return this.LF;
		}

		public String CF;

		public String getCF() {
			return this.CF;
		}

		public String RF;

		public String getRF() {
			return this.RF;
		}

		public String RW;

		public String getRW() {
			return this.RW;
		}

		public String LAM;

		public String getLAM() {
			return this.LAM;
		}

		public String CAM;

		public String getCAM() {
			return this.CAM;
		}

		public String RAM;

		public String getRAM() {
			return this.RAM;
		}

		public String LM;

		public String getLM() {
			return this.LM;
		}

		public String LCM;

		public String getLCM() {
			return this.LCM;
		}

		public String CM;

		public String getCM() {
			return this.CM;
		}

		public String RCM;

		public String getRCM() {
			return this.RCM;
		}

		public String RM;

		public String getRM() {
			return this.RM;
		}

		public String LWB;

		public String getLWB() {
			return this.LWB;
		}

		public String LDM;

		public String getLDM() {
			return this.LDM;
		}

		public String CDM;

		public String getCDM() {
			return this.CDM;
		}

		public String RDM;

		public String getRDM() {
			return this.RDM;
		}

		public String RWB;

		public String getRWB() {
			return this.RWB;
		}

		public String LB;

		public String getLB() {
			return this.LB;
		}

		public String LCB;

		public String getLCB() {
			return this.LCB;
		}

		public String CB;

		public String getCB() {
			return this.CB;
		}

		public String RCB;

		public String getRCB() {
			return this.RCB;
		}

		public String RB;

		public String getRB() {
			return this.RB;
		}

		public Integer Crossing;

		public Integer getCrossing() {
			return this.Crossing;
		}

		public Integer Finishing;

		public Integer getFinishing() {
			return this.Finishing;
		}

		public Integer HeadingAccuracy;

		public Integer getHeadingAccuracy() {
			return this.HeadingAccuracy;
		}

		public Integer ShortPassing;

		public Integer getShortPassing() {
			return this.ShortPassing;
		}

		public Integer Volleys;

		public Integer getVolleys() {
			return this.Volleys;
		}

		public Integer Dribbling;

		public Integer getDribbling() {
			return this.Dribbling;
		}

		public Integer Curve;

		public Integer getCurve() {
			return this.Curve;
		}

		public Integer FKAccuracy;

		public Integer getFKAccuracy() {
			return this.FKAccuracy;
		}

		public Integer LongPassing;

		public Integer getLongPassing() {
			return this.LongPassing;
		}

		public Integer BallControl;

		public Integer getBallControl() {
			return this.BallControl;
		}

		public Integer Acceleration;

		public Integer getAcceleration() {
			return this.Acceleration;
		}

		public Integer SprintSpeed;

		public Integer getSprintSpeed() {
			return this.SprintSpeed;
		}

		public Integer Agility;

		public Integer getAgility() {
			return this.Agility;
		}

		public Integer Reactions;

		public Integer getReactions() {
			return this.Reactions;
		}

		public Integer Balance;

		public Integer getBalance() {
			return this.Balance;
		}

		public Integer ShotPower;

		public Integer getShotPower() {
			return this.ShotPower;
		}

		public Integer Jumping;

		public Integer getJumping() {
			return this.Jumping;
		}

		public Integer Stamina;

		public Integer getStamina() {
			return this.Stamina;
		}

		public Integer Strength;

		public Integer getStrength() {
			return this.Strength;
		}

		public Integer LongShots;

		public Integer getLongShots() {
			return this.LongShots;
		}

		public Integer Aggression;

		public Integer getAggression() {
			return this.Aggression;
		}

		public Integer Interceptions;

		public Integer getInterceptions() {
			return this.Interceptions;
		}

		public Integer Positioning;

		public Integer getPositioning() {
			return this.Positioning;
		}

		public Integer Vision;

		public Integer getVision() {
			return this.Vision;
		}

		public Integer Penalties;

		public Integer getPenalties() {
			return this.Penalties;
		}

		public Integer Composure;

		public Integer getComposure() {
			return this.Composure;
		}

		public Integer Marking;

		public Integer getMarking() {
			return this.Marking;
		}

		public Integer StandingTackle;

		public Integer getStandingTackle() {
			return this.StandingTackle;
		}

		public Integer SlidingTackle;

		public Integer getSlidingTackle() {
			return this.SlidingTackle;
		}

		public Integer GKDiving;

		public Integer getGKDiving() {
			return this.GKDiving;
		}

		public Integer GKHandling;

		public Integer getGKHandling() {
			return this.GKHandling;
		}

		public Integer GKKicking;

		public Integer getGKKicking() {
			return this.GKKicking;
		}

		public Integer GKPositioning;

		public Integer getGKPositioning() {
			return this.GKPositioning;
		}

		public Integer GKReflexes;

		public Integer getGKReflexes() {
			return this.GKReflexes;
		}

		public String Release_Clause;

		public String getRelease_Clause() {
			return this.Release_Clause;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_1_File_Input.length) {
					if (length < 1024 && commonByteArray_DEMO_1_File_Input.length == 0) {
						commonByteArray_DEMO_1_File_Input = new byte[1024];
					} else {
						commonByteArray_DEMO_1_File_Input = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_1_File_Input, 0, length);
				strReturn = new String(commonByteArray_DEMO_1_File_Input, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_1_File_Input) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readString(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readInteger(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// String

				writeString(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// Integer

				writeInteger(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// String

				writeString(this.Release_Clause, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Photo=" + Photo);
			sb.append(",Nationality=" + Nationality);
			sb.append(",Flag=" + Flag);
			sb.append(",Overall=" + String.valueOf(Overall));
			sb.append(",Potential=" + String.valueOf(Potential));
			sb.append(",Club=" + Club);
			sb.append(",Club_Logo=" + Club_Logo);
			sb.append(",Value=" + Value);
			sb.append(",Wage=" + Wage);
			sb.append(",Special=" + String.valueOf(Special));
			sb.append(",Preferred_Foot=" + Preferred_Foot);
			sb.append(",International_Reputation=" + String.valueOf(International_Reputation));
			sb.append(",Weak_Foot=" + String.valueOf(Weak_Foot));
			sb.append(",Skill_Moves=" + String.valueOf(Skill_Moves));
			sb.append(",Work_Rate=" + Work_Rate);
			sb.append(",Body_Type=" + Body_Type);
			sb.append(",Real_Face=" + Real_Face);
			sb.append(",Position=" + Position);
			sb.append(",Jersey_Number=" + String.valueOf(Jersey_Number));
			sb.append(",Joined=" + Joined);
			sb.append(",Loaned_From=" + Loaned_From);
			sb.append(",Contract_Valid_Until=" + Contract_Valid_Until);
			sb.append(",Height=" + Height);
			sb.append(",Weight=" + Weight);
			sb.append(",LS=" + LS);
			sb.append(",ST=" + ST);
			sb.append(",RS=" + RS);
			sb.append(",LW=" + LW);
			sb.append(",LF=" + LF);
			sb.append(",CF=" + CF);
			sb.append(",RF=" + RF);
			sb.append(",RW=" + RW);
			sb.append(",LAM=" + LAM);
			sb.append(",CAM=" + CAM);
			sb.append(",RAM=" + RAM);
			sb.append(",LM=" + LM);
			sb.append(",LCM=" + LCM);
			sb.append(",CM=" + CM);
			sb.append(",RCM=" + RCM);
			sb.append(",RM=" + RM);
			sb.append(",LWB=" + LWB);
			sb.append(",LDM=" + LDM);
			sb.append(",CDM=" + CDM);
			sb.append(",RDM=" + RDM);
			sb.append(",RWB=" + RWB);
			sb.append(",LB=" + LB);
			sb.append(",LCB=" + LCB);
			sb.append(",CB=" + CB);
			sb.append(",RCB=" + RCB);
			sb.append(",RB=" + RB);
			sb.append(",Crossing=" + String.valueOf(Crossing));
			sb.append(",Finishing=" + String.valueOf(Finishing));
			sb.append(",HeadingAccuracy=" + String.valueOf(HeadingAccuracy));
			sb.append(",ShortPassing=" + String.valueOf(ShortPassing));
			sb.append(",Volleys=" + String.valueOf(Volleys));
			sb.append(",Dribbling=" + String.valueOf(Dribbling));
			sb.append(",Curve=" + String.valueOf(Curve));
			sb.append(",FKAccuracy=" + String.valueOf(FKAccuracy));
			sb.append(",LongPassing=" + String.valueOf(LongPassing));
			sb.append(",BallControl=" + String.valueOf(BallControl));
			sb.append(",Acceleration=" + String.valueOf(Acceleration));
			sb.append(",SprintSpeed=" + String.valueOf(SprintSpeed));
			sb.append(",Agility=" + String.valueOf(Agility));
			sb.append(",Reactions=" + String.valueOf(Reactions));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append(",ShotPower=" + String.valueOf(ShotPower));
			sb.append(",Jumping=" + String.valueOf(Jumping));
			sb.append(",Stamina=" + String.valueOf(Stamina));
			sb.append(",Strength=" + String.valueOf(Strength));
			sb.append(",LongShots=" + String.valueOf(LongShots));
			sb.append(",Aggression=" + String.valueOf(Aggression));
			sb.append(",Interceptions=" + String.valueOf(Interceptions));
			sb.append(",Positioning=" + String.valueOf(Positioning));
			sb.append(",Vision=" + String.valueOf(Vision));
			sb.append(",Penalties=" + String.valueOf(Penalties));
			sb.append(",Composure=" + String.valueOf(Composure));
			sb.append(",Marking=" + String.valueOf(Marking));
			sb.append(",StandingTackle=" + String.valueOf(StandingTackle));
			sb.append(",SlidingTackle=" + String.valueOf(SlidingTackle));
			sb.append(",GKDiving=" + String.valueOf(GKDiving));
			sb.append(",GKHandling=" + String.valueOf(GKHandling));
			sb.append(",GKKicking=" + String.valueOf(GKKicking));
			sb.append(",GKPositioning=" + String.valueOf(GKPositioning));
			sb.append(",GKReflexes=" + String.valueOf(GKReflexes));
			sb.append(",Release_Clause=" + Release_Clause);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DEMO_1_File_Input = new byte[0];
		static byte[] commonByteArray_DEMO_1_File_Input = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Photo;

		public String getPhoto() {
			return this.Photo;
		}

		public String Nationality;

		public String getNationality() {
			return this.Nationality;
		}

		public String Flag;

		public String getFlag() {
			return this.Flag;
		}

		public Integer Overall;

		public Integer getOverall() {
			return this.Overall;
		}

		public Integer Potential;

		public Integer getPotential() {
			return this.Potential;
		}

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public String Club_Logo;

		public String getClub_Logo() {
			return this.Club_Logo;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String Wage;

		public String getWage() {
			return this.Wage;
		}

		public Integer Special;

		public Integer getSpecial() {
			return this.Special;
		}

		public String Preferred_Foot;

		public String getPreferred_Foot() {
			return this.Preferred_Foot;
		}

		public Integer International_Reputation;

		public Integer getInternational_Reputation() {
			return this.International_Reputation;
		}

		public Integer Weak_Foot;

		public Integer getWeak_Foot() {
			return this.Weak_Foot;
		}

		public Integer Skill_Moves;

		public Integer getSkill_Moves() {
			return this.Skill_Moves;
		}

		public String Work_Rate;

		public String getWork_Rate() {
			return this.Work_Rate;
		}

		public String Body_Type;

		public String getBody_Type() {
			return this.Body_Type;
		}

		public String Real_Face;

		public String getReal_Face() {
			return this.Real_Face;
		}

		public String Position;

		public String getPosition() {
			return this.Position;
		}

		public Integer Jersey_Number;

		public Integer getJersey_Number() {
			return this.Jersey_Number;
		}

		public String Joined;

		public String getJoined() {
			return this.Joined;
		}

		public String Loaned_From;

		public String getLoaned_From() {
			return this.Loaned_From;
		}

		public String Contract_Valid_Until;

		public String getContract_Valid_Until() {
			return this.Contract_Valid_Until;
		}

		public String Height;

		public String getHeight() {
			return this.Height;
		}

		public String Weight;

		public String getWeight() {
			return this.Weight;
		}

		public String LS;

		public String getLS() {
			return this.LS;
		}

		public String ST;

		public String getST() {
			return this.ST;
		}

		public String RS;

		public String getRS() {
			return this.RS;
		}

		public String LW;

		public String getLW() {
			return this.LW;
		}

		public String LF;

		public String getLF() {
			return this.LF;
		}

		public String CF;

		public String getCF() {
			return this.CF;
		}

		public String RF;

		public String getRF() {
			return this.RF;
		}

		public String RW;

		public String getRW() {
			return this.RW;
		}

		public String LAM;

		public String getLAM() {
			return this.LAM;
		}

		public String CAM;

		public String getCAM() {
			return this.CAM;
		}

		public String RAM;

		public String getRAM() {
			return this.RAM;
		}

		public String LM;

		public String getLM() {
			return this.LM;
		}

		public String LCM;

		public String getLCM() {
			return this.LCM;
		}

		public String CM;

		public String getCM() {
			return this.CM;
		}

		public String RCM;

		public String getRCM() {
			return this.RCM;
		}

		public String RM;

		public String getRM() {
			return this.RM;
		}

		public String LWB;

		public String getLWB() {
			return this.LWB;
		}

		public String LDM;

		public String getLDM() {
			return this.LDM;
		}

		public String CDM;

		public String getCDM() {
			return this.CDM;
		}

		public String RDM;

		public String getRDM() {
			return this.RDM;
		}

		public String RWB;

		public String getRWB() {
			return this.RWB;
		}

		public String LB;

		public String getLB() {
			return this.LB;
		}

		public String LCB;

		public String getLCB() {
			return this.LCB;
		}

		public String CB;

		public String getCB() {
			return this.CB;
		}

		public String RCB;

		public String getRCB() {
			return this.RCB;
		}

		public String RB;

		public String getRB() {
			return this.RB;
		}

		public Integer Crossing;

		public Integer getCrossing() {
			return this.Crossing;
		}

		public Integer Finishing;

		public Integer getFinishing() {
			return this.Finishing;
		}

		public Integer HeadingAccuracy;

		public Integer getHeadingAccuracy() {
			return this.HeadingAccuracy;
		}

		public Integer ShortPassing;

		public Integer getShortPassing() {
			return this.ShortPassing;
		}

		public Integer Volleys;

		public Integer getVolleys() {
			return this.Volleys;
		}

		public Integer Dribbling;

		public Integer getDribbling() {
			return this.Dribbling;
		}

		public Integer Curve;

		public Integer getCurve() {
			return this.Curve;
		}

		public Integer FKAccuracy;

		public Integer getFKAccuracy() {
			return this.FKAccuracy;
		}

		public Integer LongPassing;

		public Integer getLongPassing() {
			return this.LongPassing;
		}

		public Integer BallControl;

		public Integer getBallControl() {
			return this.BallControl;
		}

		public Integer Acceleration;

		public Integer getAcceleration() {
			return this.Acceleration;
		}

		public Integer SprintSpeed;

		public Integer getSprintSpeed() {
			return this.SprintSpeed;
		}

		public Integer Agility;

		public Integer getAgility() {
			return this.Agility;
		}

		public Integer Reactions;

		public Integer getReactions() {
			return this.Reactions;
		}

		public Integer Balance;

		public Integer getBalance() {
			return this.Balance;
		}

		public Integer ShotPower;

		public Integer getShotPower() {
			return this.ShotPower;
		}

		public Integer Jumping;

		public Integer getJumping() {
			return this.Jumping;
		}

		public Integer Stamina;

		public Integer getStamina() {
			return this.Stamina;
		}

		public Integer Strength;

		public Integer getStrength() {
			return this.Strength;
		}

		public Integer LongShots;

		public Integer getLongShots() {
			return this.LongShots;
		}

		public Integer Aggression;

		public Integer getAggression() {
			return this.Aggression;
		}

		public Integer Interceptions;

		public Integer getInterceptions() {
			return this.Interceptions;
		}

		public Integer Positioning;

		public Integer getPositioning() {
			return this.Positioning;
		}

		public Integer Vision;

		public Integer getVision() {
			return this.Vision;
		}

		public Integer Penalties;

		public Integer getPenalties() {
			return this.Penalties;
		}

		public Integer Composure;

		public Integer getComposure() {
			return this.Composure;
		}

		public Integer Marking;

		public Integer getMarking() {
			return this.Marking;
		}

		public Integer StandingTackle;

		public Integer getStandingTackle() {
			return this.StandingTackle;
		}

		public Integer SlidingTackle;

		public Integer getSlidingTackle() {
			return this.SlidingTackle;
		}

		public Integer GKDiving;

		public Integer getGKDiving() {
			return this.GKDiving;
		}

		public Integer GKHandling;

		public Integer getGKHandling() {
			return this.GKHandling;
		}

		public Integer GKKicking;

		public Integer getGKKicking() {
			return this.GKKicking;
		}

		public Integer GKPositioning;

		public Integer getGKPositioning() {
			return this.GKPositioning;
		}

		public Integer GKReflexes;

		public Integer getGKReflexes() {
			return this.GKReflexes;
		}

		public String Release_Clause;

		public String getRelease_Clause() {
			return this.Release_Clause;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_1_File_Input.length) {
					if (length < 1024 && commonByteArray_DEMO_1_File_Input.length == 0) {
						commonByteArray_DEMO_1_File_Input = new byte[1024];
					} else {
						commonByteArray_DEMO_1_File_Input = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_1_File_Input, 0, length);
				strReturn = new String(commonByteArray_DEMO_1_File_Input, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_1_File_Input) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readString(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readInteger(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// String

				writeString(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// Integer

				writeInteger(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// String

				writeString(this.Release_Clause, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Photo=" + Photo);
			sb.append(",Nationality=" + Nationality);
			sb.append(",Flag=" + Flag);
			sb.append(",Overall=" + String.valueOf(Overall));
			sb.append(",Potential=" + String.valueOf(Potential));
			sb.append(",Club=" + Club);
			sb.append(",Club_Logo=" + Club_Logo);
			sb.append(",Value=" + Value);
			sb.append(",Wage=" + Wage);
			sb.append(",Special=" + String.valueOf(Special));
			sb.append(",Preferred_Foot=" + Preferred_Foot);
			sb.append(",International_Reputation=" + String.valueOf(International_Reputation));
			sb.append(",Weak_Foot=" + String.valueOf(Weak_Foot));
			sb.append(",Skill_Moves=" + String.valueOf(Skill_Moves));
			sb.append(",Work_Rate=" + Work_Rate);
			sb.append(",Body_Type=" + Body_Type);
			sb.append(",Real_Face=" + Real_Face);
			sb.append(",Position=" + Position);
			sb.append(",Jersey_Number=" + String.valueOf(Jersey_Number));
			sb.append(",Joined=" + Joined);
			sb.append(",Loaned_From=" + Loaned_From);
			sb.append(",Contract_Valid_Until=" + Contract_Valid_Until);
			sb.append(",Height=" + Height);
			sb.append(",Weight=" + Weight);
			sb.append(",LS=" + LS);
			sb.append(",ST=" + ST);
			sb.append(",RS=" + RS);
			sb.append(",LW=" + LW);
			sb.append(",LF=" + LF);
			sb.append(",CF=" + CF);
			sb.append(",RF=" + RF);
			sb.append(",RW=" + RW);
			sb.append(",LAM=" + LAM);
			sb.append(",CAM=" + CAM);
			sb.append(",RAM=" + RAM);
			sb.append(",LM=" + LM);
			sb.append(",LCM=" + LCM);
			sb.append(",CM=" + CM);
			sb.append(",RCM=" + RCM);
			sb.append(",RM=" + RM);
			sb.append(",LWB=" + LWB);
			sb.append(",LDM=" + LDM);
			sb.append(",CDM=" + CDM);
			sb.append(",RDM=" + RDM);
			sb.append(",RWB=" + RWB);
			sb.append(",LB=" + LB);
			sb.append(",LCB=" + LCB);
			sb.append(",CB=" + CB);
			sb.append(",RCB=" + RCB);
			sb.append(",RB=" + RB);
			sb.append(",Crossing=" + String.valueOf(Crossing));
			sb.append(",Finishing=" + String.valueOf(Finishing));
			sb.append(",HeadingAccuracy=" + String.valueOf(HeadingAccuracy));
			sb.append(",ShortPassing=" + String.valueOf(ShortPassing));
			sb.append(",Volleys=" + String.valueOf(Volleys));
			sb.append(",Dribbling=" + String.valueOf(Dribbling));
			sb.append(",Curve=" + String.valueOf(Curve));
			sb.append(",FKAccuracy=" + String.valueOf(FKAccuracy));
			sb.append(",LongPassing=" + String.valueOf(LongPassing));
			sb.append(",BallControl=" + String.valueOf(BallControl));
			sb.append(",Acceleration=" + String.valueOf(Acceleration));
			sb.append(",SprintSpeed=" + String.valueOf(SprintSpeed));
			sb.append(",Agility=" + String.valueOf(Agility));
			sb.append(",Reactions=" + String.valueOf(Reactions));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append(",ShotPower=" + String.valueOf(ShotPower));
			sb.append(",Jumping=" + String.valueOf(Jumping));
			sb.append(",Stamina=" + String.valueOf(Stamina));
			sb.append(",Strength=" + String.valueOf(Strength));
			sb.append(",LongShots=" + String.valueOf(LongShots));
			sb.append(",Aggression=" + String.valueOf(Aggression));
			sb.append(",Interceptions=" + String.valueOf(Interceptions));
			sb.append(",Positioning=" + String.valueOf(Positioning));
			sb.append(",Vision=" + String.valueOf(Vision));
			sb.append(",Penalties=" + String.valueOf(Penalties));
			sb.append(",Composure=" + String.valueOf(Composure));
			sb.append(",Marking=" + String.valueOf(Marking));
			sb.append(",StandingTackle=" + String.valueOf(StandingTackle));
			sb.append(",SlidingTackle=" + String.valueOf(SlidingTackle));
			sb.append(",GKDiving=" + String.valueOf(GKDiving));
			sb.append(",GKHandling=" + String.valueOf(GKHandling));
			sb.append(",GKKicking=" + String.valueOf(GKKicking));
			sb.append(",GKPositioning=" + String.valueOf(GKPositioning));
			sb.append(",GKReflexes=" + String.valueOf(GKReflexes));
			sb.append(",Release_Clause=" + Release_Clause);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEMO_1_File_Input = new byte[0];
		static byte[] commonByteArray_DEMO_1_File_Input = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Photo;

		public String getPhoto() {
			return this.Photo;
		}

		public String Nationality;

		public String getNationality() {
			return this.Nationality;
		}

		public String Flag;

		public String getFlag() {
			return this.Flag;
		}

		public Integer Overall;

		public Integer getOverall() {
			return this.Overall;
		}

		public Integer Potential;

		public Integer getPotential() {
			return this.Potential;
		}

		public String Club;

		public String getClub() {
			return this.Club;
		}

		public String Club_Logo;

		public String getClub_Logo() {
			return this.Club_Logo;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String Wage;

		public String getWage() {
			return this.Wage;
		}

		public Integer Special;

		public Integer getSpecial() {
			return this.Special;
		}

		public String Preferred_Foot;

		public String getPreferred_Foot() {
			return this.Preferred_Foot;
		}

		public Integer International_Reputation;

		public Integer getInternational_Reputation() {
			return this.International_Reputation;
		}

		public Integer Weak_Foot;

		public Integer getWeak_Foot() {
			return this.Weak_Foot;
		}

		public Integer Skill_Moves;

		public Integer getSkill_Moves() {
			return this.Skill_Moves;
		}

		public String Work_Rate;

		public String getWork_Rate() {
			return this.Work_Rate;
		}

		public String Body_Type;

		public String getBody_Type() {
			return this.Body_Type;
		}

		public String Real_Face;

		public String getReal_Face() {
			return this.Real_Face;
		}

		public String Position;

		public String getPosition() {
			return this.Position;
		}

		public Integer Jersey_Number;

		public Integer getJersey_Number() {
			return this.Jersey_Number;
		}

		public String Joined;

		public String getJoined() {
			return this.Joined;
		}

		public String Loaned_From;

		public String getLoaned_From() {
			return this.Loaned_From;
		}

		public String Contract_Valid_Until;

		public String getContract_Valid_Until() {
			return this.Contract_Valid_Until;
		}

		public String Height;

		public String getHeight() {
			return this.Height;
		}

		public String Weight;

		public String getWeight() {
			return this.Weight;
		}

		public String LS;

		public String getLS() {
			return this.LS;
		}

		public String ST;

		public String getST() {
			return this.ST;
		}

		public String RS;

		public String getRS() {
			return this.RS;
		}

		public String LW;

		public String getLW() {
			return this.LW;
		}

		public String LF;

		public String getLF() {
			return this.LF;
		}

		public String CF;

		public String getCF() {
			return this.CF;
		}

		public String RF;

		public String getRF() {
			return this.RF;
		}

		public String RW;

		public String getRW() {
			return this.RW;
		}

		public String LAM;

		public String getLAM() {
			return this.LAM;
		}

		public String CAM;

		public String getCAM() {
			return this.CAM;
		}

		public String RAM;

		public String getRAM() {
			return this.RAM;
		}

		public String LM;

		public String getLM() {
			return this.LM;
		}

		public String LCM;

		public String getLCM() {
			return this.LCM;
		}

		public String CM;

		public String getCM() {
			return this.CM;
		}

		public String RCM;

		public String getRCM() {
			return this.RCM;
		}

		public String RM;

		public String getRM() {
			return this.RM;
		}

		public String LWB;

		public String getLWB() {
			return this.LWB;
		}

		public String LDM;

		public String getLDM() {
			return this.LDM;
		}

		public String CDM;

		public String getCDM() {
			return this.CDM;
		}

		public String RDM;

		public String getRDM() {
			return this.RDM;
		}

		public String RWB;

		public String getRWB() {
			return this.RWB;
		}

		public String LB;

		public String getLB() {
			return this.LB;
		}

		public String LCB;

		public String getLCB() {
			return this.LCB;
		}

		public String CB;

		public String getCB() {
			return this.CB;
		}

		public String RCB;

		public String getRCB() {
			return this.RCB;
		}

		public String RB;

		public String getRB() {
			return this.RB;
		}

		public Integer Crossing;

		public Integer getCrossing() {
			return this.Crossing;
		}

		public Integer Finishing;

		public Integer getFinishing() {
			return this.Finishing;
		}

		public Integer HeadingAccuracy;

		public Integer getHeadingAccuracy() {
			return this.HeadingAccuracy;
		}

		public Integer ShortPassing;

		public Integer getShortPassing() {
			return this.ShortPassing;
		}

		public Integer Volleys;

		public Integer getVolleys() {
			return this.Volleys;
		}

		public Integer Dribbling;

		public Integer getDribbling() {
			return this.Dribbling;
		}

		public Integer Curve;

		public Integer getCurve() {
			return this.Curve;
		}

		public Integer FKAccuracy;

		public Integer getFKAccuracy() {
			return this.FKAccuracy;
		}

		public Integer LongPassing;

		public Integer getLongPassing() {
			return this.LongPassing;
		}

		public Integer BallControl;

		public Integer getBallControl() {
			return this.BallControl;
		}

		public Integer Acceleration;

		public Integer getAcceleration() {
			return this.Acceleration;
		}

		public Integer SprintSpeed;

		public Integer getSprintSpeed() {
			return this.SprintSpeed;
		}

		public Integer Agility;

		public Integer getAgility() {
			return this.Agility;
		}

		public Integer Reactions;

		public Integer getReactions() {
			return this.Reactions;
		}

		public Integer Balance;

		public Integer getBalance() {
			return this.Balance;
		}

		public Integer ShotPower;

		public Integer getShotPower() {
			return this.ShotPower;
		}

		public Integer Jumping;

		public Integer getJumping() {
			return this.Jumping;
		}

		public Integer Stamina;

		public Integer getStamina() {
			return this.Stamina;
		}

		public Integer Strength;

		public Integer getStrength() {
			return this.Strength;
		}

		public Integer LongShots;

		public Integer getLongShots() {
			return this.LongShots;
		}

		public Integer Aggression;

		public Integer getAggression() {
			return this.Aggression;
		}

		public Integer Interceptions;

		public Integer getInterceptions() {
			return this.Interceptions;
		}

		public Integer Positioning;

		public Integer getPositioning() {
			return this.Positioning;
		}

		public Integer Vision;

		public Integer getVision() {
			return this.Vision;
		}

		public Integer Penalties;

		public Integer getPenalties() {
			return this.Penalties;
		}

		public Integer Composure;

		public Integer getComposure() {
			return this.Composure;
		}

		public Integer Marking;

		public Integer getMarking() {
			return this.Marking;
		}

		public Integer StandingTackle;

		public Integer getStandingTackle() {
			return this.StandingTackle;
		}

		public Integer SlidingTackle;

		public Integer getSlidingTackle() {
			return this.SlidingTackle;
		}

		public Integer GKDiving;

		public Integer getGKDiving() {
			return this.GKDiving;
		}

		public Integer GKHandling;

		public Integer getGKHandling() {
			return this.GKHandling;
		}

		public Integer GKKicking;

		public Integer getGKKicking() {
			return this.GKKicking;
		}

		public Integer GKPositioning;

		public Integer getGKPositioning() {
			return this.GKPositioning;
		}

		public Integer GKReflexes;

		public Integer getGKReflexes() {
			return this.GKReflexes;
		}

		public String Release_Clause;

		public String getRelease_Clause() {
			return this.Release_Clause;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_1_File_Input.length) {
					if (length < 1024 && commonByteArray_DEMO_1_File_Input.length == 0) {
						commonByteArray_DEMO_1_File_Input = new byte[1024];
					} else {
						commonByteArray_DEMO_1_File_Input = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_1_File_Input, 0, length);
				strReturn = new String(commonByteArray_DEMO_1_File_Input, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_1_File_Input) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Name = readString(dis);

					this.Age = readInteger(dis);

					this.Photo = readString(dis);

					this.Nationality = readString(dis);

					this.Flag = readString(dis);

					this.Overall = readInteger(dis);

					this.Potential = readInteger(dis);

					this.Club = readString(dis);

					this.Club_Logo = readString(dis);

					this.Value = readString(dis);

					this.Wage = readString(dis);

					this.Special = readInteger(dis);

					this.Preferred_Foot = readString(dis);

					this.International_Reputation = readInteger(dis);

					this.Weak_Foot = readInteger(dis);

					this.Skill_Moves = readInteger(dis);

					this.Work_Rate = readString(dis);

					this.Body_Type = readString(dis);

					this.Real_Face = readString(dis);

					this.Position = readString(dis);

					this.Jersey_Number = readInteger(dis);

					this.Joined = readString(dis);

					this.Loaned_From = readString(dis);

					this.Contract_Valid_Until = readString(dis);

					this.Height = readString(dis);

					this.Weight = readString(dis);

					this.LS = readString(dis);

					this.ST = readString(dis);

					this.RS = readString(dis);

					this.LW = readString(dis);

					this.LF = readString(dis);

					this.CF = readString(dis);

					this.RF = readString(dis);

					this.RW = readString(dis);

					this.LAM = readString(dis);

					this.CAM = readString(dis);

					this.RAM = readString(dis);

					this.LM = readString(dis);

					this.LCM = readString(dis);

					this.CM = readString(dis);

					this.RCM = readString(dis);

					this.RM = readString(dis);

					this.LWB = readString(dis);

					this.LDM = readString(dis);

					this.CDM = readString(dis);

					this.RDM = readString(dis);

					this.RWB = readString(dis);

					this.LB = readString(dis);

					this.LCB = readString(dis);

					this.CB = readString(dis);

					this.RCB = readString(dis);

					this.RB = readString(dis);

					this.Crossing = readInteger(dis);

					this.Finishing = readInteger(dis);

					this.HeadingAccuracy = readInteger(dis);

					this.ShortPassing = readInteger(dis);

					this.Volleys = readInteger(dis);

					this.Dribbling = readInteger(dis);

					this.Curve = readInteger(dis);

					this.FKAccuracy = readInteger(dis);

					this.LongPassing = readInteger(dis);

					this.BallControl = readInteger(dis);

					this.Acceleration = readInteger(dis);

					this.SprintSpeed = readInteger(dis);

					this.Agility = readInteger(dis);

					this.Reactions = readInteger(dis);

					this.Balance = readInteger(dis);

					this.ShotPower = readInteger(dis);

					this.Jumping = readInteger(dis);

					this.Stamina = readInteger(dis);

					this.Strength = readInteger(dis);

					this.LongShots = readInteger(dis);

					this.Aggression = readInteger(dis);

					this.Interceptions = readInteger(dis);

					this.Positioning = readInteger(dis);

					this.Vision = readInteger(dis);

					this.Penalties = readInteger(dis);

					this.Composure = readInteger(dis);

					this.Marking = readInteger(dis);

					this.StandingTackle = readInteger(dis);

					this.SlidingTackle = readInteger(dis);

					this.GKDiving = readInteger(dis);

					this.GKHandling = readInteger(dis);

					this.GKKicking = readInteger(dis);

					this.GKPositioning = readInteger(dis);

					this.GKReflexes = readInteger(dis);

					this.Release_Clause = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Photo, dos);

				// String

				writeString(this.Nationality, dos);

				// String

				writeString(this.Flag, dos);

				// Integer

				writeInteger(this.Overall, dos);

				// Integer

				writeInteger(this.Potential, dos);

				// String

				writeString(this.Club, dos);

				// String

				writeString(this.Club_Logo, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.Wage, dos);

				// Integer

				writeInteger(this.Special, dos);

				// String

				writeString(this.Preferred_Foot, dos);

				// Integer

				writeInteger(this.International_Reputation, dos);

				// Integer

				writeInteger(this.Weak_Foot, dos);

				// Integer

				writeInteger(this.Skill_Moves, dos);

				// String

				writeString(this.Work_Rate, dos);

				// String

				writeString(this.Body_Type, dos);

				// String

				writeString(this.Real_Face, dos);

				// String

				writeString(this.Position, dos);

				// Integer

				writeInteger(this.Jersey_Number, dos);

				// String

				writeString(this.Joined, dos);

				// String

				writeString(this.Loaned_From, dos);

				// String

				writeString(this.Contract_Valid_Until, dos);

				// String

				writeString(this.Height, dos);

				// String

				writeString(this.Weight, dos);

				// String

				writeString(this.LS, dos);

				// String

				writeString(this.ST, dos);

				// String

				writeString(this.RS, dos);

				// String

				writeString(this.LW, dos);

				// String

				writeString(this.LF, dos);

				// String

				writeString(this.CF, dos);

				// String

				writeString(this.RF, dos);

				// String

				writeString(this.RW, dos);

				// String

				writeString(this.LAM, dos);

				// String

				writeString(this.CAM, dos);

				// String

				writeString(this.RAM, dos);

				// String

				writeString(this.LM, dos);

				// String

				writeString(this.LCM, dos);

				// String

				writeString(this.CM, dos);

				// String

				writeString(this.RCM, dos);

				// String

				writeString(this.RM, dos);

				// String

				writeString(this.LWB, dos);

				// String

				writeString(this.LDM, dos);

				// String

				writeString(this.CDM, dos);

				// String

				writeString(this.RDM, dos);

				// String

				writeString(this.RWB, dos);

				// String

				writeString(this.LB, dos);

				// String

				writeString(this.LCB, dos);

				// String

				writeString(this.CB, dos);

				// String

				writeString(this.RCB, dos);

				// String

				writeString(this.RB, dos);

				// Integer

				writeInteger(this.Crossing, dos);

				// Integer

				writeInteger(this.Finishing, dos);

				// Integer

				writeInteger(this.HeadingAccuracy, dos);

				// Integer

				writeInteger(this.ShortPassing, dos);

				// Integer

				writeInteger(this.Volleys, dos);

				// Integer

				writeInteger(this.Dribbling, dos);

				// Integer

				writeInteger(this.Curve, dos);

				// Integer

				writeInteger(this.FKAccuracy, dos);

				// Integer

				writeInteger(this.LongPassing, dos);

				// Integer

				writeInteger(this.BallControl, dos);

				// Integer

				writeInteger(this.Acceleration, dos);

				// Integer

				writeInteger(this.SprintSpeed, dos);

				// Integer

				writeInteger(this.Agility, dos);

				// Integer

				writeInteger(this.Reactions, dos);

				// Integer

				writeInteger(this.Balance, dos);

				// Integer

				writeInteger(this.ShotPower, dos);

				// Integer

				writeInteger(this.Jumping, dos);

				// Integer

				writeInteger(this.Stamina, dos);

				// Integer

				writeInteger(this.Strength, dos);

				// Integer

				writeInteger(this.LongShots, dos);

				// Integer

				writeInteger(this.Aggression, dos);

				// Integer

				writeInteger(this.Interceptions, dos);

				// Integer

				writeInteger(this.Positioning, dos);

				// Integer

				writeInteger(this.Vision, dos);

				// Integer

				writeInteger(this.Penalties, dos);

				// Integer

				writeInteger(this.Composure, dos);

				// Integer

				writeInteger(this.Marking, dos);

				// Integer

				writeInteger(this.StandingTackle, dos);

				// Integer

				writeInteger(this.SlidingTackle, dos);

				// Integer

				writeInteger(this.GKDiving, dos);

				// Integer

				writeInteger(this.GKHandling, dos);

				// Integer

				writeInteger(this.GKKicking, dos);

				// Integer

				writeInteger(this.GKPositioning, dos);

				// Integer

				writeInteger(this.GKReflexes, dos);

				// String

				writeString(this.Release_Clause, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Photo=" + Photo);
			sb.append(",Nationality=" + Nationality);
			sb.append(",Flag=" + Flag);
			sb.append(",Overall=" + String.valueOf(Overall));
			sb.append(",Potential=" + String.valueOf(Potential));
			sb.append(",Club=" + Club);
			sb.append(",Club_Logo=" + Club_Logo);
			sb.append(",Value=" + Value);
			sb.append(",Wage=" + Wage);
			sb.append(",Special=" + String.valueOf(Special));
			sb.append(",Preferred_Foot=" + Preferred_Foot);
			sb.append(",International_Reputation=" + String.valueOf(International_Reputation));
			sb.append(",Weak_Foot=" + String.valueOf(Weak_Foot));
			sb.append(",Skill_Moves=" + String.valueOf(Skill_Moves));
			sb.append(",Work_Rate=" + Work_Rate);
			sb.append(",Body_Type=" + Body_Type);
			sb.append(",Real_Face=" + Real_Face);
			sb.append(",Position=" + Position);
			sb.append(",Jersey_Number=" + String.valueOf(Jersey_Number));
			sb.append(",Joined=" + Joined);
			sb.append(",Loaned_From=" + Loaned_From);
			sb.append(",Contract_Valid_Until=" + Contract_Valid_Until);
			sb.append(",Height=" + Height);
			sb.append(",Weight=" + Weight);
			sb.append(",LS=" + LS);
			sb.append(",ST=" + ST);
			sb.append(",RS=" + RS);
			sb.append(",LW=" + LW);
			sb.append(",LF=" + LF);
			sb.append(",CF=" + CF);
			sb.append(",RF=" + RF);
			sb.append(",RW=" + RW);
			sb.append(",LAM=" + LAM);
			sb.append(",CAM=" + CAM);
			sb.append(",RAM=" + RAM);
			sb.append(",LM=" + LM);
			sb.append(",LCM=" + LCM);
			sb.append(",CM=" + CM);
			sb.append(",RCM=" + RCM);
			sb.append(",RM=" + RM);
			sb.append(",LWB=" + LWB);
			sb.append(",LDM=" + LDM);
			sb.append(",CDM=" + CDM);
			sb.append(",RDM=" + RDM);
			sb.append(",RWB=" + RWB);
			sb.append(",LB=" + LB);
			sb.append(",LCB=" + LCB);
			sb.append(",CB=" + CB);
			sb.append(",RCB=" + RCB);
			sb.append(",RB=" + RB);
			sb.append(",Crossing=" + String.valueOf(Crossing));
			sb.append(",Finishing=" + String.valueOf(Finishing));
			sb.append(",HeadingAccuracy=" + String.valueOf(HeadingAccuracy));
			sb.append(",ShortPassing=" + String.valueOf(ShortPassing));
			sb.append(",Volleys=" + String.valueOf(Volleys));
			sb.append(",Dribbling=" + String.valueOf(Dribbling));
			sb.append(",Curve=" + String.valueOf(Curve));
			sb.append(",FKAccuracy=" + String.valueOf(FKAccuracy));
			sb.append(",LongPassing=" + String.valueOf(LongPassing));
			sb.append(",BallControl=" + String.valueOf(BallControl));
			sb.append(",Acceleration=" + String.valueOf(Acceleration));
			sb.append(",SprintSpeed=" + String.valueOf(SprintSpeed));
			sb.append(",Agility=" + String.valueOf(Agility));
			sb.append(",Reactions=" + String.valueOf(Reactions));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append(",ShotPower=" + String.valueOf(ShotPower));
			sb.append(",Jumping=" + String.valueOf(Jumping));
			sb.append(",Stamina=" + String.valueOf(Stamina));
			sb.append(",Strength=" + String.valueOf(Strength));
			sb.append(",LongShots=" + String.valueOf(LongShots));
			sb.append(",Aggression=" + String.valueOf(Aggression));
			sb.append(",Interceptions=" + String.valueOf(Interceptions));
			sb.append(",Positioning=" + String.valueOf(Positioning));
			sb.append(",Vision=" + String.valueOf(Vision));
			sb.append(",Penalties=" + String.valueOf(Penalties));
			sb.append(",Composure=" + String.valueOf(Composure));
			sb.append(",Marking=" + String.valueOf(Marking));
			sb.append(",StandingTackle=" + String.valueOf(StandingTackle));
			sb.append(",SlidingTackle=" + String.valueOf(SlidingTackle));
			sb.append(",GKDiving=" + String.valueOf(GKDiving));
			sb.append(",GKHandling=" + String.valueOf(GKHandling));
			sb.append(",GKKicking=" + String.valueOf(GKKicking));
			sb.append(",GKPositioning=" + String.valueOf(GKPositioning));
			sb.append(",GKReflexes=" + String.valueOf(GKReflexes));
			sb.append(",Release_Clause=" + Release_Clause);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();
				row5Struct row5 = new row5Struct();
				row6Struct row6 = new row6Struct();
				row7Struct row7 = new row7Struct();
				row8Struct row8 = new row8Struct();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Club;
					int count = 0;
					int Number_of_players_clmCount = 0;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.Club == null) ? 0 : this.Club.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.Club == null) {
							if (other.Club != null)
								return false;
						} else if (!this.Club.equals(other.Club))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/data_file/output/real_madrid_player_data.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				if (filetFileOutputDelimited_2.exists()) {
					throw new RuntimeException("The particular file \"" + filetFileOutputDelimited_2.getAbsoluteFile()
							+ "\" already exist. If you want to overwrite the file, please uncheck the"
							+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				String[] headColutFileOutputDelimited_2 = new String[88];
				class CSVBasicSet_tFileOutputDelimited_2 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep) throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_2[] = null;

						// support passing value (property: Field Separator) by 'context.fs' or
						// 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_2 = fieldSep.toCharArray();
						} else {
							throw new IllegalArgumentException("Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(",");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_2[] = null;

						// support passing value (property: Row Separator) by 'context.rs' or
						// 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_2 = rowSep.toCharArray();
						} else {
							throw new IllegalArgumentException("Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_2[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException("Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_2[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_2 = strTextEnclosure.toCharArray();
						} else {
							throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
				csvSettings_tFileOutputDelimited_2.setFieldSeparator(",");
				csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure("\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "UTF-8")));
				CsvWritertFileOutputDelimited_2.setSeparator(csvSettings_tFileOutputDelimited_2.getFieldDelim());
				if (!csvSettings_tFileOutputDelimited_2.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_2.setLineEnd("" + csvSettings_tFileOutputDelimited_2.getRowDelim());
				}
				if (filetFileOutputDelimited_2.length() == 0) {
					headColutFileOutputDelimited_2[0] = "ID";
					headColutFileOutputDelimited_2[1] = "Name";
					headColutFileOutputDelimited_2[2] = "Age";
					headColutFileOutputDelimited_2[3] = "Photo";
					headColutFileOutputDelimited_2[4] = "Nationality";
					headColutFileOutputDelimited_2[5] = "Flag";
					headColutFileOutputDelimited_2[6] = "Overall";
					headColutFileOutputDelimited_2[7] = "Potential";
					headColutFileOutputDelimited_2[8] = "Club";
					headColutFileOutputDelimited_2[9] = "Club_Logo";
					headColutFileOutputDelimited_2[10] = "Value";
					headColutFileOutputDelimited_2[11] = "Wage";
					headColutFileOutputDelimited_2[12] = "Special";
					headColutFileOutputDelimited_2[13] = "Preferred_Foot";
					headColutFileOutputDelimited_2[14] = "International_Reputation";
					headColutFileOutputDelimited_2[15] = "Weak_Foot";
					headColutFileOutputDelimited_2[16] = "Skill_Moves";
					headColutFileOutputDelimited_2[17] = "Work_Rate";
					headColutFileOutputDelimited_2[18] = "Body_Type";
					headColutFileOutputDelimited_2[19] = "Real_Face";
					headColutFileOutputDelimited_2[20] = "Position";
					headColutFileOutputDelimited_2[21] = "Jersey_Number";
					headColutFileOutputDelimited_2[22] = "Joined";
					headColutFileOutputDelimited_2[23] = "Loaned_From";
					headColutFileOutputDelimited_2[24] = "Contract_Valid_Until";
					headColutFileOutputDelimited_2[25] = "Height";
					headColutFileOutputDelimited_2[26] = "Weight";
					headColutFileOutputDelimited_2[27] = "LS";
					headColutFileOutputDelimited_2[28] = "ST";
					headColutFileOutputDelimited_2[29] = "RS";
					headColutFileOutputDelimited_2[30] = "LW";
					headColutFileOutputDelimited_2[31] = "LF";
					headColutFileOutputDelimited_2[32] = "CF";
					headColutFileOutputDelimited_2[33] = "RF";
					headColutFileOutputDelimited_2[34] = "RW";
					headColutFileOutputDelimited_2[35] = "LAM";
					headColutFileOutputDelimited_2[36] = "CAM";
					headColutFileOutputDelimited_2[37] = "RAM";
					headColutFileOutputDelimited_2[38] = "LM";
					headColutFileOutputDelimited_2[39] = "LCM";
					headColutFileOutputDelimited_2[40] = "CM";
					headColutFileOutputDelimited_2[41] = "RCM";
					headColutFileOutputDelimited_2[42] = "RM";
					headColutFileOutputDelimited_2[43] = "LWB";
					headColutFileOutputDelimited_2[44] = "LDM";
					headColutFileOutputDelimited_2[45] = "CDM";
					headColutFileOutputDelimited_2[46] = "RDM";
					headColutFileOutputDelimited_2[47] = "RWB";
					headColutFileOutputDelimited_2[48] = "LB";
					headColutFileOutputDelimited_2[49] = "LCB";
					headColutFileOutputDelimited_2[50] = "CB";
					headColutFileOutputDelimited_2[51] = "RCB";
					headColutFileOutputDelimited_2[52] = "RB";
					headColutFileOutputDelimited_2[53] = "Crossing";
					headColutFileOutputDelimited_2[54] = "Finishing";
					headColutFileOutputDelimited_2[55] = "HeadingAccuracy";
					headColutFileOutputDelimited_2[56] = "ShortPassing";
					headColutFileOutputDelimited_2[57] = "Volleys";
					headColutFileOutputDelimited_2[58] = "Dribbling";
					headColutFileOutputDelimited_2[59] = "Curve";
					headColutFileOutputDelimited_2[60] = "FKAccuracy";
					headColutFileOutputDelimited_2[61] = "LongPassing";
					headColutFileOutputDelimited_2[62] = "BallControl";
					headColutFileOutputDelimited_2[63] = "Acceleration";
					headColutFileOutputDelimited_2[64] = "SprintSpeed";
					headColutFileOutputDelimited_2[65] = "Agility";
					headColutFileOutputDelimited_2[66] = "Reactions";
					headColutFileOutputDelimited_2[67] = "Balance";
					headColutFileOutputDelimited_2[68] = "ShotPower";
					headColutFileOutputDelimited_2[69] = "Jumping";
					headColutFileOutputDelimited_2[70] = "Stamina";
					headColutFileOutputDelimited_2[71] = "Strength";
					headColutFileOutputDelimited_2[72] = "LongShots";
					headColutFileOutputDelimited_2[73] = "Aggression";
					headColutFileOutputDelimited_2[74] = "Interceptions";
					headColutFileOutputDelimited_2[75] = "Positioning";
					headColutFileOutputDelimited_2[76] = "Vision";
					headColutFileOutputDelimited_2[77] = "Penalties";
					headColutFileOutputDelimited_2[78] = "Composure";
					headColutFileOutputDelimited_2[79] = "Marking";
					headColutFileOutputDelimited_2[80] = "StandingTackle";
					headColutFileOutputDelimited_2[81] = "SlidingTackle";
					headColutFileOutputDelimited_2[82] = "GKDiving";
					headColutFileOutputDelimited_2[83] = "GKHandling";
					headColutFileOutputDelimited_2[84] = "GKKicking";
					headColutFileOutputDelimited_2[85] = "GKPositioning";
					headColutFileOutputDelimited_2[86] = "GKReflexes";
					headColutFileOutputDelimited_2[87] = "Release_Clause";
					CsvWritertFileOutputDelimited_2.writeNext(headColutFileOutputDelimited_2);
					CsvWritertFileOutputDelimited_2.flush();
				}
				CsvWritertFileOutputDelimited_2.setEscapeChar(csvSettings_tFileOutputDelimited_2.getEscapeChar());
				CsvWritertFileOutputDelimited_2.setQuoteChar(csvSettings_tFileOutputDelimited_2.getTextEnclosure());
				CsvWritertFileOutputDelimited_2.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_2", CsvWritertFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/data_file/output/barcelona_player_data.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				if (filetFileOutputDelimited_3.exists()) {
					throw new RuntimeException("The particular file \"" + filetFileOutputDelimited_3.getAbsoluteFile()
							+ "\" already exist. If you want to overwrite the file, please uncheck the"
							+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */
						"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/data_file/fifa_player_data.csv"/**
																									 * End field
																									 * tFileInputDelimited_1:FILENAME
																									 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),
											"UTF-8")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('\"');

						csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_1.readNext()) {

								totalLinetFileInputDelimited_1++;

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
											: totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1
										? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('\"');

							csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row1.ID = null;

								row1.Name = null;

								row1.Age = null;

								row1.Photo = null;

								row1.Nationality = null;

								row1.Flag = null;

								row1.Overall = null;

								row1.Potential = null;

								row1.Club = null;

								row1.Club_Logo = null;

								row1.Value = null;

								row1.Wage = null;

								row1.Special = null;

								row1.Preferred_Foot = null;

								row1.International_Reputation = null;

								row1.Weak_Foot = null;

								row1.Skill_Moves = null;

								row1.Work_Rate = null;

								row1.Body_Type = null;

								row1.Real_Face = null;

								row1.Position = null;

								row1.Jersey_Number = null;

								row1.Joined = null;

								row1.Loaned_From = null;

								row1.Contract_Valid_Until = null;

								row1.Height = null;

								row1.Weight = null;

								row1.LS = null;

								row1.ST = null;

								row1.RS = null;

								row1.LW = null;

								row1.LF = null;

								row1.CF = null;

								row1.RF = null;

								row1.RW = null;

								row1.LAM = null;

								row1.CAM = null;

								row1.RAM = null;

								row1.LM = null;

								row1.LCM = null;

								row1.CM = null;

								row1.RCM = null;

								row1.RM = null;

								row1.LWB = null;

								row1.LDM = null;

								row1.CDM = null;

								row1.RDM = null;

								row1.RWB = null;

								row1.LB = null;

								row1.LCB = null;

								row1.CB = null;

								row1.RCB = null;

								row1.RB = null;

								row1.Crossing = null;

								row1.Finishing = null;

								row1.HeadingAccuracy = null;

								row1.ShortPassing = null;

								row1.Volleys = null;

								row1.Dribbling = null;

								row1.Curve = null;

								row1.FKAccuracy = null;

								row1.LongPassing = null;

								row1.BallControl = null;

								row1.Acceleration = null;

								row1.SprintSpeed = null;

								row1.Agility = null;

								row1.Reactions = null;

								row1.Balance = null;

								row1.ShotPower = null;

								row1.Jumping = null;

								row1.Stamina = null;

								row1.Strength = null;

								row1.LongShots = null;

								row1.Aggression = null;

								row1.Interceptions = null;

								row1.Positioning = null;

								row1.Vision = null;

								row1.Penalties = null;

								row1.Composure = null;

								row1.Marking = null;

								row1.StandingTackle = null;

								row1.SlidingTackle = null;

								row1.GKDiving = null;

								row1.GKHandling = null;

								row1.GKKicking = null;

								row1.GKPositioning = null;

								row1.GKReflexes = null;

								row1.Release_Clause = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.ID = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"ID", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.ID = null;

									}

								} else {

									row1.ID = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Name = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Name = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Age = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Age", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Age = null;

									}

								} else {

									row1.Age = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Photo = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Photo = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Nationality = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Nationality = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Flag = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Flag = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Overall = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Overall", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Overall = null;

									}

								} else {

									row1.Overall = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Potential = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Potential", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Potential = null;

									}

								} else {

									row1.Potential = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Club = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Club = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Club_Logo = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Club_Logo = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Value = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Value = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Wage = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Wage = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Special = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Special", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Special = null;

									}

								} else {

									row1.Special = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Preferred_Foot = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Preferred_Foot = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.International_Reputation = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"International_Reputation", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.International_Reputation = null;

									}

								} else {

									row1.International_Reputation = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Weak_Foot = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Weak_Foot", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Weak_Foot = null;

									}

								} else {

									row1.Weak_Foot = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Skill_Moves = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Skill_Moves", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Skill_Moves = null;

									}

								} else {

									row1.Skill_Moves = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 17;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Work_Rate = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Work_Rate = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 18;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Body_Type = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Body_Type = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 19;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Real_Face = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Real_Face = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 20;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Position = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Position = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 21;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Jersey_Number = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Jersey_Number", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Jersey_Number = null;

									}

								} else {

									row1.Jersey_Number = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 22;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Joined = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Joined = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 23;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Loaned_From = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Loaned_From = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 24;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Contract_Valid_Until = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Contract_Valid_Until = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 25;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Height = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Height = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 26;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Weight = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Weight = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 27;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.LS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.LS = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 28;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ST = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.ST = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 29;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.RS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.RS = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 30;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.LW = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.LW = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 31;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.LF = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.LF = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 32;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.CF = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.CF = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 33;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.RF = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.RF = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 34;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.RW = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.RW = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 35;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.LAM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.LAM = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 36;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.CAM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.CAM = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 37;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.RAM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.RAM = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 38;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.LM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.LM = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 39;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.LCM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.LCM = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 40;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.CM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.CM = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 41;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.RCM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.RCM = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 42;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.RM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.RM = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 43;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.LWB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.LWB = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 44;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.LDM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.LDM = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 45;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.CDM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.CDM = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 46;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.RDM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.RDM = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 47;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.RWB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.RWB = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 48;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.LB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.LB = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 49;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.LCB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.LCB = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 50;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.CB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.CB = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 51;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.RCB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.RCB = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 52;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.RB = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.RB = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 53;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Crossing = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Crossing", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Crossing = null;

									}

								} else {

									row1.Crossing = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 54;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Finishing = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Finishing", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Finishing = null;

									}

								} else {

									row1.Finishing = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 55;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.HeadingAccuracy = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"HeadingAccuracy", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.HeadingAccuracy = null;

									}

								} else {

									row1.HeadingAccuracy = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 56;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.ShortPassing = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"ShortPassing", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.ShortPassing = null;

									}

								} else {

									row1.ShortPassing = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 57;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Volleys = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Volleys", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Volleys = null;

									}

								} else {

									row1.Volleys = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 58;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Dribbling = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Dribbling", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Dribbling = null;

									}

								} else {

									row1.Dribbling = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 59;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Curve = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Curve", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Curve = null;

									}

								} else {

									row1.Curve = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 60;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.FKAccuracy = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"FKAccuracy", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.FKAccuracy = null;

									}

								} else {

									row1.FKAccuracy = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 61;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.LongPassing = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"LongPassing", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.LongPassing = null;

									}

								} else {

									row1.LongPassing = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 62;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.BallControl = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"BallControl", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.BallControl = null;

									}

								} else {

									row1.BallControl = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 63;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Acceleration = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Acceleration", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Acceleration = null;

									}

								} else {

									row1.Acceleration = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 64;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.SprintSpeed = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"SprintSpeed", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.SprintSpeed = null;

									}

								} else {

									row1.SprintSpeed = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 65;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Agility = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Agility", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Agility = null;

									}

								} else {

									row1.Agility = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 66;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Reactions = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Reactions", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Reactions = null;

									}

								} else {

									row1.Reactions = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 67;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Balance = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Balance", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Balance = null;

									}

								} else {

									row1.Balance = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 68;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.ShotPower = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"ShotPower", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.ShotPower = null;

									}

								} else {

									row1.ShotPower = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 69;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Jumping = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Jumping", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Jumping = null;

									}

								} else {

									row1.Jumping = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 70;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Stamina = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Stamina", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Stamina = null;

									}

								} else {

									row1.Stamina = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 71;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Strength = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Strength", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Strength = null;

									}

								} else {

									row1.Strength = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 72;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.LongShots = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"LongShots", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.LongShots = null;

									}

								} else {

									row1.LongShots = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 73;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Aggression = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Aggression", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Aggression = null;

									}

								} else {

									row1.Aggression = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 74;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Interceptions = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Interceptions", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Interceptions = null;

									}

								} else {

									row1.Interceptions = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 75;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Positioning = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Positioning", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Positioning = null;

									}

								} else {

									row1.Positioning = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 76;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Vision = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Vision", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Vision = null;

									}

								} else {

									row1.Vision = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 77;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Penalties = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Penalties", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Penalties = null;

									}

								} else {

									row1.Penalties = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 78;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Composure = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Composure", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Composure = null;

									}

								} else {

									row1.Composure = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 79;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Marking = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Marking", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Marking = null;

									}

								} else {

									row1.Marking = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 80;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.StandingTackle = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"StandingTackle", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.StandingTackle = null;

									}

								} else {

									row1.StandingTackle = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 81;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.SlidingTackle = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"SlidingTackle", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.SlidingTackle = null;

									}

								} else {

									row1.SlidingTackle = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 82;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.GKDiving = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"GKDiving", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.GKDiving = null;

									}

								} else {

									row1.GKDiving = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 83;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.GKHandling = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"GKHandling", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.GKHandling = null;

									}

								} else {

									row1.GKHandling = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 84;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.GKKicking = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"GKKicking", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.GKKicking = null;

									}

								} else {

									row1.GKKicking = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 85;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.GKPositioning = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"GKPositioning", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.GKPositioning = null;

									}

								} else {

									row1.GKPositioning = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 86;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.GKReflexes = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"GKReflexes", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.GKReflexes = null;

									}

								} else {

									row1.GKReflexes = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 87;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Release_Clause = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Release_Clause = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tReplicate_1 main ] start
							 */

							currentComponent = "tReplicate_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							row2 = new row2Struct();

							row2.ID = row1.ID;
							row2.Name = row1.Name;
							row2.Age = row1.Age;
							row2.Photo = row1.Photo;
							row2.Nationality = row1.Nationality;
							row2.Flag = row1.Flag;
							row2.Overall = row1.Overall;
							row2.Potential = row1.Potential;
							row2.Club = row1.Club;
							row2.Club_Logo = row1.Club_Logo;
							row2.Value = row1.Value;
							row2.Wage = row1.Wage;
							row2.Special = row1.Special;
							row2.Preferred_Foot = row1.Preferred_Foot;
							row2.International_Reputation = row1.International_Reputation;
							row2.Weak_Foot = row1.Weak_Foot;
							row2.Skill_Moves = row1.Skill_Moves;
							row2.Work_Rate = row1.Work_Rate;
							row2.Body_Type = row1.Body_Type;
							row2.Real_Face = row1.Real_Face;
							row2.Position = row1.Position;
							row2.Jersey_Number = row1.Jersey_Number;
							row2.Joined = row1.Joined;
							row2.Loaned_From = row1.Loaned_From;
							row2.Contract_Valid_Until = row1.Contract_Valid_Until;
							row2.Height = row1.Height;
							row2.Weight = row1.Weight;
							row2.LS = row1.LS;
							row2.ST = row1.ST;
							row2.RS = row1.RS;
							row2.LW = row1.LW;
							row2.LF = row1.LF;
							row2.CF = row1.CF;
							row2.RF = row1.RF;
							row2.RW = row1.RW;
							row2.LAM = row1.LAM;
							row2.CAM = row1.CAM;
							row2.RAM = row1.RAM;
							row2.LM = row1.LM;
							row2.LCM = row1.LCM;
							row2.CM = row1.CM;
							row2.RCM = row1.RCM;
							row2.RM = row1.RM;
							row2.LWB = row1.LWB;
							row2.LDM = row1.LDM;
							row2.CDM = row1.CDM;
							row2.RDM = row1.RDM;
							row2.RWB = row1.RWB;
							row2.LB = row1.LB;
							row2.LCB = row1.LCB;
							row2.CB = row1.CB;
							row2.RCB = row1.RCB;
							row2.RB = row1.RB;
							row2.Crossing = row1.Crossing;
							row2.Finishing = row1.Finishing;
							row2.HeadingAccuracy = row1.HeadingAccuracy;
							row2.ShortPassing = row1.ShortPassing;
							row2.Volleys = row1.Volleys;
							row2.Dribbling = row1.Dribbling;
							row2.Curve = row1.Curve;
							row2.FKAccuracy = row1.FKAccuracy;
							row2.LongPassing = row1.LongPassing;
							row2.BallControl = row1.BallControl;
							row2.Acceleration = row1.Acceleration;
							row2.SprintSpeed = row1.SprintSpeed;
							row2.Agility = row1.Agility;
							row2.Reactions = row1.Reactions;
							row2.Balance = row1.Balance;
							row2.ShotPower = row1.ShotPower;
							row2.Jumping = row1.Jumping;
							row2.Stamina = row1.Stamina;
							row2.Strength = row1.Strength;
							row2.LongShots = row1.LongShots;
							row2.Aggression = row1.Aggression;
							row2.Interceptions = row1.Interceptions;
							row2.Positioning = row1.Positioning;
							row2.Vision = row1.Vision;
							row2.Penalties = row1.Penalties;
							row2.Composure = row1.Composure;
							row2.Marking = row1.Marking;
							row2.StandingTackle = row1.StandingTackle;
							row2.SlidingTackle = row1.SlidingTackle;
							row2.GKDiving = row1.GKDiving;
							row2.GKHandling = row1.GKHandling;
							row2.GKKicking = row1.GKKicking;
							row2.GKPositioning = row1.GKPositioning;
							row2.GKReflexes = row1.GKReflexes;
							row2.Release_Clause = row1.Release_Clause;
							row5 = new row5Struct();

							row5.ID = row1.ID;
							row5.Name = row1.Name;
							row5.Age = row1.Age;
							row5.Photo = row1.Photo;
							row5.Nationality = row1.Nationality;
							row5.Flag = row1.Flag;
							row5.Overall = row1.Overall;
							row5.Potential = row1.Potential;
							row5.Club = row1.Club;
							row5.Club_Logo = row1.Club_Logo;
							row5.Value = row1.Value;
							row5.Wage = row1.Wage;
							row5.Special = row1.Special;
							row5.Preferred_Foot = row1.Preferred_Foot;
							row5.International_Reputation = row1.International_Reputation;
							row5.Weak_Foot = row1.Weak_Foot;
							row5.Skill_Moves = row1.Skill_Moves;
							row5.Work_Rate = row1.Work_Rate;
							row5.Body_Type = row1.Body_Type;
							row5.Real_Face = row1.Real_Face;
							row5.Position = row1.Position;
							row5.Jersey_Number = row1.Jersey_Number;
							row5.Joined = row1.Joined;
							row5.Loaned_From = row1.Loaned_From;
							row5.Contract_Valid_Until = row1.Contract_Valid_Until;
							row5.Height = row1.Height;
							row5.Weight = row1.Weight;
							row5.LS = row1.LS;
							row5.ST = row1.ST;
							row5.RS = row1.RS;
							row5.LW = row1.LW;
							row5.LF = row1.LF;
							row5.CF = row1.CF;
							row5.RF = row1.RF;
							row5.RW = row1.RW;
							row5.LAM = row1.LAM;
							row5.CAM = row1.CAM;
							row5.RAM = row1.RAM;
							row5.LM = row1.LM;
							row5.LCM = row1.LCM;
							row5.CM = row1.CM;
							row5.RCM = row1.RCM;
							row5.RM = row1.RM;
							row5.LWB = row1.LWB;
							row5.LDM = row1.LDM;
							row5.CDM = row1.CDM;
							row5.RDM = row1.RDM;
							row5.RWB = row1.RWB;
							row5.LB = row1.LB;
							row5.LCB = row1.LCB;
							row5.CB = row1.CB;
							row5.RCB = row1.RCB;
							row5.RB = row1.RB;
							row5.Crossing = row1.Crossing;
							row5.Finishing = row1.Finishing;
							row5.HeadingAccuracy = row1.HeadingAccuracy;
							row5.ShortPassing = row1.ShortPassing;
							row5.Volleys = row1.Volleys;
							row5.Dribbling = row1.Dribbling;
							row5.Curve = row1.Curve;
							row5.FKAccuracy = row1.FKAccuracy;
							row5.LongPassing = row1.LongPassing;
							row5.BallControl = row1.BallControl;
							row5.Acceleration = row1.Acceleration;
							row5.SprintSpeed = row1.SprintSpeed;
							row5.Agility = row1.Agility;
							row5.Reactions = row1.Reactions;
							row5.Balance = row1.Balance;
							row5.ShotPower = row1.ShotPower;
							row5.Jumping = row1.Jumping;
							row5.Stamina = row1.Stamina;
							row5.Strength = row1.Strength;
							row5.LongShots = row1.LongShots;
							row5.Aggression = row1.Aggression;
							row5.Interceptions = row1.Interceptions;
							row5.Positioning = row1.Positioning;
							row5.Vision = row1.Vision;
							row5.Penalties = row1.Penalties;
							row5.Composure = row1.Composure;
							row5.Marking = row1.Marking;
							row5.StandingTackle = row1.StandingTackle;
							row5.SlidingTackle = row1.SlidingTackle;
							row5.GKDiving = row1.GKDiving;
							row5.GKHandling = row1.GKHandling;
							row5.GKKicking = row1.GKKicking;
							row5.GKPositioning = row1.GKPositioning;
							row5.GKReflexes = row1.GKReflexes;
							row5.Release_Clause = row1.Release_Clause;
							row7 = new row7Struct();

							row7.ID = row1.ID;
							row7.Name = row1.Name;
							row7.Age = row1.Age;
							row7.Photo = row1.Photo;
							row7.Nationality = row1.Nationality;
							row7.Flag = row1.Flag;
							row7.Overall = row1.Overall;
							row7.Potential = row1.Potential;
							row7.Club = row1.Club;
							row7.Club_Logo = row1.Club_Logo;
							row7.Value = row1.Value;
							row7.Wage = row1.Wage;
							row7.Special = row1.Special;
							row7.Preferred_Foot = row1.Preferred_Foot;
							row7.International_Reputation = row1.International_Reputation;
							row7.Weak_Foot = row1.Weak_Foot;
							row7.Skill_Moves = row1.Skill_Moves;
							row7.Work_Rate = row1.Work_Rate;
							row7.Body_Type = row1.Body_Type;
							row7.Real_Face = row1.Real_Face;
							row7.Position = row1.Position;
							row7.Jersey_Number = row1.Jersey_Number;
							row7.Joined = row1.Joined;
							row7.Loaned_From = row1.Loaned_From;
							row7.Contract_Valid_Until = row1.Contract_Valid_Until;
							row7.Height = row1.Height;
							row7.Weight = row1.Weight;
							row7.LS = row1.LS;
							row7.ST = row1.ST;
							row7.RS = row1.RS;
							row7.LW = row1.LW;
							row7.LF = row1.LF;
							row7.CF = row1.CF;
							row7.RF = row1.RF;
							row7.RW = row1.RW;
							row7.LAM = row1.LAM;
							row7.CAM = row1.CAM;
							row7.RAM = row1.RAM;
							row7.LM = row1.LM;
							row7.LCM = row1.LCM;
							row7.CM = row1.CM;
							row7.RCM = row1.RCM;
							row7.RM = row1.RM;
							row7.LWB = row1.LWB;
							row7.LDM = row1.LDM;
							row7.CDM = row1.CDM;
							row7.RDM = row1.RDM;
							row7.RWB = row1.RWB;
							row7.LB = row1.LB;
							row7.LCB = row1.LCB;
							row7.CB = row1.CB;
							row7.RCB = row1.RCB;
							row7.RB = row1.RB;
							row7.Crossing = row1.Crossing;
							row7.Finishing = row1.Finishing;
							row7.HeadingAccuracy = row1.HeadingAccuracy;
							row7.ShortPassing = row1.ShortPassing;
							row7.Volleys = row1.Volleys;
							row7.Dribbling = row1.Dribbling;
							row7.Curve = row1.Curve;
							row7.FKAccuracy = row1.FKAccuracy;
							row7.LongPassing = row1.LongPassing;
							row7.BallControl = row1.BallControl;
							row7.Acceleration = row1.Acceleration;
							row7.SprintSpeed = row1.SprintSpeed;
							row7.Agility = row1.Agility;
							row7.Reactions = row1.Reactions;
							row7.Balance = row1.Balance;
							row7.ShotPower = row1.ShotPower;
							row7.Jumping = row1.Jumping;
							row7.Stamina = row1.Stamina;
							row7.Strength = row1.Strength;
							row7.LongShots = row1.LongShots;
							row7.Aggression = row1.Aggression;
							row7.Interceptions = row1.Interceptions;
							row7.Positioning = row1.Positioning;
							row7.Vision = row1.Vision;
							row7.Penalties = row1.Penalties;
							row7.Composure = row1.Composure;
							row7.Marking = row1.Marking;
							row7.StandingTackle = row1.StandingTackle;
							row7.SlidingTackle = row1.SlidingTackle;
							row7.GKDiving = row1.GKDiving;
							row7.GKHandling = row1.GKHandling;
							row7.GKKicking = row1.GKKicking;
							row7.GKPositioning = row1.GKPositioning;
							row7.GKReflexes = row1.GKReflexes;
							row7.Release_Clause = row1.Release_Clause;

							tos_count_tReplicate_1++;

							/**
							 * [tReplicate_1 main ] stop
							 */

							/**
							 * [tReplicate_1 process_data_begin ] start
							 */

							currentComponent = "tReplicate_1";

							/**
							 * [tReplicate_1 process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT main ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
							}

							operation_finder_tAggregateRow_1.Club = row2.Club;

							operation_finder_tAggregateRow_1.hashCodeDirty = true;

							operation_result_tAggregateRow_1 = hash_tAggregateRow_1
									.get(operation_finder_tAggregateRow_1);

							if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

								operation_result_tAggregateRow_1.Club = operation_finder_tAggregateRow_1.Club;

								hash_tAggregateRow_1.put(operation_result_tAggregateRow_1,
										operation_result_tAggregateRow_1);

							} // G_OutMain_AggR_001

							operation_result_tAggregateRow_1.Number_of_players_clmCount++;
							operation_result_tAggregateRow_1.count++;

							tos_count_tAggregateRow_1_AGGOUT++;

							/**
							 * [tAggregateRow_1_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] stop
							 */

							/**
							 * [tFilterRow_1 main ] start
							 */

							currentComponent = "tFilterRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
							}

							row6 = null;
							Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
							ope_tFilterRow_1.matches(
									(row5.Club == null ? false : row5.Club.compareTo("Real Madrid") == 0),
									"Club.compareTo(\"Real Madrid\") == 0 failed");

							if (ope_tFilterRow_1.getMatchFlag()) {
								if (row6 == null) {
									row6 = new row6Struct();
								}
								row6.ID = row5.ID;
								row6.Name = row5.Name;
								row6.Age = row5.Age;
								row6.Photo = row5.Photo;
								row6.Nationality = row5.Nationality;
								row6.Flag = row5.Flag;
								row6.Overall = row5.Overall;
								row6.Potential = row5.Potential;
								row6.Club = row5.Club;
								row6.Club_Logo = row5.Club_Logo;
								row6.Value = row5.Value;
								row6.Wage = row5.Wage;
								row6.Special = row5.Special;
								row6.Preferred_Foot = row5.Preferred_Foot;
								row6.International_Reputation = row5.International_Reputation;
								row6.Weak_Foot = row5.Weak_Foot;
								row6.Skill_Moves = row5.Skill_Moves;
								row6.Work_Rate = row5.Work_Rate;
								row6.Body_Type = row5.Body_Type;
								row6.Real_Face = row5.Real_Face;
								row6.Position = row5.Position;
								row6.Jersey_Number = row5.Jersey_Number;
								row6.Joined = row5.Joined;
								row6.Loaned_From = row5.Loaned_From;
								row6.Contract_Valid_Until = row5.Contract_Valid_Until;
								row6.Height = row5.Height;
								row6.Weight = row5.Weight;
								row6.LS = row5.LS;
								row6.ST = row5.ST;
								row6.RS = row5.RS;
								row6.LW = row5.LW;
								row6.LF = row5.LF;
								row6.CF = row5.CF;
								row6.RF = row5.RF;
								row6.RW = row5.RW;
								row6.LAM = row5.LAM;
								row6.CAM = row5.CAM;
								row6.RAM = row5.RAM;
								row6.LM = row5.LM;
								row6.LCM = row5.LCM;
								row6.CM = row5.CM;
								row6.RCM = row5.RCM;
								row6.RM = row5.RM;
								row6.LWB = row5.LWB;
								row6.LDM = row5.LDM;
								row6.CDM = row5.CDM;
								row6.RDM = row5.RDM;
								row6.RWB = row5.RWB;
								row6.LB = row5.LB;
								row6.LCB = row5.LCB;
								row6.CB = row5.CB;
								row6.RCB = row5.RCB;
								row6.RB = row5.RB;
								row6.Crossing = row5.Crossing;
								row6.Finishing = row5.Finishing;
								row6.HeadingAccuracy = row5.HeadingAccuracy;
								row6.ShortPassing = row5.ShortPassing;
								row6.Volleys = row5.Volleys;
								row6.Dribbling = row5.Dribbling;
								row6.Curve = row5.Curve;
								row6.FKAccuracy = row5.FKAccuracy;
								row6.LongPassing = row5.LongPassing;
								row6.BallControl = row5.BallControl;
								row6.Acceleration = row5.Acceleration;
								row6.SprintSpeed = row5.SprintSpeed;
								row6.Agility = row5.Agility;
								row6.Reactions = row5.Reactions;
								row6.Balance = row5.Balance;
								row6.ShotPower = row5.ShotPower;
								row6.Jumping = row5.Jumping;
								row6.Stamina = row5.Stamina;
								row6.Strength = row5.Strength;
								row6.LongShots = row5.LongShots;
								row6.Aggression = row5.Aggression;
								row6.Interceptions = row5.Interceptions;
								row6.Positioning = row5.Positioning;
								row6.Vision = row5.Vision;
								row6.Penalties = row5.Penalties;
								row6.Composure = row5.Composure;
								row6.Marking = row5.Marking;
								row6.StandingTackle = row5.StandingTackle;
								row6.SlidingTackle = row5.SlidingTackle;
								row6.GKDiving = row5.GKDiving;
								row6.GKHandling = row5.GKHandling;
								row6.GKKicking = row5.GKKicking;
								row6.GKPositioning = row5.GKPositioning;
								row6.GKReflexes = row5.GKReflexes;
								row6.Release_Clause = row5.Release_Clause;
								nb_line_ok_tFilterRow_1++;
							} else {
								nb_line_reject_tFilterRow_1++;
							}

							nb_line_tFilterRow_1++;

							tos_count_tFilterRow_1++;

							/**
							 * [tFilterRow_1 main ] stop
							 */

							/**
							 * [tFilterRow_1 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_begin ] stop
							 */
// Start of branch "row6"
							if (row6 != null) {

								/**
								 * [tFileOutputDelimited_2 main ] start
								 */

								currentComponent = "tFileOutputDelimited_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
								}

								String[] rowtFileOutputDelimited_2 = new String[88];
								rowtFileOutputDelimited_2[0] = row6.ID == null ? null : String.valueOf(row6.ID);
								rowtFileOutputDelimited_2[1] = row6.Name == null ? null : row6.Name;
								rowtFileOutputDelimited_2[2] = row6.Age == null ? null : String.valueOf(row6.Age);
								rowtFileOutputDelimited_2[3] = row6.Photo == null ? null : row6.Photo;
								rowtFileOutputDelimited_2[4] = row6.Nationality == null ? null : row6.Nationality;
								rowtFileOutputDelimited_2[5] = row6.Flag == null ? null : row6.Flag;
								rowtFileOutputDelimited_2[6] = row6.Overall == null ? null
										: String.valueOf(row6.Overall);
								rowtFileOutputDelimited_2[7] = row6.Potential == null ? null
										: String.valueOf(row6.Potential);
								rowtFileOutputDelimited_2[8] = row6.Club == null ? null : row6.Club;
								rowtFileOutputDelimited_2[9] = row6.Club_Logo == null ? null : row6.Club_Logo;
								rowtFileOutputDelimited_2[10] = row6.Value == null ? null : row6.Value;
								rowtFileOutputDelimited_2[11] = row6.Wage == null ? null : row6.Wage;
								rowtFileOutputDelimited_2[12] = row6.Special == null ? null
										: String.valueOf(row6.Special);
								rowtFileOutputDelimited_2[13] = row6.Preferred_Foot == null ? null
										: row6.Preferred_Foot;
								rowtFileOutputDelimited_2[14] = row6.International_Reputation == null ? null
										: String.valueOf(row6.International_Reputation);
								rowtFileOutputDelimited_2[15] = row6.Weak_Foot == null ? null
										: String.valueOf(row6.Weak_Foot);
								rowtFileOutputDelimited_2[16] = row6.Skill_Moves == null ? null
										: String.valueOf(row6.Skill_Moves);
								rowtFileOutputDelimited_2[17] = row6.Work_Rate == null ? null : row6.Work_Rate;
								rowtFileOutputDelimited_2[18] = row6.Body_Type == null ? null : row6.Body_Type;
								rowtFileOutputDelimited_2[19] = row6.Real_Face == null ? null : row6.Real_Face;
								rowtFileOutputDelimited_2[20] = row6.Position == null ? null : row6.Position;
								rowtFileOutputDelimited_2[21] = row6.Jersey_Number == null ? null
										: String.valueOf(row6.Jersey_Number);
								rowtFileOutputDelimited_2[22] = row6.Joined == null ? null : row6.Joined;
								rowtFileOutputDelimited_2[23] = row6.Loaned_From == null ? null : row6.Loaned_From;
								rowtFileOutputDelimited_2[24] = row6.Contract_Valid_Until == null ? null
										: row6.Contract_Valid_Until;
								rowtFileOutputDelimited_2[25] = row6.Height == null ? null : row6.Height;
								rowtFileOutputDelimited_2[26] = row6.Weight == null ? null : row6.Weight;
								rowtFileOutputDelimited_2[27] = row6.LS == null ? null : row6.LS;
								rowtFileOutputDelimited_2[28] = row6.ST == null ? null : row6.ST;
								rowtFileOutputDelimited_2[29] = row6.RS == null ? null : row6.RS;
								rowtFileOutputDelimited_2[30] = row6.LW == null ? null : row6.LW;
								rowtFileOutputDelimited_2[31] = row6.LF == null ? null : row6.LF;
								rowtFileOutputDelimited_2[32] = row6.CF == null ? null : row6.CF;
								rowtFileOutputDelimited_2[33] = row6.RF == null ? null : row6.RF;
								rowtFileOutputDelimited_2[34] = row6.RW == null ? null : row6.RW;
								rowtFileOutputDelimited_2[35] = row6.LAM == null ? null : row6.LAM;
								rowtFileOutputDelimited_2[36] = row6.CAM == null ? null : row6.CAM;
								rowtFileOutputDelimited_2[37] = row6.RAM == null ? null : row6.RAM;
								rowtFileOutputDelimited_2[38] = row6.LM == null ? null : row6.LM;
								rowtFileOutputDelimited_2[39] = row6.LCM == null ? null : row6.LCM;
								rowtFileOutputDelimited_2[40] = row6.CM == null ? null : row6.CM;
								rowtFileOutputDelimited_2[41] = row6.RCM == null ? null : row6.RCM;
								rowtFileOutputDelimited_2[42] = row6.RM == null ? null : row6.RM;
								rowtFileOutputDelimited_2[43] = row6.LWB == null ? null : row6.LWB;
								rowtFileOutputDelimited_2[44] = row6.LDM == null ? null : row6.LDM;
								rowtFileOutputDelimited_2[45] = row6.CDM == null ? null : row6.CDM;
								rowtFileOutputDelimited_2[46] = row6.RDM == null ? null : row6.RDM;
								rowtFileOutputDelimited_2[47] = row6.RWB == null ? null : row6.RWB;
								rowtFileOutputDelimited_2[48] = row6.LB == null ? null : row6.LB;
								rowtFileOutputDelimited_2[49] = row6.LCB == null ? null : row6.LCB;
								rowtFileOutputDelimited_2[50] = row6.CB == null ? null : row6.CB;
								rowtFileOutputDelimited_2[51] = row6.RCB == null ? null : row6.RCB;
								rowtFileOutputDelimited_2[52] = row6.RB == null ? null : row6.RB;
								rowtFileOutputDelimited_2[53] = row6.Crossing == null ? null
										: String.valueOf(row6.Crossing);
								rowtFileOutputDelimited_2[54] = row6.Finishing == null ? null
										: String.valueOf(row6.Finishing);
								rowtFileOutputDelimited_2[55] = row6.HeadingAccuracy == null ? null
										: String.valueOf(row6.HeadingAccuracy);
								rowtFileOutputDelimited_2[56] = row6.ShortPassing == null ? null
										: String.valueOf(row6.ShortPassing);
								rowtFileOutputDelimited_2[57] = row6.Volleys == null ? null
										: String.valueOf(row6.Volleys);
								rowtFileOutputDelimited_2[58] = row6.Dribbling == null ? null
										: String.valueOf(row6.Dribbling);
								rowtFileOutputDelimited_2[59] = row6.Curve == null ? null : String.valueOf(row6.Curve);
								rowtFileOutputDelimited_2[60] = row6.FKAccuracy == null ? null
										: String.valueOf(row6.FKAccuracy);
								rowtFileOutputDelimited_2[61] = row6.LongPassing == null ? null
										: String.valueOf(row6.LongPassing);
								rowtFileOutputDelimited_2[62] = row6.BallControl == null ? null
										: String.valueOf(row6.BallControl);
								rowtFileOutputDelimited_2[63] = row6.Acceleration == null ? null
										: String.valueOf(row6.Acceleration);
								rowtFileOutputDelimited_2[64] = row6.SprintSpeed == null ? null
										: String.valueOf(row6.SprintSpeed);
								rowtFileOutputDelimited_2[65] = row6.Agility == null ? null
										: String.valueOf(row6.Agility);
								rowtFileOutputDelimited_2[66] = row6.Reactions == null ? null
										: String.valueOf(row6.Reactions);
								rowtFileOutputDelimited_2[67] = row6.Balance == null ? null
										: String.valueOf(row6.Balance);
								rowtFileOutputDelimited_2[68] = row6.ShotPower == null ? null
										: String.valueOf(row6.ShotPower);
								rowtFileOutputDelimited_2[69] = row6.Jumping == null ? null
										: String.valueOf(row6.Jumping);
								rowtFileOutputDelimited_2[70] = row6.Stamina == null ? null
										: String.valueOf(row6.Stamina);
								rowtFileOutputDelimited_2[71] = row6.Strength == null ? null
										: String.valueOf(row6.Strength);
								rowtFileOutputDelimited_2[72] = row6.LongShots == null ? null
										: String.valueOf(row6.LongShots);
								rowtFileOutputDelimited_2[73] = row6.Aggression == null ? null
										: String.valueOf(row6.Aggression);
								rowtFileOutputDelimited_2[74] = row6.Interceptions == null ? null
										: String.valueOf(row6.Interceptions);
								rowtFileOutputDelimited_2[75] = row6.Positioning == null ? null
										: String.valueOf(row6.Positioning);
								rowtFileOutputDelimited_2[76] = row6.Vision == null ? null
										: String.valueOf(row6.Vision);
								rowtFileOutputDelimited_2[77] = row6.Penalties == null ? null
										: String.valueOf(row6.Penalties);
								rowtFileOutputDelimited_2[78] = row6.Composure == null ? null
										: String.valueOf(row6.Composure);
								rowtFileOutputDelimited_2[79] = row6.Marking == null ? null
										: String.valueOf(row6.Marking);
								rowtFileOutputDelimited_2[80] = row6.StandingTackle == null ? null
										: String.valueOf(row6.StandingTackle);
								rowtFileOutputDelimited_2[81] = row6.SlidingTackle == null ? null
										: String.valueOf(row6.SlidingTackle);
								rowtFileOutputDelimited_2[82] = row6.GKDiving == null ? null
										: String.valueOf(row6.GKDiving);
								rowtFileOutputDelimited_2[83] = row6.GKHandling == null ? null
										: String.valueOf(row6.GKHandling);
								rowtFileOutputDelimited_2[84] = row6.GKKicking == null ? null
										: String.valueOf(row6.GKKicking);
								rowtFileOutputDelimited_2[85] = row6.GKPositioning == null ? null
										: String.valueOf(row6.GKPositioning);
								rowtFileOutputDelimited_2[86] = row6.GKReflexes == null ? null
										: String.valueOf(row6.GKReflexes);
								rowtFileOutputDelimited_2[87] = row6.Release_Clause == null ? null
										: row6.Release_Clause;
								nb_line_tFileOutputDelimited_2++;
								resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);
								CsvWritertFileOutputDelimited_2.writeNext(rowtFileOutputDelimited_2);

								tos_count_tFileOutputDelimited_2++;

								/**
								 * [tFileOutputDelimited_2 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_2 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_2";

								/**
								 * [tFileOutputDelimited_2 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_2 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_2";

								/**
								 * [tFileOutputDelimited_2 process_data_end ] stop
								 */

							} // End of branch "row6"

							/**
							 * [tFilterRow_1 process_data_end ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_end ] stop
							 */

							/**
							 * [tFilterRow_2 main ] start
							 */

							currentComponent = "tFilterRow_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
							}

							row8 = null;
							Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
							ope_tFilterRow_2.matches(
									(row7.Club == null ? false : row7.Club.compareTo("FC Barcelona") == 0),
									"Club.compareTo(\"FC Barcelona\") == 0 failed");

							if (ope_tFilterRow_2.getMatchFlag()) {
								if (row8 == null) {
									row8 = new row8Struct();
								}
								row8.ID = row7.ID;
								row8.Name = row7.Name;
								row8.Age = row7.Age;
								row8.Photo = row7.Photo;
								row8.Nationality = row7.Nationality;
								row8.Flag = row7.Flag;
								row8.Overall = row7.Overall;
								row8.Potential = row7.Potential;
								row8.Club = row7.Club;
								row8.Club_Logo = row7.Club_Logo;
								row8.Value = row7.Value;
								row8.Wage = row7.Wage;
								row8.Special = row7.Special;
								row8.Preferred_Foot = row7.Preferred_Foot;
								row8.International_Reputation = row7.International_Reputation;
								row8.Weak_Foot = row7.Weak_Foot;
								row8.Skill_Moves = row7.Skill_Moves;
								row8.Work_Rate = row7.Work_Rate;
								row8.Body_Type = row7.Body_Type;
								row8.Real_Face = row7.Real_Face;
								row8.Position = row7.Position;
								row8.Jersey_Number = row7.Jersey_Number;
								row8.Joined = row7.Joined;
								row8.Loaned_From = row7.Loaned_From;
								row8.Contract_Valid_Until = row7.Contract_Valid_Until;
								row8.Height = row7.Height;
								row8.Weight = row7.Weight;
								row8.LS = row7.LS;
								row8.ST = row7.ST;
								row8.RS = row7.RS;
								row8.LW = row7.LW;
								row8.LF = row7.LF;
								row8.CF = row7.CF;
								row8.RF = row7.RF;
								row8.RW = row7.RW;
								row8.LAM = row7.LAM;
								row8.CAM = row7.CAM;
								row8.RAM = row7.RAM;
								row8.LM = row7.LM;
								row8.LCM = row7.LCM;
								row8.CM = row7.CM;
								row8.RCM = row7.RCM;
								row8.RM = row7.RM;
								row8.LWB = row7.LWB;
								row8.LDM = row7.LDM;
								row8.CDM = row7.CDM;
								row8.RDM = row7.RDM;
								row8.RWB = row7.RWB;
								row8.LB = row7.LB;
								row8.LCB = row7.LCB;
								row8.CB = row7.CB;
								row8.RCB = row7.RCB;
								row8.RB = row7.RB;
								row8.Crossing = row7.Crossing;
								row8.Finishing = row7.Finishing;
								row8.HeadingAccuracy = row7.HeadingAccuracy;
								row8.ShortPassing = row7.ShortPassing;
								row8.Volleys = row7.Volleys;
								row8.Dribbling = row7.Dribbling;
								row8.Curve = row7.Curve;
								row8.FKAccuracy = row7.FKAccuracy;
								row8.LongPassing = row7.LongPassing;
								row8.BallControl = row7.BallControl;
								row8.Acceleration = row7.Acceleration;
								row8.SprintSpeed = row7.SprintSpeed;
								row8.Agility = row7.Agility;
								row8.Reactions = row7.Reactions;
								row8.Balance = row7.Balance;
								row8.ShotPower = row7.ShotPower;
								row8.Jumping = row7.Jumping;
								row8.Stamina = row7.Stamina;
								row8.Strength = row7.Strength;
								row8.LongShots = row7.LongShots;
								row8.Aggression = row7.Aggression;
								row8.Interceptions = row7.Interceptions;
								row8.Positioning = row7.Positioning;
								row8.Vision = row7.Vision;
								row8.Penalties = row7.Penalties;
								row8.Composure = row7.Composure;
								row8.Marking = row7.Marking;
								row8.StandingTackle = row7.StandingTackle;
								row8.SlidingTackle = row7.SlidingTackle;
								row8.GKDiving = row7.GKDiving;
								row8.GKHandling = row7.GKHandling;
								row8.GKKicking = row7.GKKicking;
								row8.GKPositioning = row7.GKPositioning;
								row8.GKReflexes = row7.GKReflexes;
								row8.Release_Clause = row7.Release_Clause;
								nb_line_ok_tFilterRow_2++;
							} else {
								nb_line_reject_tFilterRow_2++;
							}

							nb_line_tFilterRow_2++;

							tos_count_tFilterRow_2++;

							/**
							 * [tFilterRow_2 main ] stop
							 */

							/**
							 * [tFilterRow_2 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_begin ] stop
							 */
// Start of branch "row8"
							if (row8 != null) {

								/**
								 * [tFileOutputDelimited_3 main ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
								}

								StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
								if (row8.ID != null) {
									sb_tFileOutputDelimited_3.append(row8.ID);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Name != null) {
									sb_tFileOutputDelimited_3.append(row8.Name);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Age != null) {
									sb_tFileOutputDelimited_3.append(row8.Age);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Photo != null) {
									sb_tFileOutputDelimited_3.append(row8.Photo);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Nationality != null) {
									sb_tFileOutputDelimited_3.append(row8.Nationality);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Flag != null) {
									sb_tFileOutputDelimited_3.append(row8.Flag);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Overall != null) {
									sb_tFileOutputDelimited_3.append(row8.Overall);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Potential != null) {
									sb_tFileOutputDelimited_3.append(row8.Potential);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Club != null) {
									sb_tFileOutputDelimited_3.append(row8.Club);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Club_Logo != null) {
									sb_tFileOutputDelimited_3.append(row8.Club_Logo);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Value != null) {
									sb_tFileOutputDelimited_3.append(row8.Value);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Wage != null) {
									sb_tFileOutputDelimited_3.append(row8.Wage);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Special != null) {
									sb_tFileOutputDelimited_3.append(row8.Special);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Preferred_Foot != null) {
									sb_tFileOutputDelimited_3.append(row8.Preferred_Foot);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.International_Reputation != null) {
									sb_tFileOutputDelimited_3.append(row8.International_Reputation);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Weak_Foot != null) {
									sb_tFileOutputDelimited_3.append(row8.Weak_Foot);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Skill_Moves != null) {
									sb_tFileOutputDelimited_3.append(row8.Skill_Moves);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Work_Rate != null) {
									sb_tFileOutputDelimited_3.append(row8.Work_Rate);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Body_Type != null) {
									sb_tFileOutputDelimited_3.append(row8.Body_Type);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Real_Face != null) {
									sb_tFileOutputDelimited_3.append(row8.Real_Face);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Position != null) {
									sb_tFileOutputDelimited_3.append(row8.Position);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Jersey_Number != null) {
									sb_tFileOutputDelimited_3.append(row8.Jersey_Number);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Joined != null) {
									sb_tFileOutputDelimited_3.append(row8.Joined);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Loaned_From != null) {
									sb_tFileOutputDelimited_3.append(row8.Loaned_From);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Contract_Valid_Until != null) {
									sb_tFileOutputDelimited_3.append(row8.Contract_Valid_Until);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Height != null) {
									sb_tFileOutputDelimited_3.append(row8.Height);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Weight != null) {
									sb_tFileOutputDelimited_3.append(row8.Weight);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.LS != null) {
									sb_tFileOutputDelimited_3.append(row8.LS);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.ST != null) {
									sb_tFileOutputDelimited_3.append(row8.ST);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.RS != null) {
									sb_tFileOutputDelimited_3.append(row8.RS);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.LW != null) {
									sb_tFileOutputDelimited_3.append(row8.LW);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.LF != null) {
									sb_tFileOutputDelimited_3.append(row8.LF);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.CF != null) {
									sb_tFileOutputDelimited_3.append(row8.CF);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.RF != null) {
									sb_tFileOutputDelimited_3.append(row8.RF);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.RW != null) {
									sb_tFileOutputDelimited_3.append(row8.RW);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.LAM != null) {
									sb_tFileOutputDelimited_3.append(row8.LAM);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.CAM != null) {
									sb_tFileOutputDelimited_3.append(row8.CAM);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.RAM != null) {
									sb_tFileOutputDelimited_3.append(row8.RAM);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.LM != null) {
									sb_tFileOutputDelimited_3.append(row8.LM);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.LCM != null) {
									sb_tFileOutputDelimited_3.append(row8.LCM);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.CM != null) {
									sb_tFileOutputDelimited_3.append(row8.CM);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.RCM != null) {
									sb_tFileOutputDelimited_3.append(row8.RCM);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.RM != null) {
									sb_tFileOutputDelimited_3.append(row8.RM);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.LWB != null) {
									sb_tFileOutputDelimited_3.append(row8.LWB);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.LDM != null) {
									sb_tFileOutputDelimited_3.append(row8.LDM);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.CDM != null) {
									sb_tFileOutputDelimited_3.append(row8.CDM);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.RDM != null) {
									sb_tFileOutputDelimited_3.append(row8.RDM);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.RWB != null) {
									sb_tFileOutputDelimited_3.append(row8.RWB);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.LB != null) {
									sb_tFileOutputDelimited_3.append(row8.LB);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.LCB != null) {
									sb_tFileOutputDelimited_3.append(row8.LCB);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.CB != null) {
									sb_tFileOutputDelimited_3.append(row8.CB);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.RCB != null) {
									sb_tFileOutputDelimited_3.append(row8.RCB);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.RB != null) {
									sb_tFileOutputDelimited_3.append(row8.RB);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Crossing != null) {
									sb_tFileOutputDelimited_3.append(row8.Crossing);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Finishing != null) {
									sb_tFileOutputDelimited_3.append(row8.Finishing);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.HeadingAccuracy != null) {
									sb_tFileOutputDelimited_3.append(row8.HeadingAccuracy);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.ShortPassing != null) {
									sb_tFileOutputDelimited_3.append(row8.ShortPassing);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Volleys != null) {
									sb_tFileOutputDelimited_3.append(row8.Volleys);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Dribbling != null) {
									sb_tFileOutputDelimited_3.append(row8.Dribbling);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Curve != null) {
									sb_tFileOutputDelimited_3.append(row8.Curve);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.FKAccuracy != null) {
									sb_tFileOutputDelimited_3.append(row8.FKAccuracy);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.LongPassing != null) {
									sb_tFileOutputDelimited_3.append(row8.LongPassing);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.BallControl != null) {
									sb_tFileOutputDelimited_3.append(row8.BallControl);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Acceleration != null) {
									sb_tFileOutputDelimited_3.append(row8.Acceleration);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.SprintSpeed != null) {
									sb_tFileOutputDelimited_3.append(row8.SprintSpeed);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Agility != null) {
									sb_tFileOutputDelimited_3.append(row8.Agility);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Reactions != null) {
									sb_tFileOutputDelimited_3.append(row8.Reactions);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Balance != null) {
									sb_tFileOutputDelimited_3.append(row8.Balance);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.ShotPower != null) {
									sb_tFileOutputDelimited_3.append(row8.ShotPower);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Jumping != null) {
									sb_tFileOutputDelimited_3.append(row8.Jumping);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Stamina != null) {
									sb_tFileOutputDelimited_3.append(row8.Stamina);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Strength != null) {
									sb_tFileOutputDelimited_3.append(row8.Strength);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.LongShots != null) {
									sb_tFileOutputDelimited_3.append(row8.LongShots);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Aggression != null) {
									sb_tFileOutputDelimited_3.append(row8.Aggression);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Interceptions != null) {
									sb_tFileOutputDelimited_3.append(row8.Interceptions);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Positioning != null) {
									sb_tFileOutputDelimited_3.append(row8.Positioning);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Vision != null) {
									sb_tFileOutputDelimited_3.append(row8.Vision);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Penalties != null) {
									sb_tFileOutputDelimited_3.append(row8.Penalties);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Composure != null) {
									sb_tFileOutputDelimited_3.append(row8.Composure);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Marking != null) {
									sb_tFileOutputDelimited_3.append(row8.Marking);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.StandingTackle != null) {
									sb_tFileOutputDelimited_3.append(row8.StandingTackle);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.SlidingTackle != null) {
									sb_tFileOutputDelimited_3.append(row8.SlidingTackle);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.GKDiving != null) {
									sb_tFileOutputDelimited_3.append(row8.GKDiving);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.GKHandling != null) {
									sb_tFileOutputDelimited_3.append(row8.GKHandling);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.GKKicking != null) {
									sb_tFileOutputDelimited_3.append(row8.GKKicking);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.GKPositioning != null) {
									sb_tFileOutputDelimited_3.append(row8.GKPositioning);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.GKReflexes != null) {
									sb_tFileOutputDelimited_3.append(row8.GKReflexes);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row8.Release_Clause != null) {
									sb_tFileOutputDelimited_3.append(row8.Release_Clause);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

								nb_line_tFileOutputDelimited_3++;
								resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

								outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

								tos_count_tFileOutputDelimited_3++;

								/**
								 * [tFileOutputDelimited_3 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_3 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								/**
								 * [tFileOutputDelimited_3 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_3 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								/**
								 * [tFileOutputDelimited_3 process_data_end ] stop
								 */

							} // End of branch "row8"

							/**
							 * [tFilterRow_2 process_data_end ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_end ] stop
							 */

							/**
							 * [tReplicate_1 process_data_end ] start
							 */

							currentComponent = "tReplicate_1";

							/**
							 * [tReplicate_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tSortRow_1_SortOut = 0;

				class Comparablerow3Struct extends row3Struct implements Comparable<Comparablerow3Struct> {

					public int compareTo(Comparablerow3Struct other) {

						if (this.Number_of_players == null && other.Number_of_players != null) {
							return -1;

						} else if (this.Number_of_players != null && other.Number_of_players == null) {
							return 1;

						} else if (this.Number_of_players != null && other.Number_of_players != null) {
							if (!this.Number_of_players.equals(other.Number_of_players)) {
								return this.Number_of_players.compareTo(other.Number_of_players);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow3Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow3Struct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row3.Club = aggregated_row_tAggregateRow_1.Club;
					row3.Number_of_players = (int) aggregated_row_tAggregateRow_1.count;
					row3.Number_of_players = (int) aggregated_row_tAggregateRow_1.Number_of_players_clmCount;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tSortRow_1_SortOut main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortOut";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
					}

					Comparablerow3Struct arrayRowtSortRow_1_SortOut = new Comparablerow3Struct();

					arrayRowtSortRow_1_SortOut.Club = row3.Club;
					arrayRowtSortRow_1_SortOut.Number_of_players = row3.Number_of_players;
					list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

					tos_count_tSortRow_1_SortOut++;

					/**
					 * [tSortRow_1_SortOut main ] stop
					 */

					/**
					 * [tSortRow_1_SortOut process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortOut";

					/**
					 * [tSortRow_1_SortOut process_data_begin ] stop
					 */

					/**
					 * [tSortRow_1_SortOut process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortOut";

					/**
					 * [tSortRow_1_SortOut process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				row3Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow3Struct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/data_file/output/aggregate_club_data.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				String[] headColutFileOutputDelimited_1 = new String[2];
				class CSVBasicSet_tFileOutputDelimited_1 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep) throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_1[] = null;

						// support passing value (property: Field Separator) by 'context.fs' or
						// 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
						} else {
							throw new IllegalArgumentException("Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(",");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_1[] = null;

						// support passing value (property: Row Separator) by 'context.rs' or
						// 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
						} else {
							throw new IllegalArgumentException("Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_1[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException("Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_1[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
						} else {
							throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
				csvSettings_tFileOutputDelimited_1.setFieldSeparator(",");
				csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "UTF-8")));
				CsvWritertFileOutputDelimited_1.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
				if (!csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_1.setLineEnd("" + csvSettings_tFileOutputDelimited_1.getRowDelim());
				}
				CsvWritertFileOutputDelimited_1.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
				CsvWritertFileOutputDelimited_1.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
				CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tSortRow_1_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortIn", false);
				start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				int tos_count_tSortRow_1_SortIn = 0;

				row3Struct[] array_tSortRow_1_SortIn = (row3Struct[]) globalMap.remove("tSortRow_1");

				int nb_line_tSortRow_1_SortIn = 0;

				row3Struct current_tSortRow_1_SortIn = null;

				for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
					current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
					row4.Club = current_tSortRow_1_SortIn.Club;
					row4.Number_of_players = current_tSortRow_1_SortIn.Number_of_players;
					// increase number of line sorted
					nb_line_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_1_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					tos_count_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn main ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 main ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
					}

					String[] rowtFileOutputDelimited_1 = new String[2];
					rowtFileOutputDelimited_1[0] = row4.Club == null ? null : row4.Club;
					rowtFileOutputDelimited_1[1] = row4.Number_of_players == null ? null
							: String.valueOf(row4.Number_of_players);
					nb_line_tFileOutputDelimited_1++;
					resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
					CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);

					tos_count_tFileOutputDelimited_1++;

					/**
					 * [tFileOutputDelimited_1 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					/**
					 * [tFileOutputDelimited_1 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					/**
					 * [tFileOutputDelimited_1 process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

				}

				globalMap.put("tSortRow_1_SortIn_NB_LINE", nb_line_tSortRow_1_SortIn);

				ok_Hash.put("tSortRow_1_SortIn", true);
				end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortIn end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (CsvWritertFileOutputDelimited_1 != null) {
					CsvWritertFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (CsvWritertFileOutputDelimited_2 != null) {
					CsvWritertFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tSortRow_1_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				/**
				 * [tSortRow_1_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_1_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				/**
				 * [tSortRow_1_SortIn finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_1");

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_2");

					if (CsvWritertFileOutputDelimited_2 != null) {
						CsvWritertFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final File_Input File_InputClass = new File_Input();

		int exitCode = File_InputClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = File_Input.class.getClassLoader()
					.getResourceAsStream("demo_1/file_input_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = File_Input.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : File_Input");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 405438 characters generated by Talend Open Studio for Data Integration on the
 * December 8, 2020 6:12:17 PM PKT
 ************************************************************************************************/