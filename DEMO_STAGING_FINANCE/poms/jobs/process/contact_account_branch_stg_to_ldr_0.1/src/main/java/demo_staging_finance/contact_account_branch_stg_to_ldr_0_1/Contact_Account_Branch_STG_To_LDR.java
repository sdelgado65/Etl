// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package demo_staging_finance.contact_account_branch_stg_to_ldr_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Contact_Account_Branch_STG_To_LDR Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Contact_Account_Branch_STG_To_LDR implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Contact_Account_Branch_STG_To_LDR";
	private final String projectName = "DEMO_STAGING_FINANCE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Contact_Account_Branch_STG_To_LDR.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Contact_Account_Branch_STG_To_LDR.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		

    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:vsRFsCjkz0/HfUf5keScMt6IxkmbaauNisNccXbZXe8okci3");
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
			String dbProperties_tDBInput_2 = "";
			String url_tDBInput_2 = null;
			if(dbProperties_tDBInput_2 == null || dbProperties_tDBInput_2.trim().length() == 0) {
				url_tDBInput_2 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_2 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();
                stmt_tDBInput_2.setFetchSize(200000);

		    String dbquery_tDBInput_2 = "DELETE FROM CONTACT_ACCOUNT_BRANCH_LDR ALL";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
					



 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	





	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
	    

		
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);


 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class Contact_Account_Branch_LDRStruct implements routines.system.IPersistableRow<Contact_Account_Branch_LDRStruct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[0];

	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public Integer Contact_ID;

				public Integer getContact_ID () {
					return this.Contact_ID;
				}
				
			    public Integer Branch_Code;

				public Integer getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public Integer Account_ID;

				public Integer getAccount_ID () {
					return this.Account_ID;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
						this.Contact_ID = readInteger(dis);
					
						this.Branch_Code = readInteger(dis);
					
						this.Account_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// Integer
				
						writeInteger(this.Contact_ID,dos);
					
					// Integer
				
						writeInteger(this.Branch_Code,dos);
					
					// Integer
				
						writeInteger(this.Account_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Branch_Code="+String.valueOf(Branch_Code));
		sb.append(",Account_ID="+String.valueOf(Account_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Contact_Account_Branch_LDRStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[0];

	
			    public String contactId;

				public String getContactId () {
					return this.contactId;
				}
				
			    public String customerTypeCode;

				public String getCustomerTypeCode () {
					return this.customerTypeCode;
				}
				
			    public String preferredContactMethod;

				public String getPreferredContactMethod () {
					return this.preferredContactMethod;
				}
				
			    public String Branch_Code;

				public String getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public String account_Id;

				public String getAccount_Id () {
					return this.account_Id;
				}
				
			    public String jobTitle;

				public String getJobTitle () {
					return this.jobTitle;
				}
				
			    public String FullName;

				public String getFullName () {
					return this.FullName;
				}
				
			    public String department;

				public String getDepartment () {
					return this.department;
				}
				
			    public String birthDate;

				public String getBirthDate () {
					return this.birthDate;
				}
				
			    public String annualIncome;

				public String getAnnualIncome () {
					return this.annualIncome;
				}
				
			    public String MaritalStatus;

				public String getMaritalStatus () {
					return this.MaritalStatus;
				}
				
			    public String numberOfChildren;

				public String getNumberOfChildren () {
					return this.numberOfChildren;
				}
				
			    public String TelePhone;

				public String getTelePhone () {
					return this.TelePhone;
				}
				
			    public String Address_id;

				public String getAddress_id () {
					return this.Address_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR.length) {
				if(length < 1024 && commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR.length == 0) {
   					commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[1024];
				} else {
   					commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR, 0, length);
			strReturn = new String(commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR) {

        	try {

        		int length = 0;
		
					this.contactId = readString(dis);
					
					this.customerTypeCode = readString(dis);
					
					this.preferredContactMethod = readString(dis);
					
					this.Branch_Code = readString(dis);
					
					this.account_Id = readString(dis);
					
					this.jobTitle = readString(dis);
					
					this.FullName = readString(dis);
					
					this.department = readString(dis);
					
					this.birthDate = readString(dis);
					
					this.annualIncome = readString(dis);
					
					this.MaritalStatus = readString(dis);
					
					this.numberOfChildren = readString(dis);
					
					this.TelePhone = readString(dis);
					
					this.Address_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.contactId,dos);
					
					// String
				
						writeString(this.customerTypeCode,dos);
					
					// String
				
						writeString(this.preferredContactMethod,dos);
					
					// String
				
						writeString(this.Branch_Code,dos);
					
					// String
				
						writeString(this.account_Id,dos);
					
					// String
				
						writeString(this.jobTitle,dos);
					
					// String
				
						writeString(this.FullName,dos);
					
					// String
				
						writeString(this.department,dos);
					
					// String
				
						writeString(this.birthDate,dos);
					
					// String
				
						writeString(this.annualIncome,dos);
					
					// String
				
						writeString(this.MaritalStatus,dos);
					
					// String
				
						writeString(this.numberOfChildren,dos);
					
					// String
				
						writeString(this.TelePhone,dos);
					
					// String
				
						writeString(this.Address_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contactId="+contactId);
		sb.append(",customerTypeCode="+customerTypeCode);
		sb.append(",preferredContactMethod="+preferredContactMethod);
		sb.append(",Branch_Code="+Branch_Code);
		sb.append(",account_Id="+account_Id);
		sb.append(",jobTitle="+jobTitle);
		sb.append(",FullName="+FullName);
		sb.append(",department="+department);
		sb.append(",birthDate="+birthDate);
		sb.append(",annualIncome="+annualIncome);
		sb.append(",MaritalStatus="+MaritalStatus);
		sb.append(",numberOfChildren="+numberOfChildren);
		sb.append(",TelePhone="+TelePhone);
		sb.append(",Address_id="+Address_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[0];

	
			    public String contactId;

				public String getContactId () {
					return this.contactId;
				}
				
			    public String customerTypeCode;

				public String getCustomerTypeCode () {
					return this.customerTypeCode;
				}
				
			    public String preferredContactMethod;

				public String getPreferredContactMethod () {
					return this.preferredContactMethod;
				}
				
			    public String Branch_Code;

				public String getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public String account_Id;

				public String getAccount_Id () {
					return this.account_Id;
				}
				
			    public String jobTitle;

				public String getJobTitle () {
					return this.jobTitle;
				}
				
			    public String FullName;

				public String getFullName () {
					return this.FullName;
				}
				
			    public String department;

				public String getDepartment () {
					return this.department;
				}
				
			    public String birthDate;

				public String getBirthDate () {
					return this.birthDate;
				}
				
			    public String annualIncome;

				public String getAnnualIncome () {
					return this.annualIncome;
				}
				
			    public String MaritalStatus;

				public String getMaritalStatus () {
					return this.MaritalStatus;
				}
				
			    public String numberOfChildren;

				public String getNumberOfChildren () {
					return this.numberOfChildren;
				}
				
			    public String TelePhone;

				public String getTelePhone () {
					return this.TelePhone;
				}
				
			    public String Address_id;

				public String getAddress_id () {
					return this.Address_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR.length) {
				if(length < 1024 && commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR.length == 0) {
   					commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[1024];
				} else {
   					commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR, 0, length);
			strReturn = new String(commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR) {

        	try {

        		int length = 0;
		
					this.contactId = readString(dis);
					
					this.customerTypeCode = readString(dis);
					
					this.preferredContactMethod = readString(dis);
					
					this.Branch_Code = readString(dis);
					
					this.account_Id = readString(dis);
					
					this.jobTitle = readString(dis);
					
					this.FullName = readString(dis);
					
					this.department = readString(dis);
					
					this.birthDate = readString(dis);
					
					this.annualIncome = readString(dis);
					
					this.MaritalStatus = readString(dis);
					
					this.numberOfChildren = readString(dis);
					
					this.TelePhone = readString(dis);
					
					this.Address_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.contactId,dos);
					
					// String
				
						writeString(this.customerTypeCode,dos);
					
					// String
				
						writeString(this.preferredContactMethod,dos);
					
					// String
				
						writeString(this.Branch_Code,dos);
					
					// String
				
						writeString(this.account_Id,dos);
					
					// String
				
						writeString(this.jobTitle,dos);
					
					// String
				
						writeString(this.FullName,dos);
					
					// String
				
						writeString(this.department,dos);
					
					// String
				
						writeString(this.birthDate,dos);
					
					// String
				
						writeString(this.annualIncome,dos);
					
					// String
				
						writeString(this.MaritalStatus,dos);
					
					// String
				
						writeString(this.numberOfChildren,dos);
					
					// String
				
						writeString(this.TelePhone,dos);
					
					// String
				
						writeString(this.Address_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contactId="+contactId);
		sb.append(",customerTypeCode="+customerTypeCode);
		sb.append(",preferredContactMethod="+preferredContactMethod);
		sb.append(",Branch_Code="+Branch_Code);
		sb.append(",account_Id="+account_Id);
		sb.append(",jobTitle="+jobTitle);
		sb.append(",FullName="+FullName);
		sb.append(",department="+department);
		sb.append(",birthDate="+birthDate);
		sb.append(",annualIncome="+annualIncome);
		sb.append(",MaritalStatus="+MaritalStatus);
		sb.append(",numberOfChildren="+numberOfChildren);
		sb.append(",TelePhone="+TelePhone);
		sb.append(",Address_id="+Address_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_4Process(globalMap);
		tDBInput_3Process(globalMap);

		row2Struct row2 = new row2Struct();
Contact_Account_Branch_LDRStruct Contact_Account_Branch_LDR = new Contact_Account_Branch_LDRStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Contact_Account_Branch_LDR");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

String tableName_tDBOutput_3 = "Contact_Account_Branch_LDR";
boolean whetherReject_tDBOutput_3 = false;
   int batchSize_tDBOutput_3 = 10000;
   int batchSizeCounter_tDBOutput_3=0;



    String dbname_tDBOutput_3 = "ldr_demo";
    String driverClass_tDBOutput_3 = "com.teradata.jdbc.TeraDriver";

    java.lang.Class.forName(driverClass_tDBOutput_3);
    String dbProperties_tDBOutput_3 = "";
	String url_tDBOutput_3 = null;
	if(dbProperties_tDBOutput_3 == null || dbProperties_tDBOutput_3.trim().length() == 0) {
		url_tDBOutput_3 = "jdbc:teradata://" + "192.168.197.128";
	} else {
	    url_tDBOutput_3 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
	}
    String dbUser_tDBOutput_3 = "LDR_DEMO";
 
	final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:+XQbIdqfa1WLa96gMk4pFOotDFeKmJV+DtnLzihLNBD5bUu+");

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

	
    java.sql.Connection conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);

	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;
String dbschema_tDBOutput_3 = dbname_tDBOutput_3;
if(dbname_tDBOutput_3 == null || dbname_tDBOutput_3.trim().length() == 0) {
    tableName_tDBOutput_3 = "Contact_Account_Branch_LDR";
} else {
    tableName_tDBOutput_3 = dbname_tDBOutput_3 + "\".\"" + "Contact_Account_Branch_LDR";
}
int count_tDBOutput_3=0;
	 conn_tDBOutput_3.commit();
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"IUD\",\"Contact_ID\",\"Branch_Code\",\"Account_ID\") VALUES (?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    


 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
					globalMap.get( "tHash_Lookup_row1" ))
					;					
					
	

row1Struct row1HashKey = new row1Struct();
row1Struct row1Default = new row1Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	Integer Contact_ID;
	Integer AnnualIcome;
	Integer Account_ID;
	Integer NumberOfChildren;
	Integer Address_id;
	java.util.Date birthDate;
	String MartialStatus;
	String TelePhone;
	Integer Branch_Code;
	Integer Account_ID_1;
	Integer Branch_Code_1;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
Contact_Account_Branch_LDRStruct Contact_Account_Branch_LDR_tmp = new Contact_Account_Branch_LDRStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		

    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "STG_DW";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:fZS7PFnVrJcph7onj9B5ZXzPByGC2kKJKVlweINHr1HIhA==");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
			String dbProperties_tDBInput_1 = "";
			String url_tDBInput_1 = null;
			if(dbProperties_tDBInput_1 == null || dbProperties_tDBInput_1.trim().length() == 0) {
				url_tDBInput_1 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "STG_DW";    
			} else {
			    url_tDBInput_1 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "STG_DW" + "," + "";
			}       
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();
                stmt_tDBInput_1.setFetchSize(200000);

		    String dbquery_tDBInput_1 = "SELECT STG_DW.STG_CONTACT.contactId,\n		STG_DW.STG_CONTACT.customerTypeCode,\n		STG_DW.STG_CONTACT.preferredContactMethod"
+",\n		STG_DW.STG_CONTACT.Branch_Code,\n		STG_DW.STG_CONTACT.account_Id,\n		STG_DW.STG_CONTACT.jobTitle,\n		STG_DW.STG_CONTACT"
+".FullName,\n		STG_DW.STG_CONTACT.department,\n		STG_DW.STG_CONTACT.birthDate,\n		STG_DW.STG_CONTACT.annualIncome,\n		STG_DW."
+"STG_CONTACT.MaritalStatus,\n		STG_DW.STG_CONTACT.numberOfChildren,\n		STG_DW.STG_CONTACT.TelePhone,\n		STG_DW.STG_CONTACT.A"
+"ddress_id\nFROM	STG_DW.STG_CONTACT";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row2.contactId = null;
							} else {
	                         		
        	row2.contactId = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row2.customerTypeCode = null;
							} else {
	                         		
        	row2.customerTypeCode = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row2.preferredContactMethod = null;
							} else {
	                         		
        	row2.preferredContactMethod = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row2.Branch_Code = null;
							} else {
	                         		
        	row2.Branch_Code = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row2.account_Id = null;
							} else {
	                         		
        	row2.account_Id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row2.jobTitle = null;
							} else {
	                         		
        	row2.jobTitle = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row2.FullName = null;
							} else {
	                         		
        	row2.FullName = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row2.department = null;
							} else {
	                         		
        	row2.department = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row2.birthDate = null;
							} else {
	                         		
        	row2.birthDate = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row2.annualIncome = null;
							} else {
	                         		
        	row2.annualIncome = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row2.MaritalStatus = null;
							} else {
	                         		
        	row2.MaritalStatus = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row2.numberOfChildren = null;
							} else {
	                         		
        	row2.numberOfChildren = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row2.TelePhone = null;
							} else {
	                         		
        	row2.TelePhone = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row2.Address_id = null;
							} else {
	                         		
        	row2.Address_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
					



 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row3HashKey.primaryContactId = row2.contactId ;
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow3 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow3 = true;
			           		  	} // G 21
                    		  	
                    		

							row3Struct row3 = null;
                    		  	 
							

								while ((tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) || forceLooprow3) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row3'
									
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								
								if(!forceLooprow3) { // G 46
								
							
								 
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow3 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow1 = false;
       		  	    	
       		  	    	
 							row1Struct row1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row1HashKey.Branch_Code = row2.Branch_Code ;
                        		    		

								
		                        	row1HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row1.lookup( row1HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row1.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow1 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow1 = true;
			           		  	} // G 21
                    		  	
                    		

							row1Struct row1 = null;
                    		  	 
							

								while ((tHash_Lookup_row1 != null && tHash_Lookup_row1.hasNext()) || forceLooprow1) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row1'
									
                    		  	 
							   
                    		  	 
	       		  	    	row1Struct fromLookup_row1 = null;
							row1 = row1Default;
										 
							
								
								if(!forceLooprow1) { // G 46
								
							
								 
							
								
								fromLookup_row1 = tHash_Lookup_row1.next();

							

							if(fromLookup_row1 != null) {
								row1 = fromLookup_row1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow1 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.Contact_ID = Relational.ISNULL(row2.contactId) || row2.contactId.isEmpty() || row2.contactId.equalsIgnoreCase("NULL") ? -1 : Integer.parseInt(row2.contactId) ;
Var.AnnualIcome = Relational.ISNULL(row2.annualIncome) || row2.annualIncome.isEmpty() || row2.annualIncome.equalsIgnoreCase("NULL") ? null : Integer.parseInt(row2.annualIncome) ;
Var.Account_ID = Relational.ISNULL(row2.account_Id) || row2.account_Id.isEmpty() || row2.account_Id.equalsIgnoreCase("NULL") ? null : Integer.parseInt(row2.account_Id) ;
Var.NumberOfChildren = Relational.ISNULL(row2.numberOfChildren) || row2.numberOfChildren.isEmpty() || row2.numberOfChildren.equalsIgnoreCase("NULL") ? null : Integer.parseInt(row2.numberOfChildren) ;
Var.Address_id = Relational.ISNULL(row2.Address_id) || row2.Address_id.isEmpty() || row2.Address_id.equalsIgnoreCase("NULL") ? null : Integer.parseInt(row2.Address_id) ;
Var.birthDate = Relational.ISNULL(row2.birthDate) || row2.birthDate.isEmpty() || row2.birthDate.equalsIgnoreCase("NULL") ? null :  TalendDate.parseDate("MM/dd/yyyy", row2.birthDate) ;
Var.MartialStatus = Relational.ISNULL(row2.MaritalStatus) || row2.MaritalStatus.isEmpty() || row2.MaritalStatus.equalsIgnoreCase("NULL") ? null :  row2.MaritalStatus ;
Var.TelePhone = Relational.ISNULL(row2.TelePhone) || row2.TelePhone.isEmpty() || row2.TelePhone.equalsIgnoreCase("NULL") ? null : row2.TelePhone ;
Var.Branch_Code = Relational.ISNULL(row2.Branch_Code) || row2.Branch_Code.isEmpty() || row2.Branch_Code.equalsIgnoreCase("NULL") ? null : Integer.parseInt(row2.Branch_Code) ;
Var.Account_ID_1 = Relational.ISNULL(row3.Account_ID) || row3.Account_ID.isEmpty() || row3.Account_ID.equalsIgnoreCase("NULL") ? -1 : Integer.parseInt(row3.Account_ID) ;
Var.Branch_Code_1 = Relational.ISNULL(row1.Branch_Code) || row1.Branch_Code.isEmpty() || row1.Branch_Code.equalsIgnoreCase("NULL") ? -1 : Integer.parseInt(row1.Branch_Code) ;// ###############################
        // ###############################
        // # Output tables

Contact_Account_Branch_LDR = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'Contact_Account_Branch_LDR'
Contact_Account_Branch_LDR_tmp.IUD = null;
Contact_Account_Branch_LDR_tmp.Contact_ID = Var.Contact_ID ;
Contact_Account_Branch_LDR_tmp.Branch_Code = Var.Branch_Code_1;
Contact_Account_Branch_LDR_tmp.Account_ID = Var.Account_ID_1 ;
Contact_Account_Branch_LDR = Contact_Account_Branch_LDR_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "Contact_Account_Branch_LDR"
if(Contact_Account_Branch_LDR != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Contact_Account_Branch_LDR");
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(Contact_Account_Branch_LDR.IUD == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(1, Contact_Account_Branch_LDR.IUD);
}

                    if(Contact_Account_Branch_LDR.Contact_ID == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(2, Contact_Account_Branch_LDR.Contact_ID);
}

                    if(Contact_Account_Branch_LDR.Branch_Code == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(3, Contact_Account_Branch_LDR.Branch_Code);
}

                    if(Contact_Account_Branch_LDR.Account_ID == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(4, Contact_Account_Branch_LDR.Account_ID);
}

                pstmt_tDBOutput_3.addBatch();
                batchSizeCounter_tDBOutput_3++;
                nb_line_tDBOutput_3++;
                if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
                        batchSizeCounter_tDBOutput_3 = 0;
                        int countSum_tDBOutput_3 = 0;

                        for(int countEach_tDBOutput_3:pstmt_tDBOutput_3.executeBatch()) {
                            countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
                        }

                            insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
                }catch(java.sql.SQLException e_tDBOutput_3){
            java.sql.SQLException e3_tDBOutput_3 = e_tDBOutput_3;
                    boolean isFailure = false;
            while(e_tDBOutput_3 != null){
                if(e_tDBOutput_3.getErrorCode() == -2801){
                    System.out.println(" Message: " + e_tDBOutput_3.getMessage());
                    e_tDBOutput_3.printStackTrace();
                    System.out.println();
                }
                else if(e_tDBOutput_3.getErrorCode() == 1339){
                    isFailure = true;
                }
                else{
                    System.out.println(" Message: " + e_tDBOutput_3.getMessage());
                    e_tDBOutput_3.printStackTrace();
                }
                e_tDBOutput_3 = e_tDBOutput_3.getNextException();
            }
            if(isFailure && e_tDBOutput_3 != null){
                System.out.println(" Message: " + e_tDBOutput_3.getMessage());
                e_tDBOutput_3.printStackTrace();
            }
                System.err.println(e3_tDBOutput_3.getMessage());
                }
              }
                commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                        try {
                                       if (batchSizeCounter_tDBOutput_3 > 0) {
                                           int countSum_tDBOutput_3 = 0;

                                           for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
                                               countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
                                           }

                                               insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
                                           batchSizeCounter_tDBOutput_3 = 0;
                                       }
                            conn_tDBOutput_3.commit();
                            commitCounter_tDBOutput_3 = 0;
                        }catch(java.sql.SQLException e_tDBOutput_3){
                    java.sql.SQLException e3_tDBOutput_3 = e_tDBOutput_3;
                            boolean isFailure = false;
                    while(e_tDBOutput_3 != null){
                        if(e_tDBOutput_3.getErrorCode() == -2801){
                            System.out.println(" Message: " + e_tDBOutput_3.getMessage());
                            e_tDBOutput_3.printStackTrace();
                            System.out.println();
                        }
                        else if(e_tDBOutput_3.getErrorCode() == 1339){
                            isFailure = true;
                        }
                        else{
                            System.out.println(" Message: " + e_tDBOutput_3.getMessage());
                            e_tDBOutput_3.printStackTrace();
                        }
                        e_tDBOutput_3 = e_tDBOutput_3.getNextException();
                    }
                    if(isFailure && e_tDBOutput_3 != null){
                        System.out.println(" Message: " + e_tDBOutput_3.getMessage());
                        e_tDBOutput_3.printStackTrace();
                    }
                        System.err.println(e3_tDBOutput_3.getMessage());
                        }
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "Contact_Account_Branch_LDR"



	
		} // close loop of lookup 'row1' // G_TM_M_043
		
		} // close loop of lookup 'row3' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	





	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
	    

		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
					if(tHash_Lookup_row1 != null) {
						tHash_Lookup_row1.endGet();
					}
					globalMap.remove( "tHash_Lookup_row1" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	




                try {
                    if ( batchSizeCounter_tDBOutput_3 > 0 ) { // do not commit empty batch, this is a jdbc error
                        int countSum_tDBOutput_3 = 0;
                        for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
                            countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
                        }

                            insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

                        }
                //}catch (java.sql.BatchUpdateException e){
                }catch (java.sql.SQLException e){
            java.sql.SQLException e3 = e;
                    boolean isFailure = false;
                    int errorCode = 0;
            String sqlState = "";
            String message = "";
            while(e != null){
                if(e.getErrorCode() == -2801){
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                    System.out.println();
                }
                else if(e.getErrorCode() == 1339){
                    isFailure = true;
                } else{
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                }
                e = e.getNextException();
            }
            if(isFailure && e != null){
                System.out.println("[Message]: " + e.getMessage());
                e.printStackTrace();
            }
                System.err.println(e3.getMessage());
                }

        if(pstmt_tDBOutput_3 != null) {
            pstmt_tDBOutput_3.close();
            pstmt_tDBOutput_3 = null;
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
            if (commitCounter_tDBOutput_3 > 0) {
                conn_tDBOutput_3.commit();
            }


        conn_tDBOutput_3.close();

        resourceMap.put("finish_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Contact_Account_Branch_LDR");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row1"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableComparableLookupRow<row1Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Bank_ID;

				public String getBank_ID () {
					return this.Bank_ID;
				}
				
			    public String Branch_Code;

				public String getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public String BankName;

				public String getBankName () {
					return this.BankName;
				}
				
			    public String BranchName;

				public String getBranchName () {
					return this.BranchName;
				}
				
			    public String Address_ID;

				public String getAddress_ID () {
					return this.Address_ID;
				}
				
			    public String Telephone;

				public String getTelephone () {
					return this.Telephone;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Branch_Code == null) ? 0 : this.Branch_Code.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.Branch_Code == null) {
							if (other.Branch_Code != null)
								return false;
						
						} else if (!this.Branch_Code.equals(other.Branch_Code))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.Bank_ID = this.Bank_ID;
	            other.Branch_Code = this.Branch_Code;
	            other.BankName = this.BankName;
	            other.BranchName = this.BranchName;
	            other.Address_ID = this.Address_ID;
	            other.Telephone = this.Telephone;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.Branch_Code = this.Branch_Code;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR.length) {
				if(length < 1024 && commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR.length == 0) {
   					commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[1024];
				} else {
   					commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR, 0, length);
			strReturn = new String(commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR) {

        	try {

        		int length = 0;
		
					this.Branch_Code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Branch_Code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Bank_ID = readString(dis,ois);
					
						this.BankName = readString(dis,ois);
					
						this.BranchName = readString(dis,ois);
					
						this.Address_ID = readString(dis,ois);
					
						this.Telephone = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Bank_ID, dos, oos);
					
						writeString(this.BankName, dos, oos);
					
						writeString(this.BranchName, dos, oos);
					
						writeString(this.Address_ID, dos, oos);
					
						writeString(this.Telephone, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Bank_ID="+Bank_ID);
		sb.append(",Branch_Code="+Branch_Code);
		sb.append(",BankName="+BankName);
		sb.append(",BranchName="+BranchName);
		sb.append(",Address_ID="+Address_ID);
		sb.append(",Telephone="+Telephone);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Branch_Code, other.Branch_Code);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tAdvancedHash_row1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row1", false);
		start_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tAdvancedHash_row1 = 0;
		

			   		// connection name:row1
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_1) outputs:(row1,row1) | target node:tAdvancedHash_row1 - inputs:(row1) outputs:()
			   		// linked node: tMap_1 - inputs:(row2,row1,row3) outputs:(Contact_Account_Branch_LDR)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row1Struct>getLookup(matchingModeEnum_row1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row1 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		

    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "STG_DW";
				
				 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:8BEeP/HiX+gRw1wSVA0HmwgVgQkYAXw8h6/FmtD1hYBM5g==");
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
			String dbProperties_tDBInput_4 = "";
			String url_tDBInput_4 = null;
			if(dbProperties_tDBInput_4 == null || dbProperties_tDBInput_4.trim().length() == 0) {
				url_tDBInput_4 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "STG_DW";    
			} else {
			    url_tDBInput_4 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "STG_DW" + "," + "";
			}       
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
				
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();
                stmt_tDBInput_4.setFetchSize(200000);

		    String dbquery_tDBInput_4 = "SELECT STG_DW.STG_BRANCH.Bank_ID,\n		STG_DW.STG_BRANCH.Branch_Code,\n		STG_DW.STG_BRANCH.BankName,\n		STG_DW.STG_BRANCH.Br"
+"anchName,\n		STG_DW.STG_BRANCH.Address_ID,\n		STG_DW.STG_BRANCH.Telephone\nFROM	STG_DW.STG_BRANCH";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row1.Bank_ID = null;
							} else {
	                         		
        	row1.Bank_ID = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row1.Branch_Code = null;
							} else {
	                         		
        	row1.Branch_Code = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row1.BankName = null;
							} else {
	                         		
        	row1.BankName = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row1.BranchName = null;
							} else {
	                         		
        	row1.BranchName = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row1.Address_ID = null;
							} else {
	                         		
        	row1.Address_ID = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row1.Telephone = null;
							} else {
	                         		
        	row1.Telephone = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, false);
		                    }
					



 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					


			   
			   

					row1Struct row1_HashRow = new row1Struct();
		   	   	   
				
				row1_HashRow.Bank_ID = row1.Bank_ID;
				
				row1_HashRow.Branch_Code = row1.Branch_Code;
				
				row1_HashRow.BankName = row1.BankName;
				
				row1_HashRow.BranchName = row1.BranchName;
				
				row1_HashRow.Address_ID = row1.Address_ID;
				
				row1_HashRow.Telephone = row1.Telephone;
				
			tHash_Lookup_row1.put(row1_HashRow);
			
            




 


	tos_count_tAdvancedHash_row1++;

/**
 * [tAdvancedHash_row1 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	





	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
	if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
	    

		
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);


 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

tHash_Lookup_row1.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row1", true);
end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());




/**
 * [tAdvancedHash_row1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Account_ID;

				public String getAccount_ID () {
					return this.Account_ID;
				}
				
			    public String accountCategoryCode;

				public String getAccountCategoryCode () {
					return this.accountCategoryCode;
				}
				
			    public String customerTypeCode;

				public String getCustomerTypeCode () {
					return this.customerTypeCode;
				}
				
			    public String industryCode;

				public String getIndustryCode () {
					return this.industryCode;
				}
				
			    public String primaryContactId;

				public String getPrimaryContactId () {
					return this.primaryContactId;
				}
				
			    public String accountNumber;

				public String getAccountNumber () {
					return this.accountNumber;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String revenue;

				public String getRevenue () {
					return this.revenue;
				}
				
			    public String stateCode;

				public String getStateCode () {
					return this.stateCode;
				}
				
			    public String account_start_dt;

				public String getAccount_start_dt () {
					return this.account_start_dt;
				}
				
			    public String Account_end_dt;

				public String getAccount_end_dt () {
					return this.Account_end_dt;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.primaryContactId == null) ? 0 : this.primaryContactId.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.primaryContactId == null) {
							if (other.primaryContactId != null)
								return false;
						
						} else if (!this.primaryContactId.equals(other.primaryContactId))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.Account_ID = this.Account_ID;
	            other.accountCategoryCode = this.accountCategoryCode;
	            other.customerTypeCode = this.customerTypeCode;
	            other.industryCode = this.industryCode;
	            other.primaryContactId = this.primaryContactId;
	            other.accountNumber = this.accountNumber;
	            other.name = this.name;
	            other.revenue = this.revenue;
	            other.stateCode = this.stateCode;
	            other.account_start_dt = this.account_start_dt;
	            other.Account_end_dt = this.Account_end_dt;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.primaryContactId = this.primaryContactId;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR.length) {
				if(length < 1024 && commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR.length == 0) {
   					commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[1024];
				} else {
   					commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR, 0, length);
			strReturn = new String(commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_STG_To_LDR) {

        	try {

        		int length = 0;
		
					this.primaryContactId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.primaryContactId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Account_ID = readString(dis,ois);
					
						this.accountCategoryCode = readString(dis,ois);
					
						this.customerTypeCode = readString(dis,ois);
					
						this.industryCode = readString(dis,ois);
					
						this.accountNumber = readString(dis,ois);
					
						this.name = readString(dis,ois);
					
						this.revenue = readString(dis,ois);
					
						this.stateCode = readString(dis,ois);
					
						this.account_start_dt = readString(dis,ois);
					
						this.Account_end_dt = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Account_ID, dos, oos);
					
						writeString(this.accountCategoryCode, dos, oos);
					
						writeString(this.customerTypeCode, dos, oos);
					
						writeString(this.industryCode, dos, oos);
					
						writeString(this.accountNumber, dos, oos);
					
						writeString(this.name, dos, oos);
					
						writeString(this.revenue, dos, oos);
					
						writeString(this.stateCode, dos, oos);
					
						writeString(this.account_start_dt, dos, oos);
					
						writeString(this.Account_end_dt, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Account_ID="+Account_ID);
		sb.append(",accountCategoryCode="+accountCategoryCode);
		sb.append(",customerTypeCode="+customerTypeCode);
		sb.append(",industryCode="+industryCode);
		sb.append(",primaryContactId="+primaryContactId);
		sb.append(",accountNumber="+accountNumber);
		sb.append(",name="+name);
		sb.append(",revenue="+revenue);
		sb.append(",stateCode="+stateCode);
		sb.append(",account_start_dt="+account_start_dt);
		sb.append(",Account_end_dt="+Account_end_dt);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.primaryContactId, other.primaryContactId);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_1 - inputs:(row2,row1,row3) outputs:(Contact_Account_Branch_LDR)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		

    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "STG_DW";
				
				 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:s6NUzFDkcKgEQRvYpFLiTLvsvt/QSiKj/Dz+wwjFPdk8VQ==");
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
			String dbProperties_tDBInput_3 = "";
			String url_tDBInput_3 = null;
			if(dbProperties_tDBInput_3 == null || dbProperties_tDBInput_3.trim().length() == 0) {
				url_tDBInput_3 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "STG_DW";    
			} else {
			    url_tDBInput_3 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "STG_DW" + "," + "";
			}       
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();
                stmt_tDBInput_3.setFetchSize(200000);

		    String dbquery_tDBInput_3 = "SELECT STG_DW.STG_ACCOUNTS.Account_ID,\n		STG_DW.STG_ACCOUNTS.accountCategoryCode,\n		STG_DW.STG_ACCOUNTS.customerTypeCod"
+"e,\n		STG_DW.STG_ACCOUNTS.industryCode,\n		STG_DW.STG_ACCOUNTS.primaryContactId,\n		STG_DW.STG_ACCOUNTS.accountNumber,\n		ST"
+"G_DW.STG_ACCOUNTS.name,\n		STG_DW.STG_ACCOUNTS.revenue,\n		STG_DW.STG_ACCOUNTS.stateCode,\n		STG_DW.STG_ACCOUNTS.account_st"
+"art_dt,\n		STG_DW.STG_ACCOUNTS.Account_end_dt\nFROM	STG_DW.STG_ACCOUNTS";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row3.Account_ID = null;
							} else {
	                         		
        	row3.Account_ID = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row3.accountCategoryCode = null;
							} else {
	                         		
        	row3.accountCategoryCode = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row3.customerTypeCode = null;
							} else {
	                         		
        	row3.customerTypeCode = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row3.industryCode = null;
							} else {
	                         		
        	row3.industryCode = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row3.primaryContactId = null;
							} else {
	                         		
        	row3.primaryContactId = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row3.accountNumber = null;
							} else {
	                         		
        	row3.accountNumber = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row3.name = null;
							} else {
	                         		
        	row3.name = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row3.revenue = null;
							} else {
	                         		
        	row3.revenue = routines.system.JDBCUtil.getString(rs_tDBInput_3, 8, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row3.stateCode = null;
							} else {
	                         		
        	row3.stateCode = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row3.account_start_dt = null;
							} else {
	                         		
        	row3.account_start_dt = routines.system.JDBCUtil.getString(rs_tDBInput_3, 10, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row3.Account_end_dt = null;
							} else {
	                         		
        	row3.Account_end_dt = routines.system.JDBCUtil.getString(rs_tDBInput_3, 11, false);
		                    }
					



 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.Account_ID = row3.Account_ID;
				
				row3_HashRow.accountCategoryCode = row3.accountCategoryCode;
				
				row3_HashRow.customerTypeCode = row3.customerTypeCode;
				
				row3_HashRow.industryCode = row3.industryCode;
				
				row3_HashRow.primaryContactId = row3.primaryContactId;
				
				row3_HashRow.accountNumber = row3.accountNumber;
				
				row3_HashRow.name = row3.name;
				
				row3_HashRow.revenue = row3.revenue;
				
				row3_HashRow.stateCode = row3.stateCode;
				
				row3_HashRow.account_start_dt = row3.account_start_dt;
				
				row3_HashRow.Account_end_dt = row3.Account_end_dt;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	





	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
	if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
	    

		
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);


 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

tHash_Lookup_row3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Contact_Account_Branch_STG_To_LDR Contact_Account_Branch_STG_To_LDRClass = new Contact_Account_Branch_STG_To_LDR();

        int exitCode = Contact_Account_Branch_STG_To_LDRClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Contact_Account_Branch_STG_To_LDR.class.getClassLoader().getResourceAsStream("demo_staging_finance/contact_account_branch_stg_to_ldr_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Contact_Account_Branch_STG_To_LDR.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Contact_Account_Branch_STG_To_LDR");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     120586 characters generated by Talend Open Studio for Data Integration 
 *     on the January 29, 2021 3:18:52 PM PKT
 ************************************************************************************************/