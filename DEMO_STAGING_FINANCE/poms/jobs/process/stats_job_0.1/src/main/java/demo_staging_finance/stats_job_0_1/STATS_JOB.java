// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package demo_staging_finance.stats_job_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: STATS_JOB Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class STATS_JOB implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "STATS_JOB";
	private final String projectName = "DEMO_STAGING_FINANCE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				STATS_JOB.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(STATS_JOB.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";

	
		int tos_count_tDBRow_1 = 0;
		




	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
			String driverClass_tDBRow_1 = "com.teradata.jdbc.TeraDriver";
		    java.lang.Class jdbcclazz_tDBRow_1 = java.lang.Class.forName(driverClass_tDBRow_1);
		
			String dbProperties_tDBRow_1 = "";
			String url_tDBRow_1 = null;
			if(dbProperties_tDBRow_1 == null || dbProperties_tDBRow_1.trim().length() == 0) {
				url_tDBRow_1 = "jdbc:teradata://" + "192.168.197.128";
			} else {
			    url_tDBRow_1 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
			}
		
					String dbUser_tDBRow_1 = "LDR_DEMO";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:dbaIX4vBp0KQGNLvXVVgN9dMQoXLoCeoLqon9skWxII21Rq2");
        		   	
        	        String dbPwd_tDBRow_1 = decryptedPassword_tDBRow_1;
	        
					
			conn_tDBRow_1 = java.sql.DriverManager.getConnection(url_tDBRow_1,dbUser_tDBRow_1,dbPwd_tDBRow_1);
		
    resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
					if(conn_tDBRow_1.getAutoCommit()) {
						
				conn_tDBRow_1.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_1 = 10000;
					int commitCounter_tDBRow_1 = 0;
				
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);

	

 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

query_tDBRow_1 = "COLLECT STATISTICS COLUMN(CONTACT_ID),COLUMN(FULLNAME),COLUMN(ADDRESS_ID) ON CONTACT_LDR_CORE;";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
		stmt_tDBRow_1.execute(query_tDBRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_1++;
		if(commitEvery_tDBRow_1 <= commitCounter_tDBRow_1) {
			
			conn_tDBRow_1.commit();
			
			commitCounter_tDBRow_1=0;
		}
		

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	





	stmt_tDBRow_1.close();
	resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
		if(commitEvery_tDBRow_1>commitCounter_tDBRow_1){

			
			conn_tDBRow_1.commit();
			

			commitCounter_tDBRow_1=0;

		}
	

	
	
			conn_tDBRow_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			

 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_1") == null){
            java.sql.Connection ctn_tDBRow_1 = null;
            if((ctn_tDBRow_1 = (java.sql.Connection)resourceMap.get("conn_tDBRow_1")) != null){
                try {
                    ctn_tDBRow_1.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_1) {
                    String errorMessage_tDBRow_1 = "failed to close the connection in tDBRow_1 :" + sqlEx_tDBRow_1.getMessage();
                    System.err.println(errorMessage_tDBRow_1);
                }
            }
        }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_2", false);
		start_Hash.put("tDBRow_2", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_2";

	
		int tos_count_tDBRow_2 = 0;
		




	java.sql.Connection conn_tDBRow_2 = null;
	String query_tDBRow_2 = "";
	boolean whetherReject_tDBRow_2 = false;
			String driverClass_tDBRow_2 = "com.teradata.jdbc.TeraDriver";
		    java.lang.Class jdbcclazz_tDBRow_2 = java.lang.Class.forName(driverClass_tDBRow_2);
		
			String dbProperties_tDBRow_2 = "";
			String url_tDBRow_2 = null;
			if(dbProperties_tDBRow_2 == null || dbProperties_tDBRow_2.trim().length() == 0) {
				url_tDBRow_2 = "jdbc:teradata://" + "192.168.197.128";
			} else {
			    url_tDBRow_2 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
			}
		
					String dbUser_tDBRow_2 = "LDR_DEMO";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:9z21fichFYfLMGlS+/qB4LYsrGov6V8bUudqdolRw5G3RGpW");
        		   	
        	        String dbPwd_tDBRow_2 = decryptedPassword_tDBRow_2;
	        
					
			conn_tDBRow_2 = java.sql.DriverManager.getConnection(url_tDBRow_2,dbUser_tDBRow_2,dbPwd_tDBRow_2);
		
    resourceMap.put("conn_tDBRow_2", conn_tDBRow_2);
					if(conn_tDBRow_2.getAutoCommit()) {
						
				conn_tDBRow_2.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_2 = 10000;
					int commitCounter_tDBRow_2 = 0;
				
        java.sql.Statement stmt_tDBRow_2 = conn_tDBRow_2.createStatement();
        resourceMap.put("stmt_tDBRow_2", stmt_tDBRow_2);

	

 



/**
 * [tDBRow_2 begin ] stop
 */
	
	/**
	 * [tDBRow_2 main ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

query_tDBRow_2 = "COLLECT STATISTICS COLUMN(ACCOUNT_ID) ON ACCOUNT_LDR_CORE;";
whetherReject_tDBRow_2 = false;
globalMap.put("tDBRow_2_QUERY",query_tDBRow_2);
try {
		stmt_tDBRow_2.execute(query_tDBRow_2);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_2++;
		if(commitEvery_tDBRow_2 <= commitCounter_tDBRow_2) {
			
			conn_tDBRow_2.commit();
			
			commitCounter_tDBRow_2=0;
		}
		

 


	tos_count_tDBRow_2++;

/**
 * [tDBRow_2 main ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

 



/**
 * [tDBRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

 



/**
 * [tDBRow_2 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_2 end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	





	stmt_tDBRow_2.close();
	resourceMap.remove("stmt_tDBRow_2");
    resourceMap.put("statementClosed_tDBRow_2", true);
		if(commitEvery_tDBRow_2>commitCounter_tDBRow_2){

			
			conn_tDBRow_2.commit();
			

			commitCounter_tDBRow_2=0;

		}
	

	
	
			conn_tDBRow_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			

 

ok_Hash.put("tDBRow_2", true);
end_Hash.put("tDBRow_2", System.currentTimeMillis());




/**
 * [tDBRow_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_2 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_2") == null) {
            java.sql.Statement stmtToClose_tDBRow_2 = null;
            if ((stmtToClose_tDBRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_2")) != null) {
                stmtToClose_tDBRow_2.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_2") == null){
            java.sql.Connection ctn_tDBRow_2 = null;
            if((ctn_tDBRow_2 = (java.sql.Connection)resourceMap.get("conn_tDBRow_2")) != null){
                try {
                    ctn_tDBRow_2.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_2) {
                    String errorMessage_tDBRow_2 = "failed to close the connection in tDBRow_2 :" + sqlEx_tDBRow_2.getMessage();
                    System.err.println(errorMessage_tDBRow_2);
                }
            }
        }
    }
 



/**
 * [tDBRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_3", false);
		start_Hash.put("tDBRow_3", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_3";

	
		int tos_count_tDBRow_3 = 0;
		




	java.sql.Connection conn_tDBRow_3 = null;
	String query_tDBRow_3 = "";
	boolean whetherReject_tDBRow_3 = false;
			String driverClass_tDBRow_3 = "com.teradata.jdbc.TeraDriver";
		    java.lang.Class jdbcclazz_tDBRow_3 = java.lang.Class.forName(driverClass_tDBRow_3);
		
			String dbProperties_tDBRow_3 = "";
			String url_tDBRow_3 = null;
			if(dbProperties_tDBRow_3 == null || dbProperties_tDBRow_3.trim().length() == 0) {
				url_tDBRow_3 = "jdbc:teradata://" + "192.168.197.128";
			} else {
			    url_tDBRow_3 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
			}
		
					String dbUser_tDBRow_3 = "LDR_DEMO";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:rrwSx/p3iiu5kpCWbYDmLV0/ew/PayB4QLjyUKrv6D/8qKMH");
        		   	
        	        String dbPwd_tDBRow_3 = decryptedPassword_tDBRow_3;
	        
					
			conn_tDBRow_3 = java.sql.DriverManager.getConnection(url_tDBRow_3,dbUser_tDBRow_3,dbPwd_tDBRow_3);
		
    resourceMap.put("conn_tDBRow_3", conn_tDBRow_3);
					if(conn_tDBRow_3.getAutoCommit()) {
						
				conn_tDBRow_3.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_3 = 10000;
					int commitCounter_tDBRow_3 = 0;
				
        java.sql.Statement stmt_tDBRow_3 = conn_tDBRow_3.createStatement();
        resourceMap.put("stmt_tDBRow_3", stmt_tDBRow_3);

	

 



/**
 * [tDBRow_3 begin ] stop
 */
	
	/**
	 * [tDBRow_3 main ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

query_tDBRow_3 = "COLLECT STATISTICS COLUMN(BANK_ID), COLUMN(BANK_NAME) ON BANK_LDR_CORE;";
whetherReject_tDBRow_3 = false;
globalMap.put("tDBRow_3_QUERY",query_tDBRow_3);
try {
		stmt_tDBRow_3.execute(query_tDBRow_3);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_3 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_3++;
		if(commitEvery_tDBRow_3 <= commitCounter_tDBRow_3) {
			
			conn_tDBRow_3.commit();
			
			commitCounter_tDBRow_3=0;
		}
		

 


	tos_count_tDBRow_3++;

/**
 * [tDBRow_3 main ] stop
 */
	
	/**
	 * [tDBRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

 



/**
 * [tDBRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

 



/**
 * [tDBRow_3 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_3 end ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	





	stmt_tDBRow_3.close();
	resourceMap.remove("stmt_tDBRow_3");
    resourceMap.put("statementClosed_tDBRow_3", true);
		if(commitEvery_tDBRow_3>commitCounter_tDBRow_3){

			
			conn_tDBRow_3.commit();
			

			commitCounter_tDBRow_3=0;

		}
	

	
	
			conn_tDBRow_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			

 

ok_Hash.put("tDBRow_3", true);
end_Hash.put("tDBRow_3", System.currentTimeMillis());




/**
 * [tDBRow_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_3 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_3") == null) {
            java.sql.Statement stmtToClose_tDBRow_3 = null;
            if ((stmtToClose_tDBRow_3 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_3")) != null) {
                stmtToClose_tDBRow_3.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_3") == null){
            java.sql.Connection ctn_tDBRow_3 = null;
            if((ctn_tDBRow_3 = (java.sql.Connection)resourceMap.get("conn_tDBRow_3")) != null){
                try {
                    ctn_tDBRow_3.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_3) {
                    String errorMessage_tDBRow_3 = "failed to close the connection in tDBRow_3 :" + sqlEx_tDBRow_3.getMessage();
                    System.err.println(errorMessage_tDBRow_3);
                }
            }
        }
    }
 



/**
 * [tDBRow_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_4", false);
		start_Hash.put("tDBRow_4", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_4";

	
		int tos_count_tDBRow_4 = 0;
		




	java.sql.Connection conn_tDBRow_4 = null;
	String query_tDBRow_4 = "";
	boolean whetherReject_tDBRow_4 = false;
			String driverClass_tDBRow_4 = "com.teradata.jdbc.TeraDriver";
		    java.lang.Class jdbcclazz_tDBRow_4 = java.lang.Class.forName(driverClass_tDBRow_4);
		
			String dbProperties_tDBRow_4 = "";
			String url_tDBRow_4 = null;
			if(dbProperties_tDBRow_4 == null || dbProperties_tDBRow_4.trim().length() == 0) {
				url_tDBRow_4 = "jdbc:teradata://" + "192.168.197.128";
			} else {
			    url_tDBRow_4 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
			}
		
					String dbUser_tDBRow_4 = "LDR_DEMO";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:if8M1j7y7ZjLOwLg3wdiLifPlEDZirZjlwmdfpxMDEebO2mc");
        		   	
        	        String dbPwd_tDBRow_4 = decryptedPassword_tDBRow_4;
	        
					
			conn_tDBRow_4 = java.sql.DriverManager.getConnection(url_tDBRow_4,dbUser_tDBRow_4,dbPwd_tDBRow_4);
		
    resourceMap.put("conn_tDBRow_4", conn_tDBRow_4);
					if(conn_tDBRow_4.getAutoCommit()) {
						
				conn_tDBRow_4.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_4 = 10000;
					int commitCounter_tDBRow_4 = 0;
				
        java.sql.Statement stmt_tDBRow_4 = conn_tDBRow_4.createStatement();
        resourceMap.put("stmt_tDBRow_4", stmt_tDBRow_4);

	

 



/**
 * [tDBRow_4 begin ] stop
 */
	
	/**
	 * [tDBRow_4 main ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

query_tDBRow_4 = "COLLECT STATISTICS COLUMN(BRANCH_CODE), COLUMN(BRANCH_NAME), COLUMN(BANK_ID) ON BRANCH_LDR_CORE;";
whetherReject_tDBRow_4 = false;
globalMap.put("tDBRow_4_QUERY",query_tDBRow_4);
try {
		stmt_tDBRow_4.execute(query_tDBRow_4);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_4 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_4++;
		if(commitEvery_tDBRow_4 <= commitCounter_tDBRow_4) {
			
			conn_tDBRow_4.commit();
			
			commitCounter_tDBRow_4=0;
		}
		

 


	tos_count_tDBRow_4++;

/**
 * [tDBRow_4 main ] stop
 */
	
	/**
	 * [tDBRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

 



/**
 * [tDBRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

 



/**
 * [tDBRow_4 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_4 end ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	





	stmt_tDBRow_4.close();
	resourceMap.remove("stmt_tDBRow_4");
    resourceMap.put("statementClosed_tDBRow_4", true);
		if(commitEvery_tDBRow_4>commitCounter_tDBRow_4){

			
			conn_tDBRow_4.commit();
			

			commitCounter_tDBRow_4=0;

		}
	

	
	
			conn_tDBRow_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			

 

ok_Hash.put("tDBRow_4", true);
end_Hash.put("tDBRow_4", System.currentTimeMillis());




/**
 * [tDBRow_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_4 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_4") == null) {
            java.sql.Statement stmtToClose_tDBRow_4 = null;
            if ((stmtToClose_tDBRow_4 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_4")) != null) {
                stmtToClose_tDBRow_4.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_4") == null){
            java.sql.Connection ctn_tDBRow_4 = null;
            if((ctn_tDBRow_4 = (java.sql.Connection)resourceMap.get("conn_tDBRow_4")) != null){
                try {
                    ctn_tDBRow_4.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_4) {
                    String errorMessage_tDBRow_4 = "failed to close the connection in tDBRow_4 :" + sqlEx_tDBRow_4.getMessage();
                    System.err.println(errorMessage_tDBRow_4);
                }
            }
        }
    }
 



/**
 * [tDBRow_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_4_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_5", false);
		start_Hash.put("tDBRow_5", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_5";

	
		int tos_count_tDBRow_5 = 0;
		




	java.sql.Connection conn_tDBRow_5 = null;
	String query_tDBRow_5 = "";
	boolean whetherReject_tDBRow_5 = false;
			String driverClass_tDBRow_5 = "com.teradata.jdbc.TeraDriver";
		    java.lang.Class jdbcclazz_tDBRow_5 = java.lang.Class.forName(driverClass_tDBRow_5);
		
			String dbProperties_tDBRow_5 = "";
			String url_tDBRow_5 = null;
			if(dbProperties_tDBRow_5 == null || dbProperties_tDBRow_5.trim().length() == 0) {
				url_tDBRow_5 = "jdbc:teradata://" + "192.168.197.128";
			} else {
			    url_tDBRow_5 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
			}
		
					String dbUser_tDBRow_5 = "LDR_DEMO";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_5 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:Q1AZPiEzkBENmZGPQExe1kvHtHFS9EmvRrJXxmvby0iBTX5w");
        		   	
        	        String dbPwd_tDBRow_5 = decryptedPassword_tDBRow_5;
	        
					
			conn_tDBRow_5 = java.sql.DriverManager.getConnection(url_tDBRow_5,dbUser_tDBRow_5,dbPwd_tDBRow_5);
		
    resourceMap.put("conn_tDBRow_5", conn_tDBRow_5);
					if(conn_tDBRow_5.getAutoCommit()) {
						
				conn_tDBRow_5.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_5 = 10000;
					int commitCounter_tDBRow_5 = 0;
				
        java.sql.Statement stmt_tDBRow_5 = conn_tDBRow_5.createStatement();
        resourceMap.put("stmt_tDBRow_5", stmt_tDBRow_5);

	

 



/**
 * [tDBRow_5 begin ] stop
 */
	
	/**
	 * [tDBRow_5 main ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	

query_tDBRow_5 = "COLLECT STATISTICS COLUMN(ADDRESS_ID),COLUMN(CITY_ID) ON ADDRESS_LDR_CORE;";
whetherReject_tDBRow_5 = false;
globalMap.put("tDBRow_5_QUERY",query_tDBRow_5);
try {
		stmt_tDBRow_5.execute(query_tDBRow_5);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_5 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_5++;
		if(commitEvery_tDBRow_5 <= commitCounter_tDBRow_5) {
			
			conn_tDBRow_5.commit();
			
			commitCounter_tDBRow_5=0;
		}
		

 


	tos_count_tDBRow_5++;

/**
 * [tDBRow_5 main ] stop
 */
	
	/**
	 * [tDBRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	

 



/**
 * [tDBRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	

 



/**
 * [tDBRow_5 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_5 end ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	





	stmt_tDBRow_5.close();
	resourceMap.remove("stmt_tDBRow_5");
    resourceMap.put("statementClosed_tDBRow_5", true);
		if(commitEvery_tDBRow_5>commitCounter_tDBRow_5){

			
			conn_tDBRow_5.commit();
			

			commitCounter_tDBRow_5=0;

		}
	

	
	
			conn_tDBRow_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			

 

ok_Hash.put("tDBRow_5", true);
end_Hash.put("tDBRow_5", System.currentTimeMillis());




/**
 * [tDBRow_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_5 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_5") == null) {
            java.sql.Statement stmtToClose_tDBRow_5 = null;
            if ((stmtToClose_tDBRow_5 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_5")) != null) {
                stmtToClose_tDBRow_5.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_5") == null){
            java.sql.Connection ctn_tDBRow_5 = null;
            if((ctn_tDBRow_5 = (java.sql.Connection)resourceMap.get("conn_tDBRow_5")) != null){
                try {
                    ctn_tDBRow_5.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_5) {
                    String errorMessage_tDBRow_5 = "failed to close the connection in tDBRow_5 :" + sqlEx_tDBRow_5.getMessage();
                    System.err.println(errorMessage_tDBRow_5);
                }
            }
        }
    }
 



/**
 * [tDBRow_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_5_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_6", false);
		start_Hash.put("tDBRow_6", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_6";

	
		int tos_count_tDBRow_6 = 0;
		




	java.sql.Connection conn_tDBRow_6 = null;
	String query_tDBRow_6 = "";
	boolean whetherReject_tDBRow_6 = false;
			String driverClass_tDBRow_6 = "com.teradata.jdbc.TeraDriver";
		    java.lang.Class jdbcclazz_tDBRow_6 = java.lang.Class.forName(driverClass_tDBRow_6);
		
			String dbProperties_tDBRow_6 = "";
			String url_tDBRow_6 = null;
			if(dbProperties_tDBRow_6 == null || dbProperties_tDBRow_6.trim().length() == 0) {
				url_tDBRow_6 = "jdbc:teradata://" + "192.168.197.128";
			} else {
			    url_tDBRow_6 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
			}
		
					String dbUser_tDBRow_6 = "LDR_DEMO";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_6 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:UdE0XbadkmZ+Ej4fAC+n772HTT1Q1VUhflXs7fx5BMSGIp4i");
        		   	
        	        String dbPwd_tDBRow_6 = decryptedPassword_tDBRow_6;
	        
					
			conn_tDBRow_6 = java.sql.DriverManager.getConnection(url_tDBRow_6,dbUser_tDBRow_6,dbPwd_tDBRow_6);
		
    resourceMap.put("conn_tDBRow_6", conn_tDBRow_6);
					if(conn_tDBRow_6.getAutoCommit()) {
						
				conn_tDBRow_6.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_6 = 10000;
					int commitCounter_tDBRow_6 = 0;
				
        java.sql.Statement stmt_tDBRow_6 = conn_tDBRow_6.createStatement();
        resourceMap.put("stmt_tDBRow_6", stmt_tDBRow_6);

	

 



/**
 * [tDBRow_6 begin ] stop
 */
	
	/**
	 * [tDBRow_6 main ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	

query_tDBRow_6 = "COLLECT STATISTICS COLUMN(TRANSACTION_ID),COLUMN(ACCOUNT_ID) ON TRANSACTION_LDR_CORE;";
whetherReject_tDBRow_6 = false;
globalMap.put("tDBRow_6_QUERY",query_tDBRow_6);
try {
		stmt_tDBRow_6.execute(query_tDBRow_6);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_6 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_6++;
		if(commitEvery_tDBRow_6 <= commitCounter_tDBRow_6) {
			
			conn_tDBRow_6.commit();
			
			commitCounter_tDBRow_6=0;
		}
		

 


	tos_count_tDBRow_6++;

/**
 * [tDBRow_6 main ] stop
 */
	
	/**
	 * [tDBRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	

 



/**
 * [tDBRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	

 



/**
 * [tDBRow_6 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_6 end ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	





	stmt_tDBRow_6.close();
	resourceMap.remove("stmt_tDBRow_6");
    resourceMap.put("statementClosed_tDBRow_6", true);
		if(commitEvery_tDBRow_6>commitCounter_tDBRow_6){

			
			conn_tDBRow_6.commit();
			

			commitCounter_tDBRow_6=0;

		}
	

	
	
			conn_tDBRow_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			

 

ok_Hash.put("tDBRow_6", true);
end_Hash.put("tDBRow_6", System.currentTimeMillis());




/**
 * [tDBRow_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_6 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_6") == null) {
            java.sql.Statement stmtToClose_tDBRow_6 = null;
            if ((stmtToClose_tDBRow_6 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_6")) != null) {
                stmtToClose_tDBRow_6.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_6") == null){
            java.sql.Connection ctn_tDBRow_6 = null;
            if((ctn_tDBRow_6 = (java.sql.Connection)resourceMap.get("conn_tDBRow_6")) != null){
                try {
                    ctn_tDBRow_6.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_6) {
                    String errorMessage_tDBRow_6 = "failed to close the connection in tDBRow_6 :" + sqlEx_tDBRow_6.getMessage();
                    System.err.println(errorMessage_tDBRow_6);
                }
            }
        }
    }
 



/**
 * [tDBRow_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_6_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_7", false);
		start_Hash.put("tDBRow_7", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_7";

	
		int tos_count_tDBRow_7 = 0;
		




	java.sql.Connection conn_tDBRow_7 = null;
	String query_tDBRow_7 = "";
	boolean whetherReject_tDBRow_7 = false;
			String driverClass_tDBRow_7 = "com.teradata.jdbc.TeraDriver";
		    java.lang.Class jdbcclazz_tDBRow_7 = java.lang.Class.forName(driverClass_tDBRow_7);
		
			String dbProperties_tDBRow_7 = "";
			String url_tDBRow_7 = null;
			if(dbProperties_tDBRow_7 == null || dbProperties_tDBRow_7.trim().length() == 0) {
				url_tDBRow_7 = "jdbc:teradata://" + "192.168.197.128";
			} else {
			    url_tDBRow_7 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
			}
		
					String dbUser_tDBRow_7 = "LDR_DEMO";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_7 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:VZYapI+KBglYYrNR6MqNFv3haoyelfv2xS8EpMqMRPrDThrh");
        		   	
        	        String dbPwd_tDBRow_7 = decryptedPassword_tDBRow_7;
	        
					
			conn_tDBRow_7 = java.sql.DriverManager.getConnection(url_tDBRow_7,dbUser_tDBRow_7,dbPwd_tDBRow_7);
		
    resourceMap.put("conn_tDBRow_7", conn_tDBRow_7);
					if(conn_tDBRow_7.getAutoCommit()) {
						
				conn_tDBRow_7.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_7 = 10000;
					int commitCounter_tDBRow_7 = 0;
				
        java.sql.Statement stmt_tDBRow_7 = conn_tDBRow_7.createStatement();
        resourceMap.put("stmt_tDBRow_7", stmt_tDBRow_7);

	

 



/**
 * [tDBRow_7 begin ] stop
 */
	
	/**
	 * [tDBRow_7 main ] start
	 */

	

	
	
	currentComponent="tDBRow_7";

	

query_tDBRow_7 = "COLLECT STATISTICS COLUMN(CONTACT_ID,ACCOUNT_ID,BRANCH_CODE),COLUMN(CONTACT_ID),COLUMN(ACCOUNT_ID),COLUMN(BRANCH_CODE) "
+"ON CONTACT_ACCOUNT_BRANCH_LDR_CORE;";
whetherReject_tDBRow_7 = false;
globalMap.put("tDBRow_7_QUERY",query_tDBRow_7);
try {
		stmt_tDBRow_7.execute(query_tDBRow_7);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_7 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_7++;
		if(commitEvery_tDBRow_7 <= commitCounter_tDBRow_7) {
			
			conn_tDBRow_7.commit();
			
			commitCounter_tDBRow_7=0;
		}
		

 


	tos_count_tDBRow_7++;

/**
 * [tDBRow_7 main ] stop
 */
	
	/**
	 * [tDBRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_7";

	

 



/**
 * [tDBRow_7 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_7";

	

 



/**
 * [tDBRow_7 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_7 end ] start
	 */

	

	
	
	currentComponent="tDBRow_7";

	





	stmt_tDBRow_7.close();
	resourceMap.remove("stmt_tDBRow_7");
    resourceMap.put("statementClosed_tDBRow_7", true);
		if(commitEvery_tDBRow_7>commitCounter_tDBRow_7){

			
			conn_tDBRow_7.commit();
			

			commitCounter_tDBRow_7=0;

		}
	

	
	
			conn_tDBRow_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			

 

ok_Hash.put("tDBRow_7", true);
end_Hash.put("tDBRow_7", System.currentTimeMillis());




/**
 * [tDBRow_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_7 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_7";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_7") == null) {
            java.sql.Statement stmtToClose_tDBRow_7 = null;
            if ((stmtToClose_tDBRow_7 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_7")) != null) {
                stmtToClose_tDBRow_7.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_7") == null){
            java.sql.Connection ctn_tDBRow_7 = null;
            if((ctn_tDBRow_7 = (java.sql.Connection)resourceMap.get("conn_tDBRow_7")) != null){
                try {
                    ctn_tDBRow_7.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_7) {
                    String errorMessage_tDBRow_7 = "failed to close the connection in tDBRow_7 :" + sqlEx_tDBRow_7.getMessage();
                    System.err.println(errorMessage_tDBRow_7);
                }
            }
        }
    }
 



/**
 * [tDBRow_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_7_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_8", false);
		start_Hash.put("tDBRow_8", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_8";

	
		int tos_count_tDBRow_8 = 0;
		




	java.sql.Connection conn_tDBRow_8 = null;
	String query_tDBRow_8 = "";
	boolean whetherReject_tDBRow_8 = false;
			String driverClass_tDBRow_8 = "com.teradata.jdbc.TeraDriver";
		    java.lang.Class jdbcclazz_tDBRow_8 = java.lang.Class.forName(driverClass_tDBRow_8);
		
			String dbProperties_tDBRow_8 = "";
			String url_tDBRow_8 = null;
			if(dbProperties_tDBRow_8 == null || dbProperties_tDBRow_8.trim().length() == 0) {
				url_tDBRow_8 = "jdbc:teradata://" + "192.168.197.128";
			} else {
			    url_tDBRow_8 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
			}
		
					String dbUser_tDBRow_8 = "LDR_DEMO";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_8 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:Wg0EMgtSEWi9TvZZM/Fw2WKYITQmb0Bf1WQmh2qNUfXDbXfW");
        		   	
        	        String dbPwd_tDBRow_8 = decryptedPassword_tDBRow_8;
	        
					
			conn_tDBRow_8 = java.sql.DriverManager.getConnection(url_tDBRow_8,dbUser_tDBRow_8,dbPwd_tDBRow_8);
		
    resourceMap.put("conn_tDBRow_8", conn_tDBRow_8);
					if(conn_tDBRow_8.getAutoCommit()) {
						
				conn_tDBRow_8.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_8 = 10000;
					int commitCounter_tDBRow_8 = 0;
				
        java.sql.Statement stmt_tDBRow_8 = conn_tDBRow_8.createStatement();
        resourceMap.put("stmt_tDBRow_8", stmt_tDBRow_8);

	

 



/**
 * [tDBRow_8 begin ] stop
 */
	
	/**
	 * [tDBRow_8 main ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	

query_tDBRow_8 = "COLLECT STATISTICS COLUMN(CITY_ID),COLUMN(COUNTRY_ID),COLUMN(CITY_NAME) ON CITY_LDR_CORE;";
whetherReject_tDBRow_8 = false;
globalMap.put("tDBRow_8_QUERY",query_tDBRow_8);
try {
		stmt_tDBRow_8.execute(query_tDBRow_8);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_8 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_8++;
		if(commitEvery_tDBRow_8 <= commitCounter_tDBRow_8) {
			
			conn_tDBRow_8.commit();
			
			commitCounter_tDBRow_8=0;
		}
		

 


	tos_count_tDBRow_8++;

/**
 * [tDBRow_8 main ] stop
 */
	
	/**
	 * [tDBRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	

 



/**
 * [tDBRow_8 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	

 



/**
 * [tDBRow_8 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_8 end ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	





	stmt_tDBRow_8.close();
	resourceMap.remove("stmt_tDBRow_8");
    resourceMap.put("statementClosed_tDBRow_8", true);
		if(commitEvery_tDBRow_8>commitCounter_tDBRow_8){

			
			conn_tDBRow_8.commit();
			

			commitCounter_tDBRow_8=0;

		}
	

	
	
			conn_tDBRow_8.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			

 

ok_Hash.put("tDBRow_8", true);
end_Hash.put("tDBRow_8", System.currentTimeMillis());




/**
 * [tDBRow_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_8 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_8") == null) {
            java.sql.Statement stmtToClose_tDBRow_8 = null;
            if ((stmtToClose_tDBRow_8 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_8")) != null) {
                stmtToClose_tDBRow_8.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_8") == null){
            java.sql.Connection ctn_tDBRow_8 = null;
            if((ctn_tDBRow_8 = (java.sql.Connection)resourceMap.get("conn_tDBRow_8")) != null){
                try {
                    ctn_tDBRow_8.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_8) {
                    String errorMessage_tDBRow_8 = "failed to close the connection in tDBRow_8 :" + sqlEx_tDBRow_8.getMessage();
                    System.err.println(errorMessage_tDBRow_8);
                }
            }
        }
    }
 



/**
 * [tDBRow_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_8_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_9", false);
		start_Hash.put("tDBRow_9", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_9";

	
		int tos_count_tDBRow_9 = 0;
		




	java.sql.Connection conn_tDBRow_9 = null;
	String query_tDBRow_9 = "";
	boolean whetherReject_tDBRow_9 = false;
			String driverClass_tDBRow_9 = "com.teradata.jdbc.TeraDriver";
		    java.lang.Class jdbcclazz_tDBRow_9 = java.lang.Class.forName(driverClass_tDBRow_9);
		
			String dbProperties_tDBRow_9 = "";
			String url_tDBRow_9 = null;
			if(dbProperties_tDBRow_9 == null || dbProperties_tDBRow_9.trim().length() == 0) {
				url_tDBRow_9 = "jdbc:teradata://" + "192.168.197.128";
			} else {
			    url_tDBRow_9 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
			}
		
					String dbUser_tDBRow_9 = "LDR_DEMO";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_9 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:aungowxPVyHVYSlicnf6MArhjxczFRZ2pjOjXfj3CvAbj9+U");
        		   	
        	        String dbPwd_tDBRow_9 = decryptedPassword_tDBRow_9;
	        
					
			conn_tDBRow_9 = java.sql.DriverManager.getConnection(url_tDBRow_9,dbUser_tDBRow_9,dbPwd_tDBRow_9);
		
    resourceMap.put("conn_tDBRow_9", conn_tDBRow_9);
					if(conn_tDBRow_9.getAutoCommit()) {
						
				conn_tDBRow_9.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_9 = 10000;
					int commitCounter_tDBRow_9 = 0;
				
        java.sql.Statement stmt_tDBRow_9 = conn_tDBRow_9.createStatement();
        resourceMap.put("stmt_tDBRow_9", stmt_tDBRow_9);

	

 



/**
 * [tDBRow_9 begin ] stop
 */
	
	/**
	 * [tDBRow_9 main ] start
	 */

	

	
	
	currentComponent="tDBRow_9";

	

query_tDBRow_9 = "COLLECT STATISTICS COLUMN(COUNTRY_ID),COLUMN(COUNTRY_NAME) ON COUNTRY_LDR_CORE;";
whetherReject_tDBRow_9 = false;
globalMap.put("tDBRow_9_QUERY",query_tDBRow_9);
try {
		stmt_tDBRow_9.execute(query_tDBRow_9);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_9 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_9++;
		if(commitEvery_tDBRow_9 <= commitCounter_tDBRow_9) {
			
			conn_tDBRow_9.commit();
			
			commitCounter_tDBRow_9=0;
		}
		

 


	tos_count_tDBRow_9++;

/**
 * [tDBRow_9 main ] stop
 */
	
	/**
	 * [tDBRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_9";

	

 



/**
 * [tDBRow_9 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_9";

	

 



/**
 * [tDBRow_9 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_9 end ] start
	 */

	

	
	
	currentComponent="tDBRow_9";

	





	stmt_tDBRow_9.close();
	resourceMap.remove("stmt_tDBRow_9");
    resourceMap.put("statementClosed_tDBRow_9", true);
		if(commitEvery_tDBRow_9>commitCounter_tDBRow_9){

			
			conn_tDBRow_9.commit();
			

			commitCounter_tDBRow_9=0;

		}
	

	
	
			conn_tDBRow_9.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			

 

ok_Hash.put("tDBRow_9", true);
end_Hash.put("tDBRow_9", System.currentTimeMillis());




/**
 * [tDBRow_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_9 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_9";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_9") == null) {
            java.sql.Statement stmtToClose_tDBRow_9 = null;
            if ((stmtToClose_tDBRow_9 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_9")) != null) {
                stmtToClose_tDBRow_9.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_9") == null){
            java.sql.Connection ctn_tDBRow_9 = null;
            if((ctn_tDBRow_9 = (java.sql.Connection)resourceMap.get("conn_tDBRow_9")) != null){
                try {
                    ctn_tDBRow_9.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_9) {
                    String errorMessage_tDBRow_9 = "failed to close the connection in tDBRow_9 :" + sqlEx_tDBRow_9.getMessage();
                    System.err.println(errorMessage_tDBRow_9);
                }
            }
        }
    }
 



/**
 * [tDBRow_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_9_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_10", false);
		start_Hash.put("tDBRow_10", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_10";

	
		int tos_count_tDBRow_10 = 0;
		




	java.sql.Connection conn_tDBRow_10 = null;
	String query_tDBRow_10 = "";
	boolean whetherReject_tDBRow_10 = false;
			String driverClass_tDBRow_10 = "com.teradata.jdbc.TeraDriver";
		    java.lang.Class jdbcclazz_tDBRow_10 = java.lang.Class.forName(driverClass_tDBRow_10);
		
			String dbProperties_tDBRow_10 = "";
			String url_tDBRow_10 = null;
			if(dbProperties_tDBRow_10 == null || dbProperties_tDBRow_10.trim().length() == 0) {
				url_tDBRow_10 = "jdbc:teradata://" + "192.168.197.128";
			} else {
			    url_tDBRow_10 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
			}
		
					String dbUser_tDBRow_10 = "LDR_DEMO";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_10 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:f3R5VTc8HUqaS04EK/gevF7sZZqaNCVmbVpopKPneDqvQ576");
        		   	
        	        String dbPwd_tDBRow_10 = decryptedPassword_tDBRow_10;
	        
					
			conn_tDBRow_10 = java.sql.DriverManager.getConnection(url_tDBRow_10,dbUser_tDBRow_10,dbPwd_tDBRow_10);
		
    resourceMap.put("conn_tDBRow_10", conn_tDBRow_10);
					if(conn_tDBRow_10.getAutoCommit()) {
						
				conn_tDBRow_10.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_10 = 10000;
					int commitCounter_tDBRow_10 = 0;
				
        java.sql.Statement stmt_tDBRow_10 = conn_tDBRow_10.createStatement();
        resourceMap.put("stmt_tDBRow_10", stmt_tDBRow_10);

	

 



/**
 * [tDBRow_10 begin ] stop
 */
	
	/**
	 * [tDBRow_10 main ] start
	 */

	

	
	
	currentComponent="tDBRow_10";

	

query_tDBRow_10 = "COLLECT STATISTICS COLUMN(ACCOUNT_ID) ON ACCOUNT_BRANCH_JI;"




;
whetherReject_tDBRow_10 = false;
globalMap.put("tDBRow_10_QUERY",query_tDBRow_10);
try {
		stmt_tDBRow_10.execute(query_tDBRow_10);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_10 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_10++;
		if(commitEvery_tDBRow_10 <= commitCounter_tDBRow_10) {
			
			conn_tDBRow_10.commit();
			
			commitCounter_tDBRow_10=0;
		}
		

 


	tos_count_tDBRow_10++;

/**
 * [tDBRow_10 main ] stop
 */
	
	/**
	 * [tDBRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_10";

	

 



/**
 * [tDBRow_10 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_10";

	

 



/**
 * [tDBRow_10 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_10 end ] start
	 */

	

	
	
	currentComponent="tDBRow_10";

	





	stmt_tDBRow_10.close();
	resourceMap.remove("stmt_tDBRow_10");
    resourceMap.put("statementClosed_tDBRow_10", true);
		if(commitEvery_tDBRow_10>commitCounter_tDBRow_10){

			
			conn_tDBRow_10.commit();
			

			commitCounter_tDBRow_10=0;

		}
	

	
	
			conn_tDBRow_10.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			

 

ok_Hash.put("tDBRow_10", true);
end_Hash.put("tDBRow_10", System.currentTimeMillis());




/**
 * [tDBRow_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_10 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_10";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_10") == null) {
            java.sql.Statement stmtToClose_tDBRow_10 = null;
            if ((stmtToClose_tDBRow_10 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_10")) != null) {
                stmtToClose_tDBRow_10.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_10") == null){
            java.sql.Connection ctn_tDBRow_10 = null;
            if((ctn_tDBRow_10 = (java.sql.Connection)resourceMap.get("conn_tDBRow_10")) != null){
                try {
                    ctn_tDBRow_10.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_10) {
                    String errorMessage_tDBRow_10 = "failed to close the connection in tDBRow_10 :" + sqlEx_tDBRow_10.getMessage();
                    System.err.println(errorMessage_tDBRow_10);
                }
            }
        }
    }
 



/**
 * [tDBRow_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_10_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_11", false);
		start_Hash.put("tDBRow_11", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_11";

	
		int tos_count_tDBRow_11 = 0;
		




	java.sql.Connection conn_tDBRow_11 = null;
	String query_tDBRow_11 = "";
	boolean whetherReject_tDBRow_11 = false;
			String driverClass_tDBRow_11 = "com.teradata.jdbc.TeraDriver";
		    java.lang.Class jdbcclazz_tDBRow_11 = java.lang.Class.forName(driverClass_tDBRow_11);
		
			String dbProperties_tDBRow_11 = "";
			String url_tDBRow_11 = null;
			if(dbProperties_tDBRow_11 == null || dbProperties_tDBRow_11.trim().length() == 0) {
				url_tDBRow_11 = "jdbc:teradata://" + "192.168.197.128";
			} else {
			    url_tDBRow_11 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
			}
		
					String dbUser_tDBRow_11 = "LDR_DEMO";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_11 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:grvvrCdlCpdoRACEZgm361jwZ1mTch68CCCOOLxFd1kN6ixO");
        		   	
        	        String dbPwd_tDBRow_11 = decryptedPassword_tDBRow_11;
	        
					
			conn_tDBRow_11 = java.sql.DriverManager.getConnection(url_tDBRow_11,dbUser_tDBRow_11,dbPwd_tDBRow_11);
		
    resourceMap.put("conn_tDBRow_11", conn_tDBRow_11);
					if(conn_tDBRow_11.getAutoCommit()) {
						
				conn_tDBRow_11.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_11 = 10000;
					int commitCounter_tDBRow_11 = 0;
				
        java.sql.Statement stmt_tDBRow_11 = conn_tDBRow_11.createStatement();
        resourceMap.put("stmt_tDBRow_11", stmt_tDBRow_11);

	

 



/**
 * [tDBRow_11 begin ] stop
 */
	
	/**
	 * [tDBRow_11 main ] start
	 */

	

	
	
	currentComponent="tDBRow_11";

	

query_tDBRow_11 = "COLLECT STATISTICS COLUMN(ADDRESS_ID) ON ADDRESS_SJI;"

;
whetherReject_tDBRow_11 = false;
globalMap.put("tDBRow_11_QUERY",query_tDBRow_11);
try {
		stmt_tDBRow_11.execute(query_tDBRow_11);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_11 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_11++;
		if(commitEvery_tDBRow_11 <= commitCounter_tDBRow_11) {
			
			conn_tDBRow_11.commit();
			
			commitCounter_tDBRow_11=0;
		}
		

 


	tos_count_tDBRow_11++;

/**
 * [tDBRow_11 main ] stop
 */
	
	/**
	 * [tDBRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_11";

	

 



/**
 * [tDBRow_11 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_11";

	

 



/**
 * [tDBRow_11 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_11 end ] start
	 */

	

	
	
	currentComponent="tDBRow_11";

	





	stmt_tDBRow_11.close();
	resourceMap.remove("stmt_tDBRow_11");
    resourceMap.put("statementClosed_tDBRow_11", true);
		if(commitEvery_tDBRow_11>commitCounter_tDBRow_11){

			
			conn_tDBRow_11.commit();
			

			commitCounter_tDBRow_11=0;

		}
	

	
	
			conn_tDBRow_11.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			

 

ok_Hash.put("tDBRow_11", true);
end_Hash.put("tDBRow_11", System.currentTimeMillis());




/**
 * [tDBRow_11 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_11 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_11";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_11") == null) {
            java.sql.Statement stmtToClose_tDBRow_11 = null;
            if ((stmtToClose_tDBRow_11 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_11")) != null) {
                stmtToClose_tDBRow_11.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_11") == null){
            java.sql.Connection ctn_tDBRow_11 = null;
            if((ctn_tDBRow_11 = (java.sql.Connection)resourceMap.get("conn_tDBRow_11")) != null){
                try {
                    ctn_tDBRow_11.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_11) {
                    String errorMessage_tDBRow_11 = "failed to close the connection in tDBRow_11 :" + sqlEx_tDBRow_11.getMessage();
                    System.err.println(errorMessage_tDBRow_11);
                }
            }
        }
    }
 



/**
 * [tDBRow_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_11_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_12", false);
		start_Hash.put("tDBRow_12", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_12";

	
		int tos_count_tDBRow_12 = 0;
		




	java.sql.Connection conn_tDBRow_12 = null;
	String query_tDBRow_12 = "";
	boolean whetherReject_tDBRow_12 = false;
			String driverClass_tDBRow_12 = "com.teradata.jdbc.TeraDriver";
		    java.lang.Class jdbcclazz_tDBRow_12 = java.lang.Class.forName(driverClass_tDBRow_12);
		
			String dbProperties_tDBRow_12 = "";
			String url_tDBRow_12 = null;
			if(dbProperties_tDBRow_12 == null || dbProperties_tDBRow_12.trim().length() == 0) {
				url_tDBRow_12 = "jdbc:teradata://" + "192.168.197.128";
			} else {
			    url_tDBRow_12 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
			}
		
					String dbUser_tDBRow_12 = "LDR_DEMO";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_12 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:W13a3tJ67pbh0efihB10d+zLSq2skhFJMAV6tH0q/4LDcQX3");
        		   	
        	        String dbPwd_tDBRow_12 = decryptedPassword_tDBRow_12;
	        
					
			conn_tDBRow_12 = java.sql.DriverManager.getConnection(url_tDBRow_12,dbUser_tDBRow_12,dbPwd_tDBRow_12);
		
    resourceMap.put("conn_tDBRow_12", conn_tDBRow_12);
					if(conn_tDBRow_12.getAutoCommit()) {
						
				conn_tDBRow_12.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_12 = 10000;
					int commitCounter_tDBRow_12 = 0;
				
        java.sql.Statement stmt_tDBRow_12 = conn_tDBRow_12.createStatement();
        resourceMap.put("stmt_tDBRow_12", stmt_tDBRow_12);

	

 



/**
 * [tDBRow_12 begin ] stop
 */
	
	/**
	 * [tDBRow_12 main ] start
	 */

	

	
	
	currentComponent="tDBRow_12";

	

query_tDBRow_12 = "COLLECT STATISTICS COLUMN(TRANSACTION_ID) ON TRANSACTION_ACCOUNT_SJI;"

;
whetherReject_tDBRow_12 = false;
globalMap.put("tDBRow_12_QUERY",query_tDBRow_12);
try {
		stmt_tDBRow_12.execute(query_tDBRow_12);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_12 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_12++;
		if(commitEvery_tDBRow_12 <= commitCounter_tDBRow_12) {
			
			conn_tDBRow_12.commit();
			
			commitCounter_tDBRow_12=0;
		}
		

 


	tos_count_tDBRow_12++;

/**
 * [tDBRow_12 main ] stop
 */
	
	/**
	 * [tDBRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_12";

	

 



/**
 * [tDBRow_12 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_12";

	

 



/**
 * [tDBRow_12 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_12 end ] start
	 */

	

	
	
	currentComponent="tDBRow_12";

	





	stmt_tDBRow_12.close();
	resourceMap.remove("stmt_tDBRow_12");
    resourceMap.put("statementClosed_tDBRow_12", true);
		if(commitEvery_tDBRow_12>commitCounter_tDBRow_12){

			
			conn_tDBRow_12.commit();
			

			commitCounter_tDBRow_12=0;

		}
	

	
	
			conn_tDBRow_12.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			

 

ok_Hash.put("tDBRow_12", true);
end_Hash.put("tDBRow_12", System.currentTimeMillis());




/**
 * [tDBRow_12 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_12 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_12";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_12") == null) {
            java.sql.Statement stmtToClose_tDBRow_12 = null;
            if ((stmtToClose_tDBRow_12 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_12")) != null) {
                stmtToClose_tDBRow_12.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_12") == null){
            java.sql.Connection ctn_tDBRow_12 = null;
            if((ctn_tDBRow_12 = (java.sql.Connection)resourceMap.get("conn_tDBRow_12")) != null){
                try {
                    ctn_tDBRow_12.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_12) {
                    String errorMessage_tDBRow_12 = "failed to close the connection in tDBRow_12 :" + sqlEx_tDBRow_12.getMessage();
                    System.err.println(errorMessage_tDBRow_12);
                }
            }
        }
    }
 



/**
 * [tDBRow_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_12_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_13", false);
		start_Hash.put("tDBRow_13", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_13";

	
		int tos_count_tDBRow_13 = 0;
		




	java.sql.Connection conn_tDBRow_13 = null;
	String query_tDBRow_13 = "";
	boolean whetherReject_tDBRow_13 = false;
			String driverClass_tDBRow_13 = "com.teradata.jdbc.TeraDriver";
		    java.lang.Class jdbcclazz_tDBRow_13 = java.lang.Class.forName(driverClass_tDBRow_13);
		
			String dbProperties_tDBRow_13 = "";
			String url_tDBRow_13 = null;
			if(dbProperties_tDBRow_13 == null || dbProperties_tDBRow_13.trim().length() == 0) {
				url_tDBRow_13 = "jdbc:teradata://" + "192.168.197.128";
			} else {
			    url_tDBRow_13 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
			}
		
					String dbUser_tDBRow_13 = "LDR_DEMO";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_13 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:2E/S9WVa4LQBpdtpTDoQJQ9YAh+I3mWAmMRqnc80pgYnS49O");
        		   	
        	        String dbPwd_tDBRow_13 = decryptedPassword_tDBRow_13;
	        
					
			conn_tDBRow_13 = java.sql.DriverManager.getConnection(url_tDBRow_13,dbUser_tDBRow_13,dbPwd_tDBRow_13);
		
    resourceMap.put("conn_tDBRow_13", conn_tDBRow_13);
					if(conn_tDBRow_13.getAutoCommit()) {
						
				conn_tDBRow_13.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_13 = 10000;
					int commitCounter_tDBRow_13 = 0;
				
        java.sql.Statement stmt_tDBRow_13 = conn_tDBRow_13.createStatement();
        resourceMap.put("stmt_tDBRow_13", stmt_tDBRow_13);

	

 



/**
 * [tDBRow_13 begin ] stop
 */
	
	/**
	 * [tDBRow_13 main ] start
	 */

	

	
	
	currentComponent="tDBRow_13";

	

query_tDBRow_13 = "COLLECT STATISTICS COLUMN(TRANSACTION_ID) ON TRANSACTION_ACCOUNT_DATETIME;"

;
whetherReject_tDBRow_13 = false;
globalMap.put("tDBRow_13_QUERY",query_tDBRow_13);
try {
		stmt_tDBRow_13.execute(query_tDBRow_13);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_13 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_13++;
		if(commitEvery_tDBRow_13 <= commitCounter_tDBRow_13) {
			
			conn_tDBRow_13.commit();
			
			commitCounter_tDBRow_13=0;
		}
		

 


	tos_count_tDBRow_13++;

/**
 * [tDBRow_13 main ] stop
 */
	
	/**
	 * [tDBRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_13";

	

 



/**
 * [tDBRow_13 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_13";

	

 



/**
 * [tDBRow_13 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_13 end ] start
	 */

	

	
	
	currentComponent="tDBRow_13";

	





	stmt_tDBRow_13.close();
	resourceMap.remove("stmt_tDBRow_13");
    resourceMap.put("statementClosed_tDBRow_13", true);
		if(commitEvery_tDBRow_13>commitCounter_tDBRow_13){

			
			conn_tDBRow_13.commit();
			

			commitCounter_tDBRow_13=0;

		}
	

	
	
			conn_tDBRow_13.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			

 

ok_Hash.put("tDBRow_13", true);
end_Hash.put("tDBRow_13", System.currentTimeMillis());




/**
 * [tDBRow_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_13 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_13";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_13") == null) {
            java.sql.Statement stmtToClose_tDBRow_13 = null;
            if ((stmtToClose_tDBRow_13 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_13")) != null) {
                stmtToClose_tDBRow_13.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_13") == null){
            java.sql.Connection ctn_tDBRow_13 = null;
            if((ctn_tDBRow_13 = (java.sql.Connection)resourceMap.get("conn_tDBRow_13")) != null){
                try {
                    ctn_tDBRow_13.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_13) {
                    String errorMessage_tDBRow_13 = "failed to close the connection in tDBRow_13 :" + sqlEx_tDBRow_13.getMessage();
                    System.err.println(errorMessage_tDBRow_13);
                }
            }
        }
    }
 



/**
 * [tDBRow_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_13_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final STATS_JOB STATS_JOBClass = new STATS_JOB();

        int exitCode = STATS_JOBClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = STATS_JOB.class.getClassLoader().getResourceAsStream("demo_staging_finance/stats_job_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = STATS_JOB.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBRow_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_1) {
globalMap.put("tDBRow_1_SUBPROCESS_STATE", -1);

e_tDBRow_1.printStackTrace();

}
try {
errorCode = null;tDBRow_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_2) {
globalMap.put("tDBRow_2_SUBPROCESS_STATE", -1);

e_tDBRow_2.printStackTrace();

}
try {
errorCode = null;tDBRow_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_3) {
globalMap.put("tDBRow_3_SUBPROCESS_STATE", -1);

e_tDBRow_3.printStackTrace();

}
try {
errorCode = null;tDBRow_4Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_4) {
globalMap.put("tDBRow_4_SUBPROCESS_STATE", -1);

e_tDBRow_4.printStackTrace();

}
try {
errorCode = null;tDBRow_5Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_5) {
globalMap.put("tDBRow_5_SUBPROCESS_STATE", -1);

e_tDBRow_5.printStackTrace();

}
try {
errorCode = null;tDBRow_6Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_6) {
globalMap.put("tDBRow_6_SUBPROCESS_STATE", -1);

e_tDBRow_6.printStackTrace();

}
try {
errorCode = null;tDBRow_7Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_7) {
globalMap.put("tDBRow_7_SUBPROCESS_STATE", -1);

e_tDBRow_7.printStackTrace();

}
try {
errorCode = null;tDBRow_8Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_8) {
globalMap.put("tDBRow_8_SUBPROCESS_STATE", -1);

e_tDBRow_8.printStackTrace();

}
try {
errorCode = null;tDBRow_9Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_9) {
globalMap.put("tDBRow_9_SUBPROCESS_STATE", -1);

e_tDBRow_9.printStackTrace();

}
try {
errorCode = null;tDBRow_10Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_10) {
globalMap.put("tDBRow_10_SUBPROCESS_STATE", -1);

e_tDBRow_10.printStackTrace();

}
try {
errorCode = null;tDBRow_11Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_11) {
globalMap.put("tDBRow_11_SUBPROCESS_STATE", -1);

e_tDBRow_11.printStackTrace();

}
try {
errorCode = null;tDBRow_12Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_12) {
globalMap.put("tDBRow_12_SUBPROCESS_STATE", -1);

e_tDBRow_12.printStackTrace();

}
try {
errorCode = null;tDBRow_13Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBRow_13) {
globalMap.put("tDBRow_13_SUBPROCESS_STATE", -1);

e_tDBRow_13.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : STATS_JOB");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     110952 characters generated by Talend Open Studio for Data Integration 
 *     on the January 29, 2021 3:18:57 PM PKT
 ************************************************************************************************/