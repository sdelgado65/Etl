// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package demo_staging_finance.contact_account_branch_iud_ldr_core_scd_2_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaFlex_1
	//import java.util.List;

	//the import part of tJavaFlex_3
	//import java.util.List;

	//the import part of tJavaFlex_2
	//import java.util.List;

	//the import part of tJavaFlex_4
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Contact_Account_Branch_IUD_LDR_CORE_SCD_2 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Contact_Account_Branch_IUD_LDR_CORE_SCD_2 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Contact_Account_Branch_IUD_LDR_CORE_SCD_2";
	private final String projectName = "DEMO_STAGING_FINANCE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Contact_Account_Branch_IUD_LDR_CORE_SCD_2.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Contact_Account_Branch_IUD_LDR_CORE_SCD_2.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBSCD_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBSCD_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public int Branch_Code;

				public int getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public int Account_ID;

				public int getAccount_ID () {
					return this.Account_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Contact_ID;
						
							result = prime * result + (int) this.Account_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.Contact_ID != other.Contact_ID)
							return false;
					
						if (this.Account_ID != other.Account_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.IUD = this.IUD;
	            other.Contact_ID = this.Contact_ID;
	            other.Branch_Code = this.Branch_Code;
	            other.Account_ID = this.Account_ID;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.Contact_ID = this.Contact_ID;
	            	other.Account_ID = this.Account_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
			        this.Branch_Code = dis.readInt();
					
			        this.Account_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// int
				
		            	dos.writeInt(this.Branch_Code);
					
					// int
				
		            	dos.writeInt(this.Account_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Branch_Code="+String.valueOf(Branch_Code));
		sb.append(",Account_ID="+String.valueOf(Account_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Contact_ID, other.Contact_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Account_ID, other.Account_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public int Branch_Code;

				public int getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public int Account_ID;

				public int getAccount_ID () {
					return this.Account_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Contact_ID;
						
							result = prime * result + (int) this.Account_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.Contact_ID != other.Contact_ID)
							return false;
					
						if (this.Account_ID != other.Account_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.IUD = this.IUD;
	            other.Contact_ID = this.Contact_ID;
	            other.Branch_Code = this.Branch_Code;
	            other.Account_ID = this.Account_ID;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.Contact_ID = this.Contact_ID;
	            	other.Account_ID = this.Account_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
			        this.Branch_Code = dis.readInt();
					
			        this.Account_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// int
				
		            	dos.writeInt(this.Branch_Code);
					
					// int
				
		            	dos.writeInt(this.Account_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Branch_Code="+String.valueOf(Branch_Code));
		sb.append(",Account_ID="+String.valueOf(Account_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Contact_ID, other.Contact_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Account_ID, other.Account_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public int Branch_Code;

				public int getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public int Account_ID;

				public int getAccount_ID () {
					return this.Account_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Contact_ID;
						
							result = prime * result + (int) this.Account_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out1Struct other = (out1Struct) obj;
		
						if (this.Contact_ID != other.Contact_ID)
							return false;
					
						if (this.Account_ID != other.Account_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(out1Struct other) {

		other.IUD = this.IUD;
	            other.Contact_ID = this.Contact_ID;
	            other.Branch_Code = this.Branch_Code;
	            other.Account_ID = this.Account_ID;
	            
	}

	public void copyKeysDataTo(out1Struct other) {

		other.Contact_ID = this.Contact_ID;
	            	other.Account_ID = this.Account_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
			        this.Branch_Code = dis.readInt();
					
			        this.Account_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// int
				
		            	dos.writeInt(this.Branch_Code);
					
					// int
				
		            	dos.writeInt(this.Account_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Branch_Code="+String.valueOf(Branch_Code));
		sb.append(",Account_ID="+String.valueOf(Account_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Contact_ID, other.Contact_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Account_ID, other.Account_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public int Branch_Code;

				public int getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public int Account_ID;

				public int getAccount_ID () {
					return this.Account_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Contact_ID;
						
							result = prime * result + (int) this.Account_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out3Struct other = (out3Struct) obj;
		
						if (this.Contact_ID != other.Contact_ID)
							return false;
					
						if (this.Account_ID != other.Account_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(out3Struct other) {

		other.IUD = this.IUD;
	            other.Contact_ID = this.Contact_ID;
	            other.Branch_Code = this.Branch_Code;
	            other.Account_ID = this.Account_ID;
	            
	}

	public void copyKeysDataTo(out3Struct other) {

		other.Contact_ID = this.Contact_ID;
	            	other.Account_ID = this.Account_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
			        this.Branch_Code = dis.readInt();
					
			        this.Account_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// int
				
		            	dos.writeInt(this.Branch_Code);
					
					// int
				
		            	dos.writeInt(this.Account_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Branch_Code="+String.valueOf(Branch_Code));
		sb.append(",Account_ID="+String.valueOf(Account_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Contact_ID, other.Contact_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Account_ID, other.Account_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];

	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public int Branch_Code;

				public int getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public int Account_ID;

				public int getAccount_ID () {
					return this.Account_ID;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
			        this.Branch_Code = dis.readInt();
					
			        this.Account_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// int
				
		            	dos.writeInt(this.Branch_Code);
					
					// int
				
		            	dos.writeInt(this.Account_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Branch_Code="+String.valueOf(Branch_Code));
		sb.append(",Account_ID="+String.valueOf(Account_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];

	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public int Branch_Code;

				public int getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public int Account_ID;

				public int getAccount_ID () {
					return this.Account_ID;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
			        this.Branch_Code = dis.readInt();
					
			        this.Account_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// int
				
		            	dos.writeInt(this.Branch_Code);
					
					// int
				
		            	dos.writeInt(this.Account_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Branch_Code="+String.valueOf(Branch_Code));
		sb.append(",Account_ID="+String.valueOf(Account_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);

		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
row3Struct row3 = new row3Struct();
out3Struct out3 = new out3Struct();
row9Struct row9 = new row9Struct();






	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "Contact_Account_Branch_LDR";
boolean whetherReject_tDBOutput_1 = false;
   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;



        int updateKeyCount_tDBOutput_1 = 2;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
    String dbname_tDBOutput_1 = "ldr_demo";
    String driverClass_tDBOutput_1 = "com.teradata.jdbc.TeraDriver";

    java.lang.Class.forName(driverClass_tDBOutput_1);
    String dbProperties_tDBOutput_1 = "";
	String url_tDBOutput_1 = null;
	if(dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
		url_tDBOutput_1 = "jdbc:teradata://" + "192.168.197.128";
	} else {
	    url_tDBOutput_1 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
	}
    String dbUser_tDBOutput_1 = "LDR_DEMO";
 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:eUVHViKSZUfo7KT8s38ML5+nAEU2B/RdfhVQfcNg5H0zNDrh");

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

	
    java.sql.Connection conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);

	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;
String dbschema_tDBOutput_1 = dbname_tDBOutput_1;
if(dbname_tDBOutput_1 == null || dbname_tDBOutput_1.trim().length() == 0) {
    tableName_tDBOutput_1 = "Contact_Account_Branch_LDR";
} else {
    tableName_tDBOutput_1 = dbname_tDBOutput_1 + "\".\"" + "Contact_Account_Branch_LDR";
}
int count_tDBOutput_1=0;
	 conn_tDBOutput_1.commit();
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"IUD\" = ?,\"Branch_Code\" = ? WHERE \"Contact_ID\" = ? AND \"Account_ID\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    


 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tJavaFlex_1 = 0;
		



int nb=0;


 



/**
 * [tJavaFlex_1 begin ] stop
 */





	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

String tableName_tDBOutput_4 = "Contact_Account_Branch_LDR";
boolean whetherReject_tDBOutput_4 = false;
   int batchSize_tDBOutput_4 = 10000;
   int batchSizeCounter_tDBOutput_4=0;



        int updateKeyCount_tDBOutput_4 = 2;
        if(updateKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
    String dbname_tDBOutput_4 = "ldr_demo";
    String driverClass_tDBOutput_4 = "com.teradata.jdbc.TeraDriver";

    java.lang.Class.forName(driverClass_tDBOutput_4);
    String dbProperties_tDBOutput_4 = "";
	String url_tDBOutput_4 = null;
	if(dbProperties_tDBOutput_4 == null || dbProperties_tDBOutput_4.trim().length() == 0) {
		url_tDBOutput_4 = "jdbc:teradata://" + "192.168.197.128";
	} else {
	    url_tDBOutput_4 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
	}
    String dbUser_tDBOutput_4 = "LDR_DEMO";
 
	final String decryptedPassword_tDBOutput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:IwzYdNHmhAXnXvVTqixPvYCk9If1Clemc8men+7VLFusKBxc");

    String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

	
    java.sql.Connection conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4,dbUser_tDBOutput_4,dbPwd_tDBOutput_4);

	resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
        conn_tDBOutput_4.setAutoCommit(false);
        int commitEvery_tDBOutput_4 = 10000;
        int commitCounter_tDBOutput_4 = 0;
String dbschema_tDBOutput_4 = dbname_tDBOutput_4;
if(dbname_tDBOutput_4 == null || dbname_tDBOutput_4.trim().length() == 0) {
    tableName_tDBOutput_4 = "Contact_Account_Branch_LDR";
} else {
    tableName_tDBOutput_4 = dbname_tDBOutput_4 + "\".\"" + "Contact_Account_Branch_LDR";
}
int count_tDBOutput_4=0;
	 conn_tDBOutput_4.commit();
	    String update_tDBOutput_4 = "UPDATE \"" + tableName_tDBOutput_4 + "\" SET \"IUD\" = ?,\"Branch_Code\" = ? WHERE \"Contact_ID\" = ? AND \"Account_ID\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(update_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    


 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tJavaFlex_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_3", false);
		start_Hash.put("tJavaFlex_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tJavaFlex_3 = 0;
		



int row_no_1=0;


 



/**
 * [tJavaFlex_3 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		

    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:uK0MlShsI3V8w2R9+96tERFHTC567wCCHHfdX8MYaDnHujfb");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
			String dbProperties_tDBInput_1 = "";
			String url_tDBInput_1 = null;
			if(dbProperties_tDBInput_1 == null || dbProperties_tDBInput_1.trim().length() == 0) {
				url_tDBInput_1 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_1 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();
                stmt_tDBInput_1.setFetchSize(200000);

		    String dbquery_tDBInput_1 = "SELECT ldr_demo.Contact_Account_Branch_LDR.IUD,\n		ldr_demo.Contact_Account_Branch_LDR.Contact_ID,\n		ldr_demo.Contact_Ac"
+"count_Branch_LDR.Branch_Code,\n		ldr_demo.Contact_Account_Branch_LDR.Account_ID\nFROM	ldr_demo.Contact_Account_Branch_LDR";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.IUD = null;
							} else {
		                          
            row1.IUD = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    row1.IUD = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.Contact_ID = 0;
							} else {
		                          
            row1.Contact_ID = rs_tDBInput_1.getInt(2);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.Branch_Code = 0;
							} else {
		                          
            row1.Branch_Code = rs_tDBInput_1.getInt(3);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.Account_ID = 0;
							} else {
		                          
            row1.Account_ID = rs_tDBInput_1.getInt(4);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					



 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row2__Contact_ID = row1.Contact_ID ;
	                        		    	if(exprKeyValue_row2__Contact_ID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row2HashKey.Contact_ID = (int)(Integer) exprKeyValue_row2__Contact_ID;
                        		    		}
                        		    		
	                        		    	Object exprKeyValue_row2__Account_ID = row1.Account_ID ;
	                        		    	if(exprKeyValue_row2__Account_ID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row2HashKey.Account_ID = (int)(Integer) exprKeyValue_row2__Account_ID;
                        		    		}
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.Contact_ID = '" + row2HashKey.Contact_ID + "', row2.Account_ID = '" + row2HashKey.Account_ID + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out3 = null;
out1 = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'out3'
// # Filter conditions 
if( 

(row1.Branch_Code == row2.Branch_Code) &&  (row1.Contact_ID == row2.Contact_ID)
&& (row1.Account_ID == row2.Account_ID) && row2.DELETE_FLAG == 1 && !row2.END_DATE.equals("9999-01-01 12:00:00.000")

 ) {
out3_tmp.IUD = 1;
out3_tmp.Contact_ID = row1.Contact_ID;
out3_tmp.Branch_Code = row1.Branch_Code;
out3_tmp.Account_ID = row1.Account_ID;
out3 = out3_tmp;
} // closing filter/reject
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'out1'
// # Filter conditions 
if( rejectedInnerJoin_tMap_1 ) {
out1_tmp.IUD = 1;
out1_tmp.Contact_ID = row1.Contact_ID;
out1_tmp.Branch_Code = row1.Branch_Code;
out1_tmp.Account_ID = row1.Account_ID;
out1 = out1_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					


	        				row3.IUD = out1.IUD;
	        				row3.Contact_ID = out1.Contact_ID;
	        				row3.Branch_Code = out1.Branch_Code;
	        				row3.Account_ID = out1.Account_ID;


nb++;

 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */
	
	/**
	 * [tJavaFlex_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					



        whetherReject_tDBOutput_1 = false;
                    if(row3.IUD == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(1, row3.IUD);
}

                    pstmt_tDBOutput_1.setInt(2, row3.Branch_Code);

                    pstmt_tDBOutput_1.setInt(3 + count_tDBOutput_1, row3.Contact_ID);

                    pstmt_tDBOutput_1.setInt(4 + count_tDBOutput_1, row3.Account_ID);

                pstmt_tDBOutput_1.addBatch();
                batchSizeCounter_tDBOutput_1++;
                nb_line_tDBOutput_1++;
            if(!whetherReject_tDBOutput_1) {
            }
                if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
                        batchSizeCounter_tDBOutput_1 = 0;
                        int countSum_tDBOutput_1 = 0;

                        for(int countEach_tDBOutput_1:pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                        }

                            updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch(java.sql.SQLException e_tDBOutput_1){
            java.sql.SQLException e3_tDBOutput_1 = e_tDBOutput_1;
                    boolean isFailure = false;
            while(e_tDBOutput_1 != null){
                if(e_tDBOutput_1.getErrorCode() == -2801){
                    System.out.println(" Message: " + e_tDBOutput_1.getMessage());
                    e_tDBOutput_1.printStackTrace();
                    System.out.println();
                }
                else if(e_tDBOutput_1.getErrorCode() == 1339){
                    isFailure = true;
                }
                else{
                    System.out.println(" Message: " + e_tDBOutput_1.getMessage());
                    e_tDBOutput_1.printStackTrace();
                }
                e_tDBOutput_1 = e_tDBOutput_1.getNextException();
            }
            if(isFailure && e_tDBOutput_1 != null){
                System.out.println(" Message: " + e_tDBOutput_1.getMessage());
                e_tDBOutput_1.printStackTrace();
            }
                System.err.println(e3_tDBOutput_1.getMessage());
                }
              }
                commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                        try {
                                       if (batchSizeCounter_tDBOutput_1 > 0) {
                                           int countSum_tDBOutput_1 = 0;

                                           for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                                               countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                                           }

                                               updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
                                           batchSizeCounter_tDBOutput_1 = 0;
                                       }
                            conn_tDBOutput_1.commit();
                            commitCounter_tDBOutput_1 = 0;
                        }catch(java.sql.SQLException e_tDBOutput_1){
                    java.sql.SQLException e3_tDBOutput_1 = e_tDBOutput_1;
                            boolean isFailure = false;
                    while(e_tDBOutput_1 != null){
                        if(e_tDBOutput_1.getErrorCode() == -2801){
                            System.out.println(" Message: " + e_tDBOutput_1.getMessage());
                            e_tDBOutput_1.printStackTrace();
                            System.out.println();
                        }
                        else if(e_tDBOutput_1.getErrorCode() == 1339){
                            isFailure = true;
                        }
                        else{
                            System.out.println(" Message: " + e_tDBOutput_1.getMessage());
                            e_tDBOutput_1.printStackTrace();
                        }
                        e_tDBOutput_1 = e_tDBOutput_1.getNextException();
                    }
                    if(isFailure && e_tDBOutput_1 != null){
                        System.out.println(" Message: " + e_tDBOutput_1.getMessage());
                        e_tDBOutput_1.printStackTrace();
                    }
                        System.err.println(e3_tDBOutput_1.getMessage());
                        }
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaFlex_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 process_data_end ] stop
 */

} // End of branch "out1"




// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tJavaFlex_3 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out3");
					}
					


	        				row9.IUD = out3.IUD;
	        				row9.Contact_ID = out3.Contact_ID;
	        				row9.Branch_Code = out3.Branch_Code;
	        				row9.Account_ID = out3.Account_ID;


row_no_1++;

 


	tos_count_tJavaFlex_3++;

/**
 * [tJavaFlex_3 main ] stop
 */
	
	/**
	 * [tJavaFlex_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	

 



/**
 * [tJavaFlex_3 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					



        whetherReject_tDBOutput_4 = false;
                    if(row9.IUD == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(1, row9.IUD);
}

                    pstmt_tDBOutput_4.setInt(2, row9.Branch_Code);

                    pstmt_tDBOutput_4.setInt(3 + count_tDBOutput_4, row9.Contact_ID);

                    pstmt_tDBOutput_4.setInt(4 + count_tDBOutput_4, row9.Account_ID);

                pstmt_tDBOutput_4.addBatch();
                batchSizeCounter_tDBOutput_4++;
                nb_line_tDBOutput_4++;
            if(!whetherReject_tDBOutput_4) {
            }
                if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
                        batchSizeCounter_tDBOutput_4 = 0;
                        int countSum_tDBOutput_4 = 0;

                        for(int countEach_tDBOutput_4:pstmt_tDBOutput_4.executeBatch()) {
                            countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
                        }

                            updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
                }catch(java.sql.SQLException e_tDBOutput_4){
            java.sql.SQLException e3_tDBOutput_4 = e_tDBOutput_4;
                    boolean isFailure = false;
            while(e_tDBOutput_4 != null){
                if(e_tDBOutput_4.getErrorCode() == -2801){
                    System.out.println(" Message: " + e_tDBOutput_4.getMessage());
                    e_tDBOutput_4.printStackTrace();
                    System.out.println();
                }
                else if(e_tDBOutput_4.getErrorCode() == 1339){
                    isFailure = true;
                }
                else{
                    System.out.println(" Message: " + e_tDBOutput_4.getMessage());
                    e_tDBOutput_4.printStackTrace();
                }
                e_tDBOutput_4 = e_tDBOutput_4.getNextException();
            }
            if(isFailure && e_tDBOutput_4 != null){
                System.out.println(" Message: " + e_tDBOutput_4.getMessage());
                e_tDBOutput_4.printStackTrace();
            }
                System.err.println(e3_tDBOutput_4.getMessage());
                }
              }
                commitCounter_tDBOutput_4++;
                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
                        try {
                                       if (batchSizeCounter_tDBOutput_4 > 0) {
                                           int countSum_tDBOutput_4 = 0;

                                           for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
                                               countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
                                           }

                                               updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
                                           batchSizeCounter_tDBOutput_4 = 0;
                                       }
                            conn_tDBOutput_4.commit();
                            commitCounter_tDBOutput_4 = 0;
                        }catch(java.sql.SQLException e_tDBOutput_4){
                    java.sql.SQLException e3_tDBOutput_4 = e_tDBOutput_4;
                            boolean isFailure = false;
                    while(e_tDBOutput_4 != null){
                        if(e_tDBOutput_4.getErrorCode() == -2801){
                            System.out.println(" Message: " + e_tDBOutput_4.getMessage());
                            e_tDBOutput_4.printStackTrace();
                            System.out.println();
                        }
                        else if(e_tDBOutput_4.getErrorCode() == 1339){
                            isFailure = true;
                        }
                        else{
                            System.out.println(" Message: " + e_tDBOutput_4.getMessage());
                            e_tDBOutput_4.printStackTrace();
                        }
                        e_tDBOutput_4 = e_tDBOutput_4.getNextException();
                    }
                    if(isFailure && e_tDBOutput_4 != null){
                        System.out.println(" Message: " + e_tDBOutput_4.getMessage());
                        e_tDBOutput_4.printStackTrace();
                    }
                        System.err.println(e3_tDBOutput_4.getMessage());
                        }
                }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tJavaFlex_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	

 



/**
 * [tJavaFlex_3 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	





	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
	    

		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	



globalMap.put("nb_line",nb);
if(nb==0)
{
globalMap.put("hasData0",false);
}
else 
{
globalMap.put("hasData0",true);
}

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());




/**
 * [tJavaFlex_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	




                try {
                    if ( batchSizeCounter_tDBOutput_1 > 0 ) { // do not commit empty batch, this is a jdbc error
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                        }

                            updatedCount_tDBOutput_1 += countSum_tDBOutput_1;

                        }
                //}catch (java.sql.BatchUpdateException e){
                }catch (java.sql.SQLException e){
            java.sql.SQLException e3 = e;
                    boolean isFailure = false;
                    int errorCode = 0;
            String sqlState = "";
            String message = "";
            while(e != null){
                if(e.getErrorCode() == -2801){
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                    System.out.println();
                }
                else if(e.getErrorCode() == 1339){
                    isFailure = true;
                } else{
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                }
                e = e.getNextException();
            }
            if(isFailure && e != null){
                System.out.println("[Message]: " + e.getMessage());
                e.printStackTrace();
            }
                System.err.println(e3.getMessage());
                }

        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            pstmt_tDBOutput_1 = null;
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
            if (commitCounter_tDBOutput_1 > 0) {
                conn_tDBOutput_1.commit();
            }


        conn_tDBOutput_1.close();

        resourceMap.put("finish_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

   			if ((Boolean)globalMap.get("hasData0")) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tDBInput_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tDBOutput_1 end ] stop
 */







	
	/**
	 * [tJavaFlex_3 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	



globalMap.put("nb_line",row_no_1);
if(row_no_1==0)
{
globalMap.put("hasData1",false);
}
else 
{
globalMap.put("hasData1",true);
}

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tJavaFlex_3", true);
end_Hash.put("tJavaFlex_3", System.currentTimeMillis());




/**
 * [tJavaFlex_3 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	




                try {
                    if ( batchSizeCounter_tDBOutput_4 > 0 ) { // do not commit empty batch, this is a jdbc error
                        int countSum_tDBOutput_4 = 0;
                        for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
                            countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
                        }

                            updatedCount_tDBOutput_4 += countSum_tDBOutput_4;

                        }
                //}catch (java.sql.BatchUpdateException e){
                }catch (java.sql.SQLException e){
            java.sql.SQLException e3 = e;
                    boolean isFailure = false;
                    int errorCode = 0;
            String sqlState = "";
            String message = "";
            while(e != null){
                if(e.getErrorCode() == -2801){
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                    System.out.println();
                }
                else if(e.getErrorCode() == 1339){
                    isFailure = true;
                } else{
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                }
                e = e.getNextException();
            }
            if(isFailure && e != null){
                System.out.println("[Message]: " + e.getMessage());
                e.printStackTrace();
            }
                System.err.println(e3.getMessage());
                }

        if(pstmt_tDBOutput_4 != null) {
            pstmt_tDBOutput_4.close();
            pstmt_tDBOutput_4 = null;
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);
            if (commitCounter_tDBOutput_4 > 0) {
                conn_tDBOutput_4.commit();
            }


        conn_tDBOutput_4.close();

        resourceMap.put("finish_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBInput_8Process(globalMap);
   			if ((Boolean)globalMap.get("hasData1")) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tDBInput_7Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tDBOutput_4 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */







	
	/**
	 * [tJavaFlex_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	

 



/**
 * [tJavaFlex_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_4") == null){
            java.sql.Connection ctn_tDBOutput_4 = null;
            if((ctn_tDBOutput_4 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_4")) != null){
                try {
                    ctn_tDBOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_4) {
                    String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :" + sqlEx_tDBOutput_4.getMessage();
                    System.err.println(errorMessage_tDBOutput_4);
                }
            }
        }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		

    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:JXJoeZLYlfSudFJr7zacuWHZuibzDyWr8iPAdZ5g5prJoVRA");
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
			String dbProperties_tDBInput_3 = "";
			String url_tDBInput_3 = null;
			if(dbProperties_tDBInput_3 == null || dbProperties_tDBInput_3.trim().length() == 0) {
				url_tDBInput_3 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_3 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();
                stmt_tDBInput_3.setFetchSize(200000);

		    String dbquery_tDBInput_3 = "INSERT INTO CONTACT_ACCOUNT_BRANCH_LDR_CORE (CONTACT_ID,BRANCH_CODE,ACCOUNT_ID,ST_DATE,END_DATE,DELETE_FLAG)\nSELECT Co"
+"ntact_Account_Branch_LDR.Contact_ID,Contact_Account_Branch_LDR.Branch_Code,Contact_Account_Branch_LDR.Account_ID,\nCURRE"
+"NT_TIMESTAMP(3),'9999-01-01 12:00:00.000',0 \nFROM Contact_Account_Branch_LDR\nWHERE IUD = 1";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        



 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	





	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
	if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
	    

		
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);


 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public int Branch_Code;

				public int getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public int Account_ID;

				public int getAccount_ID () {
					return this.Account_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Contact_ID;
						
							result = prime * result + (int) this.Account_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.Contact_ID != other.Contact_ID)
							return false;
					
						if (this.Account_ID != other.Account_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.IUD = this.IUD;
	            other.Contact_ID = this.Contact_ID;
	            other.Branch_Code = this.Branch_Code;
	            other.Account_ID = this.Account_ID;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.Contact_ID = this.Contact_ID;
	            	other.Account_ID = this.Account_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
			        this.Branch_Code = dis.readInt();
					
			        this.Account_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// int
				
		            	dos.writeInt(this.Branch_Code);
					
					// int
				
		            	dos.writeInt(this.Account_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Branch_Code="+String.valueOf(Branch_Code));
		sb.append(",Account_ID="+String.valueOf(Account_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Contact_ID, other.Contact_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Account_ID, other.Account_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];

	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public int Branch_Code;

				public int getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public int Account_ID;

				public int getAccount_ID () {
					return this.Account_ID;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
			        this.Branch_Code = dis.readInt();
					
			        this.Account_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// int
				
		            	dos.writeInt(this.Branch_Code);
					
					// int
				
		            	dos.writeInt(this.Account_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Branch_Code="+String.valueOf(Branch_Code));
		sb.append(",Account_ID="+String.valueOf(Account_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row4Struct row4 = new row4Struct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

String tableName_tDBOutput_2 = "Contact_Account_Branch_LDR";
boolean whetherReject_tDBOutput_2 = false;
   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;



        int updateKeyCount_tDBOutput_2 = 2;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
    String dbname_tDBOutput_2 = "ldr_demo";
    String driverClass_tDBOutput_2 = "com.teradata.jdbc.TeraDriver";

    java.lang.Class.forName(driverClass_tDBOutput_2);
    String dbProperties_tDBOutput_2 = "";
	String url_tDBOutput_2 = null;
	if(dbProperties_tDBOutput_2 == null || dbProperties_tDBOutput_2.trim().length() == 0) {
		url_tDBOutput_2 = "jdbc:teradata://" + "192.168.197.128";
	} else {
	    url_tDBOutput_2 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
	}
    String dbUser_tDBOutput_2 = "LDR_DEMO";
 
	final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:XjYqlQbFlQTy3DZSLnf26k0RxCaf143IqNR+ZaQ87zZMh2y9");

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

	
    java.sql.Connection conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);

	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;
String dbschema_tDBOutput_2 = dbname_tDBOutput_2;
if(dbname_tDBOutput_2 == null || dbname_tDBOutput_2.trim().length() == 0) {
    tableName_tDBOutput_2 = "Contact_Account_Branch_LDR";
} else {
    tableName_tDBOutput_2 = dbname_tDBOutput_2 + "\".\"" + "Contact_Account_Branch_LDR";
}
int count_tDBOutput_2=0;
	 conn_tDBOutput_2.commit();
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"IUD\" = ?,\"Branch_Code\" = ? WHERE \"Contact_ID\" = ? AND \"Account_ID\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    


 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tJavaFlex_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_2", false);
		start_Hash.put("tJavaFlex_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tJavaFlex_2 = 0;
		



int row_no=0;


 



/**
 * [tJavaFlex_2 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		

    
	
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_8 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:GcGaWmp07Ek8bKean/NsrOTwmkcAfqiQeuP7y51RtC+nffiw");
				
				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;
				
			String dbProperties_tDBInput_8 = "";
			String url_tDBInput_8 = null;
			if(dbProperties_tDBInput_8 == null || dbProperties_tDBInput_8.trim().length() == 0) {
				url_tDBInput_8 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_8 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8,dbUser_tDBInput_8,dbPwd_tDBInput_8);
		        
				
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();
                stmt_tDBInput_8.setFetchSize(200000);

		    String dbquery_tDBInput_8 = "SELECT DISTINCT '2' as IUD ,CL.CONTACT_ID,CL.BRANCH_CODE,CL.ACCOUNT_ID\nFROM CONTACT_ACCOUNT_BRANCH_LDR CL\nINNER JOIN "
+"CONTACT_ACCOUNT_BRANCH_LDR_CORE CLC\nON CL.CONTACT_ID = CLC.CONTACT_ID\nWHERE CL.ACCOUNT_ID = CLC.ACCOUNT_ID\nAND CL.BRA"
+"NCH_CODE <> CLC.BRANCH_CODE"
;
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								row7.IUD = null;
							} else {
		                          
            row7.IUD = rs_tDBInput_8.getInt(1);
            if(rs_tDBInput_8.wasNull()){
                    row7.IUD = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								row7.Contact_ID = 0;
							} else {
		                          
            row7.Contact_ID = rs_tDBInput_8.getInt(2);
            if(rs_tDBInput_8.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 3) {
								row7.Branch_Code = 0;
							} else {
		                          
            row7.Branch_Code = rs_tDBInput_8.getInt(3);
            if(rs_tDBInput_8.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 4) {
								row7.Account_ID = 0;
							} else {
		                          
            row7.Account_ID = rs_tDBInput_8.getInt(4);
            if(rs_tDBInput_8.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					



 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tJavaFlex_2 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					


	        				row4.IUD = row7.IUD;
	        				row4.Contact_ID = row7.Contact_ID;
	        				row4.Branch_Code = row7.Branch_Code;
	        				row4.Account_ID = row7.Account_ID;


row_no++;

 


	tos_count_tJavaFlex_2++;

/**
 * [tJavaFlex_2 main ] stop
 */
	
	/**
	 * [tJavaFlex_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	

 



/**
 * [tJavaFlex_2 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(row4.IUD == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(1, row4.IUD);
}

                    pstmt_tDBOutput_2.setInt(2, row4.Branch_Code);

                    pstmt_tDBOutput_2.setInt(3 + count_tDBOutput_2, row4.Contact_ID);

                    pstmt_tDBOutput_2.setInt(4 + count_tDBOutput_2, row4.Account_ID);

                pstmt_tDBOutput_2.addBatch();
                batchSizeCounter_tDBOutput_2++;
                nb_line_tDBOutput_2++;
            if(!whetherReject_tDBOutput_2) {
            }
                if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
                        batchSizeCounter_tDBOutput_2 = 0;
                        int countSum_tDBOutput_2 = 0;

                        for(int countEach_tDBOutput_2:pstmt_tDBOutput_2.executeBatch()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                        }

                            updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
                }catch(java.sql.SQLException e_tDBOutput_2){
            java.sql.SQLException e3_tDBOutput_2 = e_tDBOutput_2;
                    boolean isFailure = false;
            while(e_tDBOutput_2 != null){
                if(e_tDBOutput_2.getErrorCode() == -2801){
                    System.out.println(" Message: " + e_tDBOutput_2.getMessage());
                    e_tDBOutput_2.printStackTrace();
                    System.out.println();
                }
                else if(e_tDBOutput_2.getErrorCode() == 1339){
                    isFailure = true;
                }
                else{
                    System.out.println(" Message: " + e_tDBOutput_2.getMessage());
                    e_tDBOutput_2.printStackTrace();
                }
                e_tDBOutput_2 = e_tDBOutput_2.getNextException();
            }
            if(isFailure && e_tDBOutput_2 != null){
                System.out.println(" Message: " + e_tDBOutput_2.getMessage());
                e_tDBOutput_2.printStackTrace();
            }
                System.err.println(e3_tDBOutput_2.getMessage());
                }
              }
                commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                        try {
                                       if (batchSizeCounter_tDBOutput_2 > 0) {
                                           int countSum_tDBOutput_2 = 0;

                                           for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
                                               countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                                           }

                                               updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
                                           batchSizeCounter_tDBOutput_2 = 0;
                                       }
                            conn_tDBOutput_2.commit();
                            commitCounter_tDBOutput_2 = 0;
                        }catch(java.sql.SQLException e_tDBOutput_2){
                    java.sql.SQLException e3_tDBOutput_2 = e_tDBOutput_2;
                            boolean isFailure = false;
                    while(e_tDBOutput_2 != null){
                        if(e_tDBOutput_2.getErrorCode() == -2801){
                            System.out.println(" Message: " + e_tDBOutput_2.getMessage());
                            e_tDBOutput_2.printStackTrace();
                            System.out.println();
                        }
                        else if(e_tDBOutput_2.getErrorCode() == 1339){
                            isFailure = true;
                        }
                        else{
                            System.out.println(" Message: " + e_tDBOutput_2.getMessage());
                            e_tDBOutput_2.printStackTrace();
                        }
                        e_tDBOutput_2 = e_tDBOutput_2.getNextException();
                    }
                    if(isFailure && e_tDBOutput_2 != null){
                        System.out.println(" Message: " + e_tDBOutput_2.getMessage());
                        e_tDBOutput_2.printStackTrace();
                    }
                        System.err.println(e3_tDBOutput_2.getMessage());
                        }
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaFlex_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	

 



/**
 * [tJavaFlex_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	





	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
	if(conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {
	    

		
			conn_tDBInput_8.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);


 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tJavaFlex_2 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	



globalMap.put("nb_line",row_no);
if(row_no==0)
{
globalMap.put("hasData2",false);
}
else 
{
globalMap.put("hasData2",true);
}

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tJavaFlex_2", true);
end_Hash.put("tJavaFlex_2", System.currentTimeMillis());




/**
 * [tJavaFlex_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	




                try {
                    if ( batchSizeCounter_tDBOutput_2 > 0 ) { // do not commit empty batch, this is a jdbc error
                        int countSum_tDBOutput_2 = 0;
                        for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                        }

                            updatedCount_tDBOutput_2 += countSum_tDBOutput_2;

                        }
                //}catch (java.sql.BatchUpdateException e){
                }catch (java.sql.SQLException e){
            java.sql.SQLException e3 = e;
                    boolean isFailure = false;
                    int errorCode = 0;
            String sqlState = "";
            String message = "";
            while(e != null){
                if(e.getErrorCode() == -2801){
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                    System.out.println();
                }
                else if(e.getErrorCode() == 1339){
                    isFailure = true;
                } else{
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                }
                e = e.getNextException();
            }
            if(isFailure && e != null){
                System.out.println("[Message]: " + e.getMessage());
                e.printStackTrace();
            }
                System.err.println(e3.getMessage());
                }

        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            pstmt_tDBOutput_2 = null;
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
            if (commitCounter_tDBOutput_2 > 0) {
                conn_tDBOutput_2.commit();
            }


        conn_tDBOutput_2.close();

        resourceMap.put("finish_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());

   			if ((Boolean)globalMap.get("hasData2")) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tDBInput_4Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBInput_5Process(globalMap);



/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tJavaFlex_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	

 



/**
 * [tJavaFlex_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];

	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public int Branch_Code;

				public int getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public int Account_ID;

				public int getAccount_ID () {
					return this.Account_ID;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
			        this.Branch_Code = dis.readInt();
					
			        this.Account_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// int
				
		            	dos.writeInt(this.Branch_Code);
					
					// int
				
		            	dos.writeInt(this.Account_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Branch_Code="+String.valueOf(Branch_Code));
		sb.append(",Account_ID="+String.valueOf(Account_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tDBSCD_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBSCD_1", false);
		start_Hash.put("tDBSCD_1", System.currentTimeMillis());
		
	
	currentComponent="tDBSCD_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tDBSCD_1 = 0;
		



		class SCDSK_tDBSCD_1 {
private int hashCode;
public boolean hashCodeDirty = true;
int Contact_ID;
int Account_ID;
public boolean equals(Object obj) {
if (this == obj) return true;
if (obj == null) return false;
if (getClass() != obj.getClass()) return false;
final SCDSK_tDBSCD_1 other = (SCDSK_tDBSCD_1) obj;
if (this.Contact_ID!= other.Contact_ID)
return false;

if (this.Account_ID!= other.Account_ID)
return false;

return true;
}
public int hashCode() {
if(hashCodeDirty) {
int prime = 31;hashCode = prime * hashCode + Contact_ID;
hashCode = prime * hashCode + Account_ID;
hashCodeDirty = false;
}
return hashCode;
}
}



	class SCDStruct_tDBSCD_1 {
private int Branch_Code;
}


    int nb_line_update_tDBSCD_1 = 0;
    int nb_line_inserted_tDBSCD_1 = 0;
    String tableName_tDBSCD_1 = "Contact_Account_Branch_LDR_CORE";
    String dbName_tDBSCD_1 = "ldr_demo";


        java.lang.Class.forName("com.teradata.jdbc.TeraDriver");


            String connectionString_tDBSCD_1 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";



		 
	final String decryptedPassword_tDBSCD_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:5bInWeh2qQS4irvjtHhwhb5b4naeEkZ4resXtUqBGWOYdFMk");

        java.sql.Connection connection_tDBSCD_1 = java.sql.DriverManager.getConnection(connectionString_tDBSCD_1, "LDR_DEMO", decryptedPassword_tDBSCD_1);
    
        
    java.util.Calendar calendar_tDBSCD_1 = java.util.Calendar.getInstance();
    java.util.Calendar calendarYear0_tDBSCD_1 = java.util.Calendar.getInstance();
    
    calendar_tDBSCD_1.set(1, 0, 1, 0, 0, 0);
    calendarYear0_tDBSCD_1.set(0,0,0,0,0,0);
    
    final java.util.Date dateYear0_tDBSCD_1 = calendarYear0_tDBSCD_1.getTime();
    final long year1_tDBSCD_1 = calendar_tDBSCD_1.getTime().getTime();
    
    calendar_tDBSCD_1.set(10000, 0, 1, 0, 0, 0);
    final long year10000_tDBSCD_1 = calendar_tDBSCD_1.getTime().getTime();
    long date_tDBSCD_1 = 0;
    
    String dateStr_tDBSCD_1 = null;
    String tmpValue_tDBSCD_1 = null;
    

        String search_tDBSCD_1 = "SELECT \"Contact_ID\", \"Account_ID\", \"Branch_Code\" FROM \"" + tableName_tDBSCD_1 + "\" WHERE EXTRACT(YEAR FROM \"END_DATE\") = " + 9999 + "";
        java.sql.Statement statement_tDBSCD_1 = connection_tDBSCD_1.createStatement();
        java.sql.ResultSet resultSet_tDBSCD_1 = statement_tDBSCD_1.executeQuery(search_tDBSCD_1);
        java.util.Map<SCDSK_tDBSCD_1, SCDStruct_tDBSCD_1> cache_tDBSCD_1 = new java.util.HashMap<SCDSK_tDBSCD_1, SCDStruct_tDBSCD_1>();

        while(resultSet_tDBSCD_1.next()) {
            SCDSK_tDBSCD_1 sk_tDBSCD_1 = new SCDSK_tDBSCD_1();
            SCDStruct_tDBSCD_1 row_tDBSCD_1 = new SCDStruct_tDBSCD_1();


                    if(resultSet_tDBSCD_1.getObject(1) != null) {
                        sk_tDBSCD_1.Contact_ID = resultSet_tDBSCD_1.getInt(1);
                    }


                    if(resultSet_tDBSCD_1.getObject(2) != null) {
                        sk_tDBSCD_1.Account_ID = resultSet_tDBSCD_1.getInt(2);
                    }


                    if(resultSet_tDBSCD_1.getObject(3) != null) {
                        row_tDBSCD_1.Branch_Code = resultSet_tDBSCD_1.getInt(3);
                    }

            cache_tDBSCD_1.put(sk_tDBSCD_1, row_tDBSCD_1);
        }
        resultSet_tDBSCD_1.close();
        statement_tDBSCD_1.close();

    String insertionSQL_tDBSCD_1 = "INSERT INTO \"" + tableName_tDBSCD_1 + "\"(\"Contact_ID\", \"Account_ID\", \"Branch_Code\", \"ST_DATE\", \"END_DATE\") VALUES(?, ?, ?, ?, ?)";
    java.sql.PreparedStatement insertionStatement_tDBSCD_1 = connection_tDBSCD_1.prepareStatement(insertionSQL_tDBSCD_1);


            insertionStatement_tDBSCD_1.setTimestamp(4, new java.sql.Timestamp(start_Hash.get("tDBSCD_1")));


            insertionStatement_tDBSCD_1.setTimestamp(5, new java.sql.Timestamp(new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(9999 + "-01-01 12:00:00").getTime()));
        String updateSQLForType2_tDBSCD_1 = "UPDATE \"" + tableName_tDBSCD_1 + "\" SET \"END_DATE\" = ? WHERE \"Contact_ID\" = ? AND \"Account_ID\" = ? AND EXTRACT(YEAR FROM \"END_DATE\") = " + 9999 + "";
        java.sql.PreparedStatement updateForType2_tDBSCD_1 = connection_tDBSCD_1.prepareStatement(updateSQLForType2_tDBSCD_1);

            updateForType2_tDBSCD_1.setTimestamp(1, new java.sql.Timestamp(start_Hash.get("tDBSCD_1")));

    

        SCDSK_tDBSCD_1 lookUpKey_tDBSCD_1 = null;        


    SCDStruct_tDBSCD_1 lookUpValue_tDBSCD_1 = null;
 



/**
 * [tDBSCD_1 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		

    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:IRnt98wD+Bfuhgwzniuox9j6vrqVapYJjGrmW4Wzv1nsow4s");
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
			String dbProperties_tDBInput_4 = "";
			String url_tDBInput_4 = null;
			if(dbProperties_tDBInput_4 == null || dbProperties_tDBInput_4.trim().length() == 0) {
				url_tDBInput_4 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_4 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
				
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();
                stmt_tDBInput_4.setFetchSize(200000);

		    String dbquery_tDBInput_4 = "SELECT ldr_demo.Contact_Account_Branch_LDR.IUD,\n		ldr_demo.Contact_Account_Branch_LDR.Contact_ID,\n		ldr_demo.Contact_Ac"
+"count_Branch_LDR.Branch_Code,\n		ldr_demo.Contact_Account_Branch_LDR.Account_ID\nFROM	ldr_demo.Contact_Account_Branch_LDR"
+"\nWHERE IUD = 2";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row5.IUD = null;
							} else {
		                          
            row5.IUD = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    row5.IUD = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row5.Contact_ID = 0;
							} else {
		                          
            row5.Contact_ID = rs_tDBInput_4.getInt(2);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row5.Branch_Code = 0;
							} else {
		                          
            row5.Branch_Code = rs_tDBInput_4.getInt(3);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row5.Account_ID = 0;
							} else {
		                          
            row5.Account_ID = rs_tDBInput_4.getInt(4);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					



 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tDBSCD_1 main ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					


	try {
        lookUpKey_tDBSCD_1 = new SCDSK_tDBSCD_1();

            lookUpKey_tDBSCD_1.Contact_ID = row5.Contact_ID;


            lookUpKey_tDBSCD_1.Account_ID = row5.Account_ID;


        lookUpKey_tDBSCD_1.hashCodeDirty = true;
        lookUpValue_tDBSCD_1 = cache_tDBSCD_1.get(lookUpKey_tDBSCD_1);
 
   
    if(lookUpValue_tDBSCD_1 == null) {


            lookUpValue_tDBSCD_1 = new SCDStruct_tDBSCD_1();

        
                    insertionStatement_tDBSCD_1.setInt(1, row5.Contact_ID);


                    insertionStatement_tDBSCD_1.setInt(2, row5.Account_ID);


                    insertionStatement_tDBSCD_1.setInt(3, row5.Branch_Code);



        nb_line_inserted_tDBSCD_1 += insertionStatement_tDBSCD_1.executeUpdate();


    } else {


            if(lookUpValue_tDBSCD_1.Branch_Code != row5.Branch_Code) {


                    updateForType2_tDBSCD_1.setInt(2, row5.Contact_ID);



                    updateForType2_tDBSCD_1.setInt(3, row5.Account_ID);



                nb_line_update_tDBSCD_1 += updateForType2_tDBSCD_1.executeUpdate();

                            insertionStatement_tDBSCD_1.setInt(1, row5.Contact_ID);


                            insertionStatement_tDBSCD_1.setInt(2, row5.Account_ID);


                            insertionStatement_tDBSCD_1.setInt(3, row5.Branch_Code);



                nb_line_inserted_tDBSCD_1 += insertionStatement_tDBSCD_1.executeUpdate();

            }


    }
    
	} catch (java.lang.Exception e) {//catch

                System.err.print(e.getMessage());

	}//end catch


                lookUpValue_tDBSCD_1.Branch_Code = row5.Branch_Code;

        cache_tDBSCD_1.put(lookUpKey_tDBSCD_1, lookUpValue_tDBSCD_1);
 


	tos_count_tDBSCD_1++;

/**
 * [tDBSCD_1 main ] stop
 */
	
	/**
	 * [tDBSCD_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

 



/**
 * [tDBSCD_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBSCD_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

 



/**
 * [tDBSCD_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	





	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
	if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
	    

		
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);


 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tDBSCD_1 end ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	


    insertionStatement_tDBSCD_1.close();

        updateForType2_tDBSCD_1.close();


        if(connection_tDBSCD_1 != null && !connection_tDBSCD_1.isClosed()) {
            connection_tDBSCD_1.close();
        }


    globalMap.put("tDBSCD_1_NB_LINE_UPDATED", nb_line_update_tDBSCD_1);
    globalMap.put("tDBSCD_1_NB_LINE_INSERTED", nb_line_inserted_tDBSCD_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tDBSCD_1", true);
end_Hash.put("tDBSCD_1", System.currentTimeMillis());




/**
 * [tDBSCD_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tDBSCD_1 finally ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

 



/**
 * [tDBSCD_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];

	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public int Branch_Code;

				public int getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public int Account_ID;

				public int getAccount_ID () {
					return this.Account_ID;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
			        this.Branch_Code = dis.readInt();
					
			        this.Account_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// int
				
		            	dos.writeInt(this.Branch_Code);
					
					// int
				
		            	dos.writeInt(this.Account_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Branch_Code="+String.valueOf(Branch_Code));
		sb.append(",Account_ID="+String.valueOf(Account_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];

	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public int Branch_Code;

				public int getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public int Account_ID;

				public int getAccount_ID () {
					return this.Account_ID;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
			        this.Branch_Code = dis.readInt();
					
			        this.Account_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// int
				
		            	dos.writeInt(this.Branch_Code);
					
					// int
				
		            	dos.writeInt(this.Account_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Branch_Code="+String.valueOf(Branch_Code));
		sb.append(",Account_ID="+String.valueOf(Account_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
row11Struct row11 = new row11Struct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

String tableName_tDBOutput_3 = "Contact_Account_Branch_LDR";
boolean whetherReject_tDBOutput_3 = false;
   int batchSize_tDBOutput_3 = 10000;
   int batchSizeCounter_tDBOutput_3=0;



    String dbname_tDBOutput_3 = "ldr_demo";
    String driverClass_tDBOutput_3 = "com.teradata.jdbc.TeraDriver";

    java.lang.Class.forName(driverClass_tDBOutput_3);
    String dbProperties_tDBOutput_3 = "";
	String url_tDBOutput_3 = null;
	if(dbProperties_tDBOutput_3 == null || dbProperties_tDBOutput_3.trim().length() == 0) {
		url_tDBOutput_3 = "jdbc:teradata://" + "192.168.197.128";
	} else {
	    url_tDBOutput_3 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
	}
    String dbUser_tDBOutput_3 = "LDR_DEMO";
 
	final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:SdMyglztLjd2qRUqF1mpvjv0aL9gb66Jnx1ZF0GNICxOHI+B");

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

	
    java.sql.Connection conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);

	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;
String dbschema_tDBOutput_3 = dbname_tDBOutput_3;
if(dbname_tDBOutput_3 == null || dbname_tDBOutput_3.trim().length() == 0) {
    tableName_tDBOutput_3 = "Contact_Account_Branch_LDR";
} else {
    tableName_tDBOutput_3 = dbname_tDBOutput_3 + "\".\"" + "Contact_Account_Branch_LDR";
}
int count_tDBOutput_3=0;
	 conn_tDBOutput_3.commit();
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"IUD\",\"Contact_ID\",\"Branch_Code\",\"Account_ID\") VALUES (?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    


 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tJavaFlex_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_4", false);
		start_Hash.put("tJavaFlex_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tJavaFlex_4 = 0;
		



int nb=0;


 



/**
 * [tJavaFlex_4 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		

    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:DnP4ORPI8jqulv3DifmKO5/ILPqD4JnCzUuLXZdsUUSjDJRx");
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
			String dbProperties_tDBInput_5 = "";
			String url_tDBInput_5 = null;
			if(dbProperties_tDBInput_5 == null || dbProperties_tDBInput_5.trim().length() == 0) {
				url_tDBInput_5 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_5 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
				
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();
                stmt_tDBInput_5.setFetchSize(200000);

		    String dbquery_tDBInput_5 = "SELECT DISTINCT '3' AS IUD, CAB.CONTACT_ID,CAB.BRANCH_CODE,CAB.ACCOUNT_ID\nFROM CONTACT_ACCOUNT_BRANCH_LDR_CORE AS CAB"
+"\nLEFT JOIN CONTACT_ACCOUNT_BRANCH_LDR AS BL\nON CAB.CONTACT_ID = BL.CONTACT_ID\nLEFT JOIN CONTACT_ACCOUNT_BRANCH_LDR AS "
+"CL\nON CL.ACCOUNT_ID = CAB.ACCOUNT_ID\nWHERE\n(CAB.END_DATE = '9999-01-01 12:00:00.000'\nAND CAB.DELETE_FLAG = 0\n)\nAND"
+"\n(\nBL.CONTACT_ID IS NULL OR CL.ACCOUNT_ID IS NULL\n);\n";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row6.IUD = null;
							} else {
		                          
            row6.IUD = rs_tDBInput_5.getInt(1);
            if(rs_tDBInput_5.wasNull()){
                    row6.IUD = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row6.Contact_ID = 0;
							} else {
		                          
            row6.Contact_ID = rs_tDBInput_5.getInt(2);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row6.Branch_Code = 0;
							} else {
		                          
            row6.Branch_Code = rs_tDBInput_5.getInt(3);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row6.Account_ID = 0;
							} else {
		                          
            row6.Account_ID = rs_tDBInput_5.getInt(4);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					



 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tJavaFlex_4 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					


	        				row11.IUD = row6.IUD;
	        				row11.Contact_ID = row6.Contact_ID;
	        				row11.Branch_Code = row6.Branch_Code;
	        				row11.Account_ID = row6.Account_ID;


nb++;

 


	tos_count_tJavaFlex_4++;

/**
 * [tJavaFlex_4 main ] stop
 */
	
	/**
	 * [tJavaFlex_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaFlex_4";

	

 



/**
 * [tJavaFlex_4 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(row11.IUD == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(1, row11.IUD);
}

                    pstmt_tDBOutput_3.setInt(2, row11.Contact_ID);

                    pstmt_tDBOutput_3.setInt(3, row11.Branch_Code);

                    pstmt_tDBOutput_3.setInt(4, row11.Account_ID);

                pstmt_tDBOutput_3.addBatch();
                batchSizeCounter_tDBOutput_3++;
                nb_line_tDBOutput_3++;
            if(!whetherReject_tDBOutput_3) {
            }
                if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
                        batchSizeCounter_tDBOutput_3 = 0;
                        int countSum_tDBOutput_3 = 0;

                        for(int countEach_tDBOutput_3:pstmt_tDBOutput_3.executeBatch()) {
                            countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
                        }

                            insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
                }catch(java.sql.SQLException e_tDBOutput_3){
            java.sql.SQLException e3_tDBOutput_3 = e_tDBOutput_3;
                    boolean isFailure = false;
            while(e_tDBOutput_3 != null){
                if(e_tDBOutput_3.getErrorCode() == -2801){
                    System.out.println(" Message: " + e_tDBOutput_3.getMessage());
                    e_tDBOutput_3.printStackTrace();
                    System.out.println();
                }
                else if(e_tDBOutput_3.getErrorCode() == 1339){
                    isFailure = true;
                }
                else{
                    System.out.println(" Message: " + e_tDBOutput_3.getMessage());
                    e_tDBOutput_3.printStackTrace();
                }
                e_tDBOutput_3 = e_tDBOutput_3.getNextException();
            }
            if(isFailure && e_tDBOutput_3 != null){
                System.out.println(" Message: " + e_tDBOutput_3.getMessage());
                e_tDBOutput_3.printStackTrace();
            }
                System.err.println(e3_tDBOutput_3.getMessage());
                }
              }
                commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                        try {
                                       if (batchSizeCounter_tDBOutput_3 > 0) {
                                           int countSum_tDBOutput_3 = 0;

                                           for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
                                               countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
                                           }

                                               insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
                                           batchSizeCounter_tDBOutput_3 = 0;
                                       }
                            conn_tDBOutput_3.commit();
                            commitCounter_tDBOutput_3 = 0;
                        }catch(java.sql.SQLException e_tDBOutput_3){
                    java.sql.SQLException e3_tDBOutput_3 = e_tDBOutput_3;
                            boolean isFailure = false;
                    while(e_tDBOutput_3 != null){
                        if(e_tDBOutput_3.getErrorCode() == -2801){
                            System.out.println(" Message: " + e_tDBOutput_3.getMessage());
                            e_tDBOutput_3.printStackTrace();
                            System.out.println();
                        }
                        else if(e_tDBOutput_3.getErrorCode() == 1339){
                            isFailure = true;
                        }
                        else{
                            System.out.println(" Message: " + e_tDBOutput_3.getMessage());
                            e_tDBOutput_3.printStackTrace();
                        }
                        e_tDBOutput_3 = e_tDBOutput_3.getNextException();
                    }
                    if(isFailure && e_tDBOutput_3 != null){
                        System.out.println(" Message: " + e_tDBOutput_3.getMessage());
                        e_tDBOutput_3.printStackTrace();
                    }
                        System.err.println(e3_tDBOutput_3.getMessage());
                        }
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tJavaFlex_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_4";

	

 



/**
 * [tJavaFlex_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	





	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
	if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
	    

		
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);


 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tJavaFlex_4 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_4";

	



globalMap.put("nb_line",nb);
if(nb==0)
{
globalMap.put("hasData3",false);
}
else 
{
globalMap.put("hasData3",true);
}

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tJavaFlex_4", true);
end_Hash.put("tJavaFlex_4", System.currentTimeMillis());




/**
 * [tJavaFlex_4 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	




                try {
                    if ( batchSizeCounter_tDBOutput_3 > 0 ) { // do not commit empty batch, this is a jdbc error
                        int countSum_tDBOutput_3 = 0;
                        for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
                            countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
                        }

                            insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

                        }
                //}catch (java.sql.BatchUpdateException e){
                }catch (java.sql.SQLException e){
            java.sql.SQLException e3 = e;
                    boolean isFailure = false;
                    int errorCode = 0;
            String sqlState = "";
            String message = "";
            while(e != null){
                if(e.getErrorCode() == -2801){
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                    System.out.println();
                }
                else if(e.getErrorCode() == 1339){
                    isFailure = true;
                } else{
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                }
                e = e.getNextException();
            }
            if(isFailure && e != null){
                System.out.println("[Message]: " + e.getMessage());
                e.printStackTrace();
            }
                System.err.println(e3.getMessage());
                }

        if(pstmt_tDBOutput_3 != null) {
            pstmt_tDBOutput_3.close();
            pstmt_tDBOutput_3 = null;
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
            if (commitCounter_tDBOutput_3 > 0) {
                conn_tDBOutput_3.commit();
            }


        conn_tDBOutput_3.close();

        resourceMap.put("finish_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());

   			if ((Boolean)globalMap.get("hasData3")) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				tDBInput_6Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}



/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tJavaFlex_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_4";

	

 



/**
 * [tJavaFlex_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];

	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public int Branch_Code;

				public int getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public int Account_ID;

				public int getAccount_ID () {
					return this.Account_ID;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
			        this.Branch_Code = dis.readInt();
					
			        this.Account_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// int
				
		            	dos.writeInt(this.Branch_Code);
					
					// int
				
		            	dos.writeInt(this.Account_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Branch_Code="+String.valueOf(Branch_Code));
		sb.append(",Account_ID="+String.valueOf(Account_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tDBRow_1 = 0;
		




	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
			String driverClass_tDBRow_1 = "com.teradata.jdbc.TeraDriver";
		    java.lang.Class jdbcclazz_tDBRow_1 = java.lang.Class.forName(driverClass_tDBRow_1);
		
			String dbProperties_tDBRow_1 = "";
			String url_tDBRow_1 = null;
			if(dbProperties_tDBRow_1 == null || dbProperties_tDBRow_1.trim().length() == 0) {
				url_tDBRow_1 = "jdbc:teradata://" + "192.168.197.128";
			} else {
			    url_tDBRow_1 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
			}
		
					String dbUser_tDBRow_1 = "LDR_DEMO";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:96lAD1n8KkBBgKzuAIwKPm2hW7YHUwvHgHu1bQ6VYzVvyk1Q");
        		   	
        	        String dbPwd_tDBRow_1 = decryptedPassword_tDBRow_1;
	        
					
			conn_tDBRow_1 = java.sql.DriverManager.getConnection(url_tDBRow_1,dbUser_tDBRow_1,dbPwd_tDBRow_1);
		
    resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
					if(conn_tDBRow_1.getAutoCommit()) {
						
				conn_tDBRow_1.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_1 = 10000;
					int commitCounter_tDBRow_1 = 0;
				
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);

	

 



/**
 * [tDBRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		

    
	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:QG0IQ6fdxIO4ZfPwfiXjTLSqEUwA4rsdQ9G5w63rynEpb1dC");
				
				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
			String dbProperties_tDBInput_6 = "";
			String url_tDBInput_6 = null;
			if(dbProperties_tDBInput_6 == null || dbProperties_tDBInput_6.trim().length() == 0) {
				url_tDBInput_6 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_6 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
				
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();
                stmt_tDBInput_6.setFetchSize(200000);

		    String dbquery_tDBInput_6 = "SELECT ldr_demo.Contact_Account_Branch_LDR.IUD,\n		ldr_demo.Contact_Account_Branch_LDR.Contact_ID,\n		ldr_demo.Contact_Ac"
+"count_Branch_LDR.Branch_Code,\n		ldr_demo.Contact_Account_Branch_LDR.Account_ID\nFROM	ldr_demo.Contact_Account_Branch_LDR"
+"\nWHERE IUD = 3";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row8.IUD = null;
							} else {
		                          
            row8.IUD = rs_tDBInput_6.getInt(1);
            if(rs_tDBInput_6.wasNull()){
                    row8.IUD = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row8.Contact_ID = 0;
							} else {
		                          
            row8.Contact_ID = rs_tDBInput_6.getInt(2);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row8.Branch_Code = 0;
							} else {
		                          
            row8.Branch_Code = rs_tDBInput_6.getInt(3);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								row8.Account_ID = 0;
							} else {
		                          
            row8.Account_ID = rs_tDBInput_6.getInt(4);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					



 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					

query_tDBRow_1 = "UPDATE CONTACT_ACCOUNT_BRANCH_LDR_CORE\nSET\nDELETE_FLAG = 1,\nEND_DATE = CURRENT_TIMESTAMP(3)\nWHERE CONTACT_ACCOUNT_B"
+"RANCH_LDR.CONTACT_ID = CONTACT_ACCOUNT_BRANCH_LDR_CORE.CONTACT_ID\nAND CONTACT_ACCOUNT_BRANCH_LDR.ACCOUNT_ID = CONTACT_A"
+"CCOUNT_BRANCH_LDR_CORE.ACCOUNT_ID\nAND CONTACT_ACCOUNT_BRANCH_LDR.BRANCH_CODE = CONTACT_ACCOUNT_BRANCH_LDR_CORE.BRANCH_C"
+"ODE\nAND CONTACT_ACCOUNT_BRANCH_LDR.IUD = 3\nAND END_DATE = '9999-01-01 12:00:00.000'\nAND DELETE_FLAG = 0;";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
		stmt_tDBRow_1.execute(query_tDBRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_1++;
		if(commitEvery_tDBRow_1 <= commitCounter_tDBRow_1) {
			
			conn_tDBRow_1.commit();
			
			commitCounter_tDBRow_1=0;
		}
		

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	





	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
	if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
	    

		
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);


 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	





	stmt_tDBRow_1.close();
	resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
		if(commitEvery_tDBRow_1>commitCounter_tDBRow_1){

			
			conn_tDBRow_1.commit();
			

			commitCounter_tDBRow_1=0;

		}
	

	
	
			conn_tDBRow_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_1") == null){
            java.sql.Connection ctn_tDBRow_1 = null;
            if((ctn_tDBRow_1 = (java.sql.Connection)resourceMap.get("conn_tDBRow_1")) != null){
                try {
                    ctn_tDBRow_1.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_1) {
                    String errorMessage_tDBRow_1 = "failed to close the connection in tDBRow_1 :" + sqlEx_tDBRow_1.getMessage();
                    System.err.println(errorMessage_tDBRow_1);
                }
            }
        }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public int Branch_Code;

				public int getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public int Account_ID;

				public int getAccount_ID () {
					return this.Account_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Contact_ID;
						
							result = prime * result + (int) this.Account_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.Contact_ID != other.Contact_ID)
							return false;
					
						if (this.Account_ID != other.Account_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.IUD = this.IUD;
	            other.Contact_ID = this.Contact_ID;
	            other.Branch_Code = this.Branch_Code;
	            other.Account_ID = this.Account_ID;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.Contact_ID = this.Contact_ID;
	            	other.Account_ID = this.Account_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
			        this.Branch_Code = dis.readInt();
					
			        this.Account_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// int
				
		            	dos.writeInt(this.Branch_Code);
					
					// int
				
		            	dos.writeInt(this.Account_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Branch_Code="+String.valueOf(Branch_Code));
		sb.append(",Account_ID="+String.valueOf(Account_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Contact_ID, other.Contact_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Account_ID, other.Account_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tDBSCD_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBSCD_2", false);
		start_Hash.put("tDBSCD_2", System.currentTimeMillis());
		
	
	currentComponent="tDBSCD_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tDBSCD_2 = 0;
		



		class SCDSK_tDBSCD_2 {
private int hashCode;
public boolean hashCodeDirty = true;
int Contact_ID;
public boolean equals(Object obj) {
if (this == obj) return true;
if (obj == null) return false;
if (getClass() != obj.getClass()) return false;
final SCDSK_tDBSCD_2 other = (SCDSK_tDBSCD_2) obj;
if (this.Contact_ID!= other.Contact_ID)
return false;

return true;
}
public int hashCode() {
if(hashCodeDirty) {
int prime = 31;hashCode = prime * hashCode + Contact_ID;
hashCodeDirty = false;
}
return hashCode;
}
}



	class SCDStruct_tDBSCD_2 {
private int Account_ID;
private int Branch_Code;
}


    int nb_line_update_tDBSCD_2 = 0;
    int nb_line_inserted_tDBSCD_2 = 0;
    String tableName_tDBSCD_2 = "Contact_Account_Branch_LDR_CORE";
    String dbName_tDBSCD_2 = "ldr_demo";


        java.lang.Class.forName("com.teradata.jdbc.TeraDriver");


            String connectionString_tDBSCD_2 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";



		 
	final String decryptedPassword_tDBSCD_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:oO69ieYmYNDW3zWYqqrtxVfJrEfhJ5zOsRZM+qIhVhUwDHgs");

        java.sql.Connection connection_tDBSCD_2 = java.sql.DriverManager.getConnection(connectionString_tDBSCD_2, "LDR_DEMO", decryptedPassword_tDBSCD_2);
    
        
    java.util.Calendar calendar_tDBSCD_2 = java.util.Calendar.getInstance();
    java.util.Calendar calendarYear0_tDBSCD_2 = java.util.Calendar.getInstance();
    
    calendar_tDBSCD_2.set(1, 0, 1, 0, 0, 0);
    calendarYear0_tDBSCD_2.set(0,0,0,0,0,0);
    
    final java.util.Date dateYear0_tDBSCD_2 = calendarYear0_tDBSCD_2.getTime();
    final long year1_tDBSCD_2 = calendar_tDBSCD_2.getTime().getTime();
    
    calendar_tDBSCD_2.set(10000, 0, 1, 0, 0, 0);
    final long year10000_tDBSCD_2 = calendar_tDBSCD_2.getTime().getTime();
    long date_tDBSCD_2 = 0;
    
    String dateStr_tDBSCD_2 = null;
    String tmpValue_tDBSCD_2 = null;
    

        String search_tDBSCD_2 = "SELECT \"Contact_ID\", \"Account_ID\", \"Branch_Code\" FROM \"" + tableName_tDBSCD_2 + "\" WHERE EXTRACT(YEAR FROM \"END_DATE\") = " + 9999 + "";
        java.sql.Statement statement_tDBSCD_2 = connection_tDBSCD_2.createStatement();
        java.sql.ResultSet resultSet_tDBSCD_2 = statement_tDBSCD_2.executeQuery(search_tDBSCD_2);
        java.util.Map<SCDSK_tDBSCD_2, SCDStruct_tDBSCD_2> cache_tDBSCD_2 = new java.util.HashMap<SCDSK_tDBSCD_2, SCDStruct_tDBSCD_2>();

        while(resultSet_tDBSCD_2.next()) {
            SCDSK_tDBSCD_2 sk_tDBSCD_2 = new SCDSK_tDBSCD_2();
            SCDStruct_tDBSCD_2 row_tDBSCD_2 = new SCDStruct_tDBSCD_2();


                    if(resultSet_tDBSCD_2.getObject(1) != null) {
                        sk_tDBSCD_2.Contact_ID = resultSet_tDBSCD_2.getInt(1);
                    }


                    if(resultSet_tDBSCD_2.getObject(2) != null) {
                        row_tDBSCD_2.Account_ID = resultSet_tDBSCD_2.getInt(2);
                    }


                    if(resultSet_tDBSCD_2.getObject(3) != null) {
                        row_tDBSCD_2.Branch_Code = resultSet_tDBSCD_2.getInt(3);
                    }

            cache_tDBSCD_2.put(sk_tDBSCD_2, row_tDBSCD_2);
        }
        resultSet_tDBSCD_2.close();
        statement_tDBSCD_2.close();

    String insertionSQL_tDBSCD_2 = "INSERT INTO \"" + tableName_tDBSCD_2 + "\"(\"Contact_ID\", \"Account_ID\", \"Branch_Code\", \"ST_DATE\", \"END_DATE\") VALUES(?, ?, ?, ?, ?)";
    java.sql.PreparedStatement insertionStatement_tDBSCD_2 = connection_tDBSCD_2.prepareStatement(insertionSQL_tDBSCD_2);


            insertionStatement_tDBSCD_2.setTimestamp(4, new java.sql.Timestamp(start_Hash.get("tDBSCD_2")));


            insertionStatement_tDBSCD_2.setTimestamp(5, new java.sql.Timestamp(new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(9999 + "-01-01 12:00:00").getTime()));
        String updateSQLForType2_tDBSCD_2 = "UPDATE \"" + tableName_tDBSCD_2 + "\" SET \"END_DATE\" = ? WHERE \"Contact_ID\" = ? AND EXTRACT(YEAR FROM \"END_DATE\") = " + 9999 + "";
        java.sql.PreparedStatement updateForType2_tDBSCD_2 = connection_tDBSCD_2.prepareStatement(updateSQLForType2_tDBSCD_2);

            updateForType2_tDBSCD_2.setTimestamp(1, new java.sql.Timestamp(start_Hash.get("tDBSCD_2")));

    

        SCDSK_tDBSCD_2 lookUpKey_tDBSCD_2 = null;        


    SCDStruct_tDBSCD_2 lookUpValue_tDBSCD_2 = null;
 



/**
 * [tDBSCD_2 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		

    
	
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:9FHhdoI6gsRNgmCEhDvghQZNpQPIyxs1ktg5a8Eso0lZCbTF");
				
				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;
				
			String dbProperties_tDBInput_7 = "";
			String url_tDBInput_7 = null;
			if(dbProperties_tDBInput_7 == null || dbProperties_tDBInput_7.trim().length() == 0) {
				url_tDBInput_7 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_7 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7,dbUser_tDBInput_7,dbPwd_tDBInput_7);
		        
				
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();
                stmt_tDBInput_7.setFetchSize(200000);

		    String dbquery_tDBInput_7 = "SELECT ldr_demo.Contact_Account_Branch_LDR.IUD,\n		ldr_demo.Contact_Account_Branch_LDR.Contact_ID,\n		ldr_demo.Contact_Ac"
+"count_Branch_LDR.Branch_Code,\n		ldr_demo.Contact_Account_Branch_LDR.Account_ID\nFROM	ldr_demo.Contact_Account_Branch_LDR"
+"\nWHERE IUD = 1";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								row10.IUD = null;
							} else {
		                          
            row10.IUD = rs_tDBInput_7.getInt(1);
            if(rs_tDBInput_7.wasNull()){
                    row10.IUD = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								row10.Contact_ID = 0;
							} else {
		                          
            row10.Contact_ID = rs_tDBInput_7.getInt(2);
            if(rs_tDBInput_7.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								row10.Branch_Code = 0;
							} else {
		                          
            row10.Branch_Code = rs_tDBInput_7.getInt(3);
            if(rs_tDBInput_7.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								row10.Account_ID = 0;
							} else {
		                          
            row10.Account_ID = rs_tDBInput_7.getInt(4);
            if(rs_tDBInput_7.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					



 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tDBSCD_2 main ] start
	 */

	

	
	
	currentComponent="tDBSCD_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					


	try {
        lookUpKey_tDBSCD_2 = new SCDSK_tDBSCD_2();

            lookUpKey_tDBSCD_2.Contact_ID = row10.Contact_ID;


        lookUpKey_tDBSCD_2.hashCodeDirty = true;
        lookUpValue_tDBSCD_2 = cache_tDBSCD_2.get(lookUpKey_tDBSCD_2);
 
   
    if(lookUpValue_tDBSCD_2 == null) {


            lookUpValue_tDBSCD_2 = new SCDStruct_tDBSCD_2();

        
                    insertionStatement_tDBSCD_2.setInt(1, row10.Contact_ID);


                    insertionStatement_tDBSCD_2.setInt(2, row10.Account_ID);


                    insertionStatement_tDBSCD_2.setInt(3, row10.Branch_Code);



        nb_line_inserted_tDBSCD_2 += insertionStatement_tDBSCD_2.executeUpdate();


    } else {


            if(lookUpValue_tDBSCD_2.Account_ID != row10.Account_ID || lookUpValue_tDBSCD_2.Branch_Code != row10.Branch_Code) {


                    updateForType2_tDBSCD_2.setInt(2, row10.Contact_ID);



                nb_line_update_tDBSCD_2 += updateForType2_tDBSCD_2.executeUpdate();

                            insertionStatement_tDBSCD_2.setInt(1, row10.Contact_ID);


                            insertionStatement_tDBSCD_2.setInt(2, row10.Account_ID);


                            insertionStatement_tDBSCD_2.setInt(3, row10.Branch_Code);



                nb_line_inserted_tDBSCD_2 += insertionStatement_tDBSCD_2.executeUpdate();

            }


    }
    
	} catch (java.lang.Exception e) {//catch

                System.err.print(e.getMessage());

	}//end catch


                lookUpValue_tDBSCD_2.Account_ID = row10.Account_ID;


                lookUpValue_tDBSCD_2.Branch_Code = row10.Branch_Code;

        cache_tDBSCD_2.put(lookUpKey_tDBSCD_2, lookUpValue_tDBSCD_2);
 


	tos_count_tDBSCD_2++;

/**
 * [tDBSCD_2 main ] stop
 */
	
	/**
	 * [tDBSCD_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBSCD_2";

	

 



/**
 * [tDBSCD_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBSCD_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBSCD_2";

	

 



/**
 * [tDBSCD_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	





	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
	if(conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {
	    

		
			conn_tDBInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);


 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tDBSCD_2 end ] start
	 */

	

	
	
	currentComponent="tDBSCD_2";

	


    insertionStatement_tDBSCD_2.close();

        updateForType2_tDBSCD_2.close();


        if(connection_tDBSCD_2 != null && !connection_tDBSCD_2.isClosed()) {
            connection_tDBSCD_2.close();
        }


    globalMap.put("tDBSCD_2_NB_LINE_UPDATED", nb_line_update_tDBSCD_2);
    globalMap.put("tDBSCD_2_NB_LINE_INSERTED", nb_line_inserted_tDBSCD_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tDBSCD_2", true);
end_Hash.put("tDBSCD_2", System.currentTimeMillis());




/**
 * [tDBSCD_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tDBSCD_2 finally ] start
	 */

	

	
	
	currentComponent="tDBSCD_2";

	

 



/**
 * [tDBSCD_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public int Branch_Code;

				public int getBranch_Code () {
					return this.Branch_Code;
				}
				
			    public int Account_ID;

				public int getAccount_ID () {
					return this.Account_ID;
				}
				
			    public java.util.Date ST_DATE;

				public java.util.Date getST_DATE () {
					return this.ST_DATE;
				}
				
			    public java.util.Date END_DATE;

				public java.util.Date getEND_DATE () {
					return this.END_DATE;
				}
				
			    public int DELETE_FLAG;

				public int getDELETE_FLAG () {
					return this.DELETE_FLAG;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Contact_ID;
						
							result = prime * result + (int) this.Account_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.Contact_ID != other.Contact_ID)
							return false;
					
						if (this.Account_ID != other.Account_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.Contact_ID = this.Contact_ID;
	            other.Branch_Code = this.Branch_Code;
	            other.Account_ID = this.Account_ID;
	            other.ST_DATE = this.ST_DATE;
	            other.END_DATE = this.END_DATE;
	            other.DELETE_FLAG = this.DELETE_FLAG;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.Contact_ID = this.Contact_ID;
	            	other.Account_ID = this.Account_ID;
	            	
	}




	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Account_Branch_IUD_LDR_CORE_SCD_2) {

        	try {

        		int length = 0;
		
			        this.Contact_ID = dis.readInt();
					
			        this.Account_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// int
				
		            	dos.writeInt(this.Account_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.Branch_Code = dis.readInt();
					
						this.ST_DATE = readDate(dis,ois);
					
						this.END_DATE = readDate(dis,ois);
					
			            this.DELETE_FLAG = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.Branch_Code);
					
						writeDate(this.ST_DATE, dos, oos);
					
						writeDate(this.END_DATE, dos, oos);
					
		            	dos.writeInt(this.DELETE_FLAG);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Branch_Code="+String.valueOf(Branch_Code));
		sb.append(",Account_ID="+String.valueOf(Account_ID));
		sb.append(",ST_DATE="+String.valueOf(ST_DATE));
		sb.append(",END_DATE="+String.valueOf(END_DATE));
		sb.append(",DELETE_FLAG="+String.valueOf(DELETE_FLAG));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Contact_ID, other.Contact_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Account_ID, other.Account_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(out1,out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		

    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:xnSnnDfjdo3sA7PCVLgaUh+sMZA2Tp2fEYoi3JKeszrDkQYS");
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
			String dbProperties_tDBInput_2 = "";
			String url_tDBInput_2 = null;
			if(dbProperties_tDBInput_2 == null || dbProperties_tDBInput_2.trim().length() == 0) {
				url_tDBInput_2 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_2 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();
                stmt_tDBInput_2.setFetchSize(200000);

		    String dbquery_tDBInput_2 = "SELECT ldr_demo.Contact_Account_Branch_LDR_CORE.Contact_ID,\n		ldr_demo.Contact_Account_Branch_LDR_CORE.Branch_Code,\n		l"
+"dr_demo.Contact_Account_Branch_LDR_CORE.Account_ID,\n		ldr_demo.Contact_Account_Branch_LDR_CORE.ST_DATE,\n		ldr_demo.Conta"
+"ct_Account_Branch_LDR_CORE.END_DATE,\n		ldr_demo.Contact_Account_Branch_LDR_CORE.DELETE_FLAG\nFROM	ldr_demo.Contact_Accoun"
+"t_Branch_LDR_CORE";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.Contact_ID = 0;
							} else {
		                          
            row2.Contact_ID = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.Branch_Code = 0;
							} else {
		                          
            row2.Branch_Code = rs_tDBInput_2.getInt(2);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.Account_ID = 0;
							} else {
		                          
            row2.Account_ID = rs_tDBInput_2.getInt(3);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row2.ST_DATE = null;
							} else {
										
			row2.ST_DATE = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 4);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row2.END_DATE = null;
							} else {
										
			row2.END_DATE = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 5);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row2.DELETE_FLAG = 0;
							} else {
		                          
            row2.DELETE_FLAG = rs_tDBInput_2.getInt(6);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					



 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.Contact_ID = row2.Contact_ID;
				
				row2_HashRow.Branch_Code = row2.Branch_Code;
				
				row2_HashRow.Account_ID = row2.Account_ID;
				
				row2_HashRow.ST_DATE = row2.ST_DATE;
				
				row2_HashRow.END_DATE = row2.END_DATE;
				
				row2_HashRow.DELETE_FLAG = row2.DELETE_FLAG;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	





	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
	    

		
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);


 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Contact_Account_Branch_IUD_LDR_CORE_SCD_2 Contact_Account_Branch_IUD_LDR_CORE_SCD_2Class = new Contact_Account_Branch_IUD_LDR_CORE_SCD_2();

        int exitCode = Contact_Account_Branch_IUD_LDR_CORE_SCD_2Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Contact_Account_Branch_IUD_LDR_CORE_SCD_2.class.getClassLoader().getResourceAsStream("demo_staging_finance/contact_account_branch_iud_ldr_core_scd_2_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Contact_Account_Branch_IUD_LDR_CORE_SCD_2.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Contact_Account_Branch_IUD_LDR_CORE_SCD_2");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     239579 characters generated by Talend Open Studio for Data Integration 
 *     on the January 29, 2021 3:18:56 PM PKT
 ************************************************************************************************/