// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package demo_staging_finance.landing_area_job_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: Landing_Area_Job Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Landing_Area_Job implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Landing_Area_Job";
	private final String projectName = "DEMO_STAGING_FINANCE";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Landing_Area_Job.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Landing_Area_Job.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tInfiniteLoop_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tInfiniteLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tInfiniteLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tInfiniteLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileTouch_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWaitForFile_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWaitForFile_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWaitForFile_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWaitForFile_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tInfiniteLoop_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWaitForFile_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tInfiniteLoop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tInfiniteLoop_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tInfiniteLoop_1 begin ] start
				 */

				int NB_ITERATE_tJava_2 = 0; // for statistics

				ok_Hash.put("tInfiniteLoop_1", false);
				start_Hash.put("tInfiniteLoop_1", System.currentTimeMillis());

				currentComponent = "tInfiniteLoop_1";

				int tos_count_tInfiniteLoop_1 = 0;

				int counter_tInfiniteLoop_1 = 0;
				globalMap.put("tInfiniteLoop_1_CURRENT_ITERATION", counter_tInfiniteLoop_1);

				while (counter_tInfiniteLoop_1 > -1) {
					counter_tInfiniteLoop_1++;
					globalMap.put("tInfiniteLoop_1_CURRENT_ITERATION", counter_tInfiniteLoop_1);

					/**
					 * [tInfiniteLoop_1 begin ] stop
					 */

					/**
					 * [tInfiniteLoop_1 main ] start
					 */

					currentComponent = "tInfiniteLoop_1";

					tos_count_tInfiniteLoop_1++;

					/**
					 * [tInfiniteLoop_1 main ] stop
					 */

					/**
					 * [tInfiniteLoop_1 process_data_begin ] start
					 */

					currentComponent = "tInfiniteLoop_1";

					/**
					 * [tInfiniteLoop_1 process_data_begin ] stop
					 */
					NB_ITERATE_tJava_2++;

					if (execStat) {
						runStat.updateStatOnConnection("iterate4", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row2", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row5", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("If3", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row6", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate3", 1, "exec" + NB_ITERATE_tJava_2);
						// Thread.sleep(1000);
					}

					/**
					 * [tJava_2 begin ] start
					 */

					int NB_ITERATE_tFileList_1 = 0; // for statistics

					ok_Hash.put("tJava_2", false);
					start_Hash.put("tJava_2", System.currentTimeMillis());

					currentComponent = "tJava_2";

					int tos_count_tJava_2 = 0;

					/**
					 * [tJava_2 begin ] stop
					 */

					/**
					 * [tJava_2 main ] start
					 */

					currentComponent = "tJava_2";

					tos_count_tJava_2++;

					/**
					 * [tJava_2 main ] stop
					 */

					/**
					 * [tJava_2 process_data_begin ] start
					 */

					currentComponent = "tJava_2";

					/**
					 * [tJava_2 process_data_begin ] stop
					 */
					NB_ITERATE_tFileList_1++;

					if (execStat) {
						runStat.updateStatOnConnection("row2", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row5", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("If3", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row6", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate4", 1, "exec" + NB_ITERATE_tFileList_1);
						// Thread.sleep(1000);
					}

					/**
					 * [tFileList_1 begin ] start
					 */

					ok_Hash.put("tFileList_1", false);
					start_Hash.put("tFileList_1", System.currentTimeMillis());

					currentComponent = "tFileList_1";

					int tos_count_tFileList_1 = 0;

					String directory_tFileList_1 = "C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/data_file/Source_Files";
					final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
					final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>();
					maskList_tFileList_1.add("*");
					for (final String filemask_tFileList_1 : maskList_tFileList_1) {
						String filemask_compile_tFileList_1 = filemask_tFileList_1;

						filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(
								filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

						java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
								.compile(filemask_compile_tFileList_1);
						patternList_tFileList_1.add(fileNamePattern_tFileList_1);
					}
					int NB_FILEtFileList_1 = 0;

					final boolean case_sensitive_tFileList_1 = true;
					final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
					final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
					java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);

					file_tFileList_1.listFiles(new java.io.FilenameFilter() {
						public boolean accept(java.io.File dir, String name) {
							java.io.File file = new java.io.File(dir, name);
							if (!file.isDirectory()) {

								String fileName_tFileList_1 = file.getName();
								for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
									if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()) {
										if (!filePath_tFileList_1.contains(file.getAbsolutePath())) {
											list_tFileList_1.add(file);
											filePath_tFileList_1.add(file.getAbsolutePath());
										}
									}
								}
							}
							return true;
						}
					});
					java.util.Collections.sort(list_tFileList_1);

					for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++) {
						java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
						String fileName_tFileList_1 = files_tFileList_1.getName();

						String currentFileName_tFileList_1 = files_tFileList_1.getName();
						String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
						String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
						String currentFileExtension_tFileList_1 = null;

						if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()) {
							currentFileExtension_tFileList_1 = files_tFileList_1.getName()
									.substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
						} else {
							currentFileExtension_tFileList_1 = "";
						}

						NB_FILEtFileList_1++;
						globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
						globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
						globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
						globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
						globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

						/**
						 * [tFileList_1 begin ] stop
						 */

						/**
						 * [tFileList_1 main ] start
						 */

						currentComponent = "tFileList_1";

						tos_count_tFileList_1++;

						/**
						 * [tFileList_1 main ] stop
						 */

						/**
						 * [tFileList_1 process_data_begin ] start
						 */

						currentComponent = "tFileList_1";

						/**
						 * [tFileList_1 process_data_begin ] stop
						 */

						/**
						 * [tFileList_1 process_data_end ] start
						 */

						currentComponent = "tFileList_1";

						/**
						 * [tFileList_1 process_data_end ] stop
						 */

						/**
						 * [tFileList_1 end ] start
						 */

						currentComponent = "tFileList_1";

					}
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					ok_Hash.put("tFileList_1", true);
					end_Hash.put("tFileList_1", System.currentTimeMillis());

					if (((Integer) globalMap.get("tFileList_1_NB_FILE")) > 6) {

						if (execStat) {
							runStat.updateStatOnConnection("If3", 0, "true");
						}
						tRunJob_4Process(globalMap);
					}

					else {
						if (execStat) {
							runStat.updateStatOnConnection("If3", 0, "false");
						}
					}

					/**
					 * [tFileList_1 end ] stop
					 */
					if (execStat) {
						runStat.updateStatOnConnection("iterate4", 2, "exec" + NB_ITERATE_tFileList_1);
					}

					/**
					 * [tJava_2 process_data_end ] start
					 */

					currentComponent = "tJava_2";

					/**
					 * [tJava_2 process_data_end ] stop
					 */

					/**
					 * [tJava_2 end ] start
					 */

					currentComponent = "tJava_2";

					ok_Hash.put("tJava_2", true);
					end_Hash.put("tJava_2", System.currentTimeMillis());

					/**
					 * [tJava_2 end ] stop
					 */
					if (execStat) {
						runStat.updateStatOnConnection("iterate3", 2, "exec" + NB_ITERATE_tJava_2);
					}

					/**
					 * [tInfiniteLoop_1 process_data_end ] start
					 */

					currentComponent = "tInfiniteLoop_1";

					/**
					 * [tInfiniteLoop_1 process_data_end ] stop
					 */

					/**
					 * [tInfiniteLoop_1 end ] start
					 */

					currentComponent = "tInfiniteLoop_1";

					Thread.sleep(1000 * 7);
				}

				ok_Hash.put("tInfiniteLoop_1", true);
				end_Hash.put("tInfiniteLoop_1", System.currentTimeMillis());

				/**
				 * [tInfiniteLoop_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tInfiniteLoop_1 finally ] start
				 */

				currentComponent = "tInfiniteLoop_1";

				/**
				 * [tInfiniteLoop_1 finally ] stop
				 */

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */

				/**
				 * [tFileList_1 finally ] start
				 */

				currentComponent = "tFileList_1";

				/**
				 * [tFileList_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tInfiniteLoop_1_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Landing_Area_Job = new byte[0];
		static byte[] commonByteArray_DEMO_STAGING_FINANCE_Landing_Area_Job = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_STAGING_FINANCE_Landing_Area_Job) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Landing_Area_Job = new byte[0];
		static byte[] commonByteArray_DEMO_STAGING_FINANCE_Landing_Area_Job = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_STAGING_FINANCE_Landing_Area_Job) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRunJob_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				row5Struct row6 = row5;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				currentComponent = "tJava_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tJava_4 = 0;

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tFileTouch_2 begin ] start
				 */

				ok_Hash.put("tFileTouch_2", false);
				start_Hash.put("tFileTouch_2", System.currentTimeMillis());

				currentComponent = "tFileTouch_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tFileTouch_2 = 0;

				/**
				 * [tFileTouch_2 begin ] stop
				 */

				/**
				 * [tRunJob_4 begin ] start
				 */

				ok_Hash.put("tRunJob_4", false);
				start_Hash.put("tRunJob_4", System.currentTimeMillis());

				currentComponent = "tRunJob_4";

				int tos_count_tRunJob_4 = 0;

				/**
				 * [tRunJob_4 begin ] stop
				 */

				/**
				 * [tRunJob_4 main ] start
				 */

				currentComponent = "tRunJob_4";

				java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();

				paraList_tRunJob_4.add("--father_pid=" + pid);

				paraList_tRunJob_4.add("--root_pid=" + rootPid);

				paraList_tRunJob_4.add("--father_node=tRunJob_4");

				paraList_tRunJob_4.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_4.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_4.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_4.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_4 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_4 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_4".equals(tRunJobName_tRunJob_4) && childResumePath_tRunJob_4 != null) {
					paraList_tRunJob_4.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_4");

				java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_4 = null;

				demo_staging_finance.moving_files_check_0_1.Moving_Files_Check childJob_tRunJob_4 = new demo_staging_finance.moving_files_check_0_1.Moving_Files_Check();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_4) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
							.entrySet()) {
						dataSources_tRunJob_4.put(talendDataSourceEntry_tRunJob_4.getKey(),
								talendDataSourceEntry_tRunJob_4.getValue().getRawDataSource());
					}
					childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
				}

				childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;

				String[][] childReturn_tRunJob_4 = childJob_tRunJob_4
						.runJob((String[]) paraList_tRunJob_4.toArray(new String[paraList_tRunJob_4.size()]));

				if (childJob_tRunJob_4.getErrorCode() == null) {
					globalMap.put("tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getStatus() != null && ("failure").equals(childJob_tRunJob_4.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getErrorCode());
				}
				if (childJob_tRunJob_4.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_4.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_4.getErrorCode();
				if (childJob_tRunJob_4.getErrorCode() != null || ("failure").equals(childJob_tRunJob_4.getStatus())) {
					java.lang.Exception ce_tRunJob_4 = childJob_tRunJob_4.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_4 != null)
							? (ce_tRunJob_4.getClass().getName() + ": " + ce_tRunJob_4.getMessage())
							: ""));
				}
				for (String[] item_tRunJob_4 : childReturn_tRunJob_4) {
					if (childJob_tRunJob_4.hastBufferOutputComponent() || true) {

					}

					tos_count_tRunJob_4++;

					/**
					 * [tRunJob_4 main ] stop
					 */

					/**
					 * [tRunJob_4 process_data_begin ] start
					 */

					currentComponent = "tRunJob_4";

					/**
					 * [tRunJob_4 process_data_begin ] stop
					 */

					/**
					 * [tFileTouch_2 main ] start
					 */

					currentComponent = "tFileTouch_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
					}

					java.io.File file_tFileTouch_2 = new java.io.File(
							("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/data_file/Banking/New_Banking_Data/STG.OK"));

					// create new file
					boolean resulttFileTouch_2 = file_tFileTouch_2.createNewFile();
					// if file already exists, modify the last-modified-time of the file
					if (!resulttFileTouch_2) {
						file_tFileTouch_2.setLastModified((new Date()).getTime());
					}

					row6 = row5;

					tos_count_tFileTouch_2++;

					/**
					 * [tFileTouch_2 main ] stop
					 */

					/**
					 * [tFileTouch_2 process_data_begin ] start
					 */

					currentComponent = "tFileTouch_2";

					/**
					 * [tFileTouch_2 process_data_begin ] stop
					 */

					/**
					 * [tJava_4 main ] start
					 */

					currentComponent = "tJava_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
					}

					tos_count_tJava_4++;

					/**
					 * [tJava_4 main ] stop
					 */

					/**
					 * [tJava_4 process_data_begin ] start
					 */

					currentComponent = "tJava_4";

					/**
					 * [tJava_4 process_data_begin ] stop
					 */

					/**
					 * [tJava_4 process_data_end ] start
					 */

					currentComponent = "tJava_4";

					/**
					 * [tJava_4 process_data_end ] stop
					 */

					/**
					 * [tFileTouch_2 process_data_end ] start
					 */

					currentComponent = "tFileTouch_2";

					/**
					 * [tFileTouch_2 process_data_end ] stop
					 */

				} // C_01

				/**
				 * [tRunJob_4 process_data_end ] start
				 */

				currentComponent = "tRunJob_4";

				/**
				 * [tRunJob_4 process_data_end ] stop
				 */

				/**
				 * [tRunJob_4 end ] start
				 */

				currentComponent = "tRunJob_4";

				ok_Hash.put("tRunJob_4", true);
				end_Hash.put("tRunJob_4", System.currentTimeMillis());

				/**
				 * [tRunJob_4 end ] stop
				 */

				/**
				 * [tFileTouch_2 end ] start
				 */

				currentComponent = "tFileTouch_2";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tFileTouch_2", true);
				end_Hash.put("tFileTouch_2", System.currentTimeMillis());

				/**
				 * [tFileTouch_2 end ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tWaitForFile_2Process(globalMap);

				/**
				 * [tJava_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_4 finally ] start
				 */

				currentComponent = "tRunJob_4";

				/**
				 * [tRunJob_4 finally ] stop
				 */

				/**
				 * [tFileTouch_2 finally ] start
				 */

				currentComponent = "tFileTouch_2";

				/**
				 * [tFileTouch_2 finally ] stop
				 */

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Landing_Area_Job = new byte[0];
		static byte[] commonByteArray_DEMO_STAGING_FINANCE_Landing_Area_Job = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_STAGING_FINANCE_Landing_Area_Job) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Landing_Area_Job = new byte[0];
		static byte[] commonByteArray_DEMO_STAGING_FINANCE_Landing_Area_Job = new byte[0];

		public Integer CURRENT_ITERATION;

		public Integer getCURRENT_ITERATION() {
			return this.CURRENT_ITERATION;
		}

		public String PRESENT_FILE;

		public String getPRESENT_FILE() {
			return this.PRESENT_FILE;
		}

		public String DELETED_FILE;

		public String getDELETED_FILE() {
			return this.DELETED_FILE;
		}

		public String CREATED_FILE;

		public String getCREATED_FILE() {
			return this.CREATED_FILE;
		}

		public String UPDATED_FILE;

		public String getUPDATED_FILE() {
			return this.UPDATED_FILE;
		}

		public String FILENAME;

		public String getFILENAME() {
			return this.FILENAME;
		}

		public String NOT_UPDATED_FILE;

		public String getNOT_UPDATED_FILE() {
			return this.NOT_UPDATED_FILE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEMO_STAGING_FINANCE_Landing_Area_Job.length) {
					if (length < 1024 && commonByteArray_DEMO_STAGING_FINANCE_Landing_Area_Job.length == 0) {
						commonByteArray_DEMO_STAGING_FINANCE_Landing_Area_Job = new byte[1024];
					} else {
						commonByteArray_DEMO_STAGING_FINANCE_Landing_Area_Job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEMO_STAGING_FINANCE_Landing_Area_Job, 0, length);
				strReturn = new String(commonByteArray_DEMO_STAGING_FINANCE_Landing_Area_Job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEMO_STAGING_FINANCE_Landing_Area_Job) {

				try {

					int length = 0;

					this.CURRENT_ITERATION = readInteger(dis);

					this.PRESENT_FILE = readString(dis);

					this.DELETED_FILE = readString(dis);

					this.CREATED_FILE = readString(dis);

					this.UPDATED_FILE = readString(dis);

					this.FILENAME = readString(dis);

					this.NOT_UPDATED_FILE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.CURRENT_ITERATION, dos);

				// String

				writeString(this.PRESENT_FILE, dos);

				// String

				writeString(this.DELETED_FILE, dos);

				// String

				writeString(this.CREATED_FILE, dos);

				// String

				writeString(this.UPDATED_FILE, dos);

				// String

				writeString(this.FILENAME, dos);

				// String

				writeString(this.NOT_UPDATED_FILE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CURRENT_ITERATION=" + String.valueOf(CURRENT_ITERATION));
			sb.append(",PRESENT_FILE=" + PRESENT_FILE);
			sb.append(",DELETED_FILE=" + DELETED_FILE);
			sb.append(",CREATED_FILE=" + CREATED_FILE);
			sb.append(",UPDATED_FILE=" + UPDATED_FILE);
			sb.append(",FILENAME=" + FILENAME);
			sb.append(",NOT_UPDATED_FILE=" + NOT_UPDATED_FILE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tWaitForFile_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWaitForFile_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tRunJob_6 begin ] start
				 */

				ok_Hash.put("tRunJob_6", false);
				start_Hash.put("tRunJob_6", System.currentTimeMillis());

				currentComponent = "tRunJob_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tRunJob_6 = 0;

				/**
				 * [tRunJob_6 begin ] stop
				 */

				/**
				 * [tRunJob_5 begin ] start
				 */

				ok_Hash.put("tRunJob_5", false);
				start_Hash.put("tRunJob_5", System.currentTimeMillis());

				currentComponent = "tRunJob_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tRunJob_5 = 0;

				/**
				 * [tRunJob_5 begin ] stop
				 */

				/**
				 * [tWaitForFile_2 begin ] start
				 */

				ok_Hash.put("tWaitForFile_2", false);
				start_Hash.put("tWaitForFile_2", System.currentTimeMillis());

				currentComponent = "tWaitForFile_2";

				int tos_count_tWaitForFile_2 = 0;

				class Util_tWaitForFile_2 {

					private boolean flagt = false;

					private java.util.regex.Pattern fileNamePatternt = null;
					private java.util.List<String> list;

					public java.util.List<String> getFiles() {
						setFiles();
						return list;
					}

					public Util_tWaitForFile_2() {
						this.list = new java.util.ArrayList<String>();
					}

					public void addFile(java.io.File file) {
						this.list.add(file.getPath());
					}

					void setFiles() {
						String directoryt = "C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/data_file/Banking/New_Banking_Data";
						String filemaskt = "*.OK" + "$";

						if (filemaskt.indexOf("^") == -1) {
							filemaskt = "^" + filemaskt;
						}
						if (!(filemaskt.lastIndexOf(".*$") == -1) && filemaskt.lastIndexOf("*.*$") == -1) {
							filemaskt = filemaskt.substring(0, filemaskt.length() - 3) + "$";
							flagt = true;
						} else {
							filemaskt = java.util.regex.Pattern.compile("[*]").matcher(filemaskt).replaceAll(".*");
						}

						boolean case_sensitivet = true;
						fileNamePatternt = java.util.regex.Pattern.compile(filemaskt);
						if (!case_sensitivet) {
							fileNamePatternt = java.util.regex.Pattern.compile(filemaskt,
									java.util.regex.Pattern.CASE_INSENSITIVE);
						}
						java.io.File filet = new java.io.File(directoryt);
						filet.listFiles(new java.io.FilenameFilter() {

							public boolean accept(java.io.File dir, String name) {
								java.io.File file = new java.io.File(dir, name);
								if (file.isFile()) {
									String fileNamet = name;
									if (flagt == true) {
										if (!(fileNamet.indexOf(".") == -1)) {
											if (fileNamePatternt.matcher(fileNamet.substring(0, fileNamet.indexOf(".")))
													.find()) {
												addFile(file);

											}
										} else {
											if (fileNamePatternt.matcher(fileNamet).find()) {
												addFile(file);
											}
										}
									} else {
										if (fileNamePatternt.matcher(fileNamet).find()) {
											addFile(file);
										}
									}

									return true;
								}
								return false;
							}

						});

					}

					java.util.List<java.io.File> getCreatedFiles(java.util.List<String> originalFiles,
							java.util.List<String> fetchOneTimeFiles) {
						java.util.List<java.io.File> newCreatedFiles = new java.util.ArrayList<java.io.File>();
						String[] array = originalFiles.toArray(new String[] {});
						for (String file : fetchOneTimeFiles) {
							int index = java.util.Arrays.binarySearch(array, file);
							if (index < 0) {
								newCreatedFiles.add(new java.io.File(file));
							}
						}
						return newCreatedFiles;
					}

				}

				Util_tWaitForFile_2 util_tWaitForFile_2 = new Util_tWaitForFile_2();
				java.util.List<String> originalFiles_tWaitForFile_2 = util_tWaitForFile_2.getFiles();

				int count_tWaitForFile_2 = 0;

				while (true) {
					boolean found_tWaitForFile_2 = false;
					if (globalMap.get("tWaitForFile_2_PRESENT_FILE") != null) {
						globalMap.remove("tWaitForFile_2_PRESENT_FILE");
					}
					if (count_tWaitForFile_2 < originalFiles_tWaitForFile_2.size()) {
						java.io.File file_tWaitForFile_2 = new java.io.File(
								originalFiles_tWaitForFile_2.get(count_tWaitForFile_2));

						globalMap.put("tWaitForFile_2_FILENAME", file_tWaitForFile_2.getName());
						globalMap.put("tWaitForFile_2_PRESENT_FILE", file_tWaitForFile_2.getAbsolutePath());
						found_tWaitForFile_2 = true;
					} else {

						util_tWaitForFile_2 = new Util_tWaitForFile_2();

						java.util.List<String> fetchFilesOneTime_tWaitForFile_2 = util_tWaitForFile_2.getFiles();

						List<String> intersectionList = new java.util.ArrayList<String>();

						for (String cachedFile : originalFiles_tWaitForFile_2) {
							if (fetchFilesOneTime_tWaitForFile_2.contains(cachedFile)) {
								intersectionList.add(cachedFile);
							}
						}

						util_tWaitForFile_2 = new Util_tWaitForFile_2();
						originalFiles_tWaitForFile_2 = intersectionList;
						if (globalMap.get("tWaitForFile_2_CREATED_FILE") != null) {
							globalMap.remove("tWaitForFile_2_CREATED_FILE");
						}
						java.util.Collections.sort(originalFiles_tWaitForFile_2);
						java.util.List<java.io.File> newCreatedFiles_tWaitForFile_2 = util_tWaitForFile_2
								.getCreatedFiles(originalFiles_tWaitForFile_2, fetchFilesOneTime_tWaitForFile_2);

						for (int i = 0; i < newCreatedFiles_tWaitForFile_2.size(); i++) {
							java.io.File file_tWaitForFile_2 = newCreatedFiles_tWaitForFile_2.get(i);

							globalMap.put("tWaitForFile_2_FILENAME", file_tWaitForFile_2.getName());
							globalMap.put("tWaitForFile_2_CREATED_FILE", file_tWaitForFile_2.getAbsolutePath());
							found_tWaitForFile_2 = true;
							originalFiles_tWaitForFile_2.add(file_tWaitForFile_2.getPath());
							break;
						}

					}
					count_tWaitForFile_2++;

					globalMap.put("tWaitForFile_2_CURRENT_ITERATION", count_tWaitForFile_2);

					if (!found_tWaitForFile_2) {

						Thread.sleep(2 * 1000);
						continue;
					}

					row1.CURRENT_ITERATION = ((Integer) globalMap.get("tWaitForFile_2_CURRENT_ITERATION"));
					row1.PRESENT_FILE = ((String) globalMap.get("tWaitForFile_2_PRESENT_FILE"));
					row1.DELETED_FILE = ((String) globalMap.get("tWaitForFile_2_DELETED_FILE"));
					row1.CREATED_FILE = ((String) globalMap.get("tWaitForFile_2_CREATED_FILE"));
					row1.UPDATED_FILE = ((String) globalMap.get("tWaitForFile_2_UPDATED_FILE"));
					row1.FILENAME = ((String) globalMap.get("tWaitForFile_2_FILENAME"));
					row1.NOT_UPDATED_FILE = ((String) globalMap.get("tWaitForFile_2_NOT_UPDATED_FILE"));

					/**
					 * [tWaitForFile_2 begin ] stop
					 */

					/**
					 * [tWaitForFile_2 main ] start
					 */

					currentComponent = "tWaitForFile_2";

					tos_count_tWaitForFile_2++;

					/**
					 * [tWaitForFile_2 main ] stop
					 */

					/**
					 * [tWaitForFile_2 process_data_begin ] start
					 */

					currentComponent = "tWaitForFile_2";

					/**
					 * [tWaitForFile_2 process_data_begin ] stop
					 */

					/**
					 * [tRunJob_5 main ] start
					 */

					currentComponent = "tRunJob_5";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
					}

					java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();

					paraList_tRunJob_5.add("--father_pid=" + pid);

					paraList_tRunJob_5.add("--root_pid=" + rootPid);

					paraList_tRunJob_5.add("--father_node=tRunJob_5");

					paraList_tRunJob_5.add("--context=Default");

					if (enableLogStash) {
						paraList_tRunJob_5.add("--monitoring=" + enableLogStash);
					}

					// for feature:10589

					paraList_tRunJob_5.add("--stat_port=" + portStats);

					if (resuming_logs_dir_path != null) {
						paraList_tRunJob_5.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
					}
					String childResumePath_tRunJob_5 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
					String tRunJobName_tRunJob_5 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
					if ("tRunJob_5".equals(tRunJobName_tRunJob_5) && childResumePath_tRunJob_5 != null) {
						paraList_tRunJob_5.add("--resuming_checkpoint_path="
								+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
					}
					paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_5");

					java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

					Object obj_tRunJob_5 = null;

					demo_staging_finance.demo_job_atif_bilal_0_1.DEMO_JOB_ATIF_BILAL childJob_tRunJob_5 = new demo_staging_finance.demo_job_atif_bilal_0_1.DEMO_JOB_ATIF_BILAL();
					// pass DataSources
					java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (null != talendDataSources_tRunJob_5) {
						java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
						for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
								.entrySet()) {
							dataSources_tRunJob_5.put(talendDataSourceEntry_tRunJob_5.getKey(),
									talendDataSourceEntry_tRunJob_5.getValue().getRawDataSource());
						}
						childJob_tRunJob_5.setDataSources(dataSources_tRunJob_5);
					}

					childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;

					String[][] childReturn_tRunJob_5 = childJob_tRunJob_5
							.runJob((String[]) paraList_tRunJob_5.toArray(new String[paraList_tRunJob_5.size()]));

					if (childJob_tRunJob_5.getErrorCode() == null) {
						globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getStatus() != null
								&& ("failure").equals(childJob_tRunJob_5.getStatus()) ? 1 : 0);
					} else {
						globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getErrorCode());
					}
					if (childJob_tRunJob_5.getExceptionStackTrace() != null) {
						globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE",
								childJob_tRunJob_5.getExceptionStackTrace());
					}
					errorCode = childJob_tRunJob_5.getErrorCode();
					if (childJob_tRunJob_5.getErrorCode() != null
							|| ("failure").equals(childJob_tRunJob_5.getStatus())) {
						java.lang.Exception ce_tRunJob_5 = childJob_tRunJob_5.getException();
						throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_5 != null)
								? (ce_tRunJob_5.getClass().getName() + ": " + ce_tRunJob_5.getMessage())
								: ""));
					}

					tos_count_tRunJob_5++;

					/**
					 * [tRunJob_5 main ] stop
					 */

					/**
					 * [tRunJob_5 process_data_begin ] start
					 */

					currentComponent = "tRunJob_5";

					/**
					 * [tRunJob_5 process_data_begin ] stop
					 */

					/**
					 * [tRunJob_6 main ] start
					 */

					currentComponent = "tRunJob_6";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
					}

					java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();

					paraList_tRunJob_6.add("--father_pid=" + pid);

					paraList_tRunJob_6.add("--root_pid=" + rootPid);

					paraList_tRunJob_6.add("--father_node=tRunJob_6");

					paraList_tRunJob_6.add("--context=Default");

					if (enableLogStash) {
						paraList_tRunJob_6.add("--monitoring=" + enableLogStash);
					}

					// for feature:10589

					paraList_tRunJob_6.add("--stat_port=" + portStats);

					if (resuming_logs_dir_path != null) {
						paraList_tRunJob_6.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
					}
					String childResumePath_tRunJob_6 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
					String tRunJobName_tRunJob_6 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
					if ("tRunJob_6".equals(tRunJobName_tRunJob_6) && childResumePath_tRunJob_6 != null) {
						paraList_tRunJob_6.add("--resuming_checkpoint_path="
								+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
					}
					paraList_tRunJob_6.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_6");

					java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

					Object obj_tRunJob_6 = null;

					demo_staging_finance.move_files_from_target_0_1.MOVE_FILES_FROM_TARGET childJob_tRunJob_6 = new demo_staging_finance.move_files_from_target_0_1.MOVE_FILES_FROM_TARGET();
					// pass DataSources
					java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (null != talendDataSources_tRunJob_6) {
						java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_6 = new java.util.HashMap<String, javax.sql.DataSource>();
						for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_6 : talendDataSources_tRunJob_6
								.entrySet()) {
							dataSources_tRunJob_6.put(talendDataSourceEntry_tRunJob_6.getKey(),
									talendDataSourceEntry_tRunJob_6.getValue().getRawDataSource());
						}
						childJob_tRunJob_6.setDataSources(dataSources_tRunJob_6);
					}

					childJob_tRunJob_6.parentContextMap = parentContextMap_tRunJob_6;

					String[][] childReturn_tRunJob_6 = childJob_tRunJob_6
							.runJob((String[]) paraList_tRunJob_6.toArray(new String[paraList_tRunJob_6.size()]));

					if (childJob_tRunJob_6.getErrorCode() == null) {
						globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getStatus() != null
								&& ("failure").equals(childJob_tRunJob_6.getStatus()) ? 1 : 0);
					} else {
						globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getErrorCode());
					}
					if (childJob_tRunJob_6.getExceptionStackTrace() != null) {
						globalMap.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE",
								childJob_tRunJob_6.getExceptionStackTrace());
					}
					errorCode = childJob_tRunJob_6.getErrorCode();
					if (childJob_tRunJob_6.getErrorCode() != null
							|| ("failure").equals(childJob_tRunJob_6.getStatus())) {
						java.lang.Exception ce_tRunJob_6 = childJob_tRunJob_6.getException();
						throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_6 != null)
								? (ce_tRunJob_6.getClass().getName() + ": " + ce_tRunJob_6.getMessage())
								: ""));
					}

					tos_count_tRunJob_6++;

					/**
					 * [tRunJob_6 main ] stop
					 */

					/**
					 * [tRunJob_6 process_data_begin ] start
					 */

					currentComponent = "tRunJob_6";

					/**
					 * [tRunJob_6 process_data_begin ] stop
					 */

					/**
					 * [tRunJob_6 process_data_end ] start
					 */

					currentComponent = "tRunJob_6";

					/**
					 * [tRunJob_6 process_data_end ] stop
					 */

					/**
					 * [tRunJob_5 process_data_end ] start
					 */

					currentComponent = "tRunJob_5";

					/**
					 * [tRunJob_5 process_data_end ] stop
					 */

					/**
					 * [tWaitForFile_2 process_data_end ] start
					 */

					currentComponent = "tWaitForFile_2";

					/**
					 * [tWaitForFile_2 process_data_end ] stop
					 */

					/**
					 * [tWaitForFile_2 end ] start
					 */

					currentComponent = "tWaitForFile_2";

					if (true) {

						break;
					}
				}

				ok_Hash.put("tWaitForFile_2", true);
				end_Hash.put("tWaitForFile_2", System.currentTimeMillis());

				/**
				 * [tWaitForFile_2 end ] stop
				 */

				/**
				 * [tRunJob_5 end ] start
				 */

				currentComponent = "tRunJob_5";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tRunJob_5", true);
				end_Hash.put("tRunJob_5", System.currentTimeMillis());

				/**
				 * [tRunJob_5 end ] stop
				 */

				/**
				 * [tRunJob_6 end ] start
				 */

				currentComponent = "tRunJob_6";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tRunJob_6", true);
				end_Hash.put("tRunJob_6", System.currentTimeMillis());

				/**
				 * [tRunJob_6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWaitForFile_2 finally ] start
				 */

				currentComponent = "tWaitForFile_2";

				/**
				 * [tWaitForFile_2 finally ] stop
				 */

				/**
				 * [tRunJob_5 finally ] start
				 */

				currentComponent = "tRunJob_5";

				/**
				 * [tRunJob_5 finally ] stop
				 */

				/**
				 * [tRunJob_6 finally ] start
				 */

				currentComponent = "tRunJob_6";

				/**
				 * [tRunJob_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWaitForFile_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Landing_Area_Job Landing_Area_JobClass = new Landing_Area_Job();

		int exitCode = Landing_Area_JobClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Landing_Area_Job.class.getClassLoader().getResourceAsStream(
					"demo_staging_finance/landing_area_job_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Landing_Area_Job.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tInfiniteLoop_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tInfiniteLoop_1) {
			globalMap.put("tInfiniteLoop_1_SUBPROCESS_STATE", -1);

			e_tInfiniteLoop_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : Landing_Area_Job");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 77689 characters generated by Talend Open Studio for Data Integration on the
 * January 29, 2021 3:18:58 PM PKT
 ************************************************************************************************/