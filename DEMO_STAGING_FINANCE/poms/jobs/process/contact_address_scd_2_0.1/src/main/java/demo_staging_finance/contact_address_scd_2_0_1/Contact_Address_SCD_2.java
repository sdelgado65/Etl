// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package demo_staging_finance.contact_address_scd_2_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaFlex_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Contact_Address_SCD_2 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Contact_Address_SCD_2 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Contact_Address_SCD_2";
	private final String projectName = "DEMO_STAGING_FINANCE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Contact_Address_SCD_2.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Contact_Address_SCD_2.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBSCD_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBSCD_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public int Address_ID;

				public int getAddress_ID () {
					return this.Address_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Contact_ID;
						
							result = prime * result + (int) this.Address_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.Contact_ID != other.Contact_ID)
							return false;
					
						if (this.Address_ID != other.Address_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.IUD = this.IUD;
	            other.Contact_ID = this.Contact_ID;
	            other.Address_ID = this.Address_ID;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.Contact_ID = this.Contact_ID;
	            	other.Address_ID = this.Address_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
			        this.Address_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// int
				
		            	dos.writeInt(this.Address_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Address_ID="+String.valueOf(Address_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Contact_ID, other.Contact_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Address_ID, other.Address_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public int Address_ID;

				public int getAddress_ID () {
					return this.Address_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Contact_ID;
						
							result = prime * result + (int) this.Address_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out5Struct other = (out5Struct) obj;
		
						if (this.Contact_ID != other.Contact_ID)
							return false;
					
						if (this.Address_ID != other.Address_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(out5Struct other) {

		other.IUD = this.IUD;
	            other.Contact_ID = this.Contact_ID;
	            other.Address_ID = this.Address_ID;
	            
	}

	public void copyKeysDataTo(out5Struct other) {

		other.Contact_ID = this.Contact_ID;
	            	other.Address_ID = this.Address_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
			        this.Address_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// int
				
		            	dos.writeInt(this.Address_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Address_ID="+String.valueOf(Address_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Contact_ID, other.Contact_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Address_ID, other.Address_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out7Struct implements routines.system.IPersistableRow<out7Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public Integer Contact_ID;

				public Integer getContact_ID () {
					return this.Contact_ID;
				}
				
			    public Integer Address_ID;

				public Integer getAddress_ID () {
					return this.Address_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Contact_ID == null) ? 0 : this.Contact_ID.hashCode());
					
						result = prime * result + ((this.Address_ID == null) ? 0 : this.Address_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out7Struct other = (out7Struct) obj;
		
						if (this.Contact_ID == null) {
							if (other.Contact_ID != null)
								return false;
						
						} else if (!this.Contact_ID.equals(other.Contact_ID))
						
							return false;
					
						if (this.Address_ID == null) {
							if (other.Address_ID != null)
								return false;
						
						} else if (!this.Address_ID.equals(other.Address_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out7Struct other) {

		other.IUD = this.IUD;
	            other.Contact_ID = this.Contact_ID;
	            other.Address_ID = this.Address_ID;
	            
	}

	public void copyKeysDataTo(out7Struct other) {

		other.Contact_ID = this.Contact_ID;
	            	other.Address_ID = this.Address_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
						this.Contact_ID = readInteger(dis);
					
						this.Address_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// Integer
				
						writeInteger(this.Contact_ID,dos);
					
					// Integer
				
						writeInteger(this.Address_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Address_ID="+String.valueOf(Address_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Contact_ID, other.Contact_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Address_ID, other.Address_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];

	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public Integer Contact_ID;

				public Integer getContact_ID () {
					return this.Contact_ID;
				}
				
			    public Integer Address_ID;

				public Integer getAddress_ID () {
					return this.Address_ID;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
						this.Contact_ID = readInteger(dis);
					
						this.Address_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// Integer
				
						writeInteger(this.Contact_ID,dos);
					
					// Integer
				
						writeInteger(this.Address_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Address_ID="+String.valueOf(Address_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_10Struct implements routines.system.IPersistableRow<after_tDBInput_10Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public Integer Contact_ID;

				public Integer getContact_ID () {
					return this.Contact_ID;
				}
				
			    public Integer Address_ID;

				public Integer getAddress_ID () {
					return this.Address_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Contact_ID == null) ? 0 : this.Contact_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_10Struct other = (after_tDBInput_10Struct) obj;
		
						if (this.Contact_ID == null) {
							if (other.Contact_ID != null)
								return false;
						
						} else if (!this.Contact_ID.equals(other.Contact_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_10Struct other) {

		other.IUD = this.IUD;
	            other.Contact_ID = this.Contact_ID;
	            other.Address_ID = this.Address_ID;
	            
	}

	public void copyKeysDataTo(after_tDBInput_10Struct other) {

		other.Contact_ID = this.Contact_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
						this.Contact_ID = readInteger(dis);
					
						this.Address_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// Integer
				
						writeInteger(this.Contact_ID,dos);
					
					// Integer
				
						writeInteger(this.Address_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Address_ID="+String.valueOf(Address_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Contact_ID, other.Contact_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_11Process(globalMap);

		row7Struct row7 = new row7Struct();
out5Struct out5 = new out5Struct();
row4Struct row4 = new row4Struct();
out7Struct out7 = new out7Struct();






	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

String tableName_tDBOutput_5 = "Contact_Address_LDR";
boolean whetherReject_tDBOutput_5 = false;
   int batchSize_tDBOutput_5 = 10000;
   int batchSizeCounter_tDBOutput_5=0;



        int updateKeyCount_tDBOutput_5 = 2;
        if(updateKeyCount_tDBOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
    String dbname_tDBOutput_5 = "ldr_demo";
    String driverClass_tDBOutput_5 = "com.teradata.jdbc.TeraDriver";

    java.lang.Class.forName(driverClass_tDBOutput_5);
    String dbProperties_tDBOutput_5 = "";
	String url_tDBOutput_5 = null;
	if(dbProperties_tDBOutput_5 == null || dbProperties_tDBOutput_5.trim().length() == 0) {
		url_tDBOutput_5 = "jdbc:teradata://" + "192.168.197.128";
	} else {
	    url_tDBOutput_5 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
	}
    String dbUser_tDBOutput_5 = "LDR_DEMO";
 
	final String decryptedPassword_tDBOutput_5 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:ohTscuhC9vNlHrAjlektmsicI9z/Rq+E9ksORAUdxRAbf+gR");

    String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;

	
    java.sql.Connection conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5,dbUser_tDBOutput_5,dbPwd_tDBOutput_5);

	resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
        conn_tDBOutput_5.setAutoCommit(false);
        int commitEvery_tDBOutput_5 = 10000;
        int commitCounter_tDBOutput_5 = 0;
String dbschema_tDBOutput_5 = dbname_tDBOutput_5;
if(dbname_tDBOutput_5 == null || dbname_tDBOutput_5.trim().length() == 0) {
    tableName_tDBOutput_5 = "Contact_Address_LDR";
} else {
    tableName_tDBOutput_5 = dbname_tDBOutput_5 + "\".\"" + "Contact_Address_LDR";
}
int count_tDBOutput_5=0;
	 conn_tDBOutput_5.commit();
	    String update_tDBOutput_5 = "UPDATE \"" + tableName_tDBOutput_5 + "\" SET \"IUD\" = ? WHERE \"Contact_ID\" = ? AND \"Address_ID\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(update_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    


 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tJavaFlex_1 = 0;
		



int nb=0;


 



/**
 * [tJavaFlex_1 begin ] stop
 */




	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out7");
					}
				
		int tos_count_tDBOutput_6 = 0;
		





int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

String tableName_tDBOutput_6 = "Contact_Address_LDR";
boolean whetherReject_tDBOutput_6 = false;
   int batchSize_tDBOutput_6 = 10000;
   int batchSizeCounter_tDBOutput_6=0;



        int updateKeyCount_tDBOutput_6 = 2;
        if(updateKeyCount_tDBOutput_6 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
    String dbname_tDBOutput_6 = "ldr_demo";
    String driverClass_tDBOutput_6 = "com.teradata.jdbc.TeraDriver";

    java.lang.Class.forName(driverClass_tDBOutput_6);
    String dbProperties_tDBOutput_6 = "";
	String url_tDBOutput_6 = null;
	if(dbProperties_tDBOutput_6 == null || dbProperties_tDBOutput_6.trim().length() == 0) {
		url_tDBOutput_6 = "jdbc:teradata://" + "192.168.197.128";
	} else {
	    url_tDBOutput_6 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
	}
    String dbUser_tDBOutput_6 = "LDR_DEMO";
 
	final String decryptedPassword_tDBOutput_6 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:WhbvH+RmzRwJOmKxR+Rvcd39v3lbVOfF+baLM2tFk80seOvc");

    String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;

	
    java.sql.Connection conn_tDBOutput_6 = java.sql.DriverManager.getConnection(url_tDBOutput_6,dbUser_tDBOutput_6,dbPwd_tDBOutput_6);

	resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
        conn_tDBOutput_6.setAutoCommit(false);
        int commitEvery_tDBOutput_6 = 10000;
        int commitCounter_tDBOutput_6 = 0;
String dbschema_tDBOutput_6 = dbname_tDBOutput_6;
if(dbname_tDBOutput_6 == null || dbname_tDBOutput_6.trim().length() == 0) {
    tableName_tDBOutput_6 = "Contact_Address_LDR";
} else {
    tableName_tDBOutput_6 = dbname_tDBOutput_6 + "\".\"" + "Contact_Address_LDR";
}
int count_tDBOutput_6=0;
	 conn_tDBOutput_6.commit();
	    String update_tDBOutput_6 = "UPDATE \"" + tableName_tDBOutput_6 + "\" SET \"IUD\" = ? WHERE \"Contact_ID\" = ? AND \"Address_ID\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(update_tDBOutput_6);
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    


 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
					globalMap.get( "tHash_Lookup_row1" ))
					;					
					
	

row1Struct row1HashKey = new row1Struct();
row1Struct row1Default = new row1Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
	Integer Address_ID_1;
	Integer Address_ID_2;
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
out7Struct out7_tmp = new out7Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		

    
	
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_10 = java.lang.Class.forName(driverClass_tDBInput_10);
				String dbUser_tDBInput_10 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_10 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:787s8L+Obm2YAtkDyFrajn+IIv0QoA4opQlqFWDrClX5tzUb");
				
				String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;
				
			String dbProperties_tDBInput_10 = "";
			String url_tDBInput_10 = null;
			if(dbProperties_tDBInput_10 == null || dbProperties_tDBInput_10.trim().length() == 0) {
				url_tDBInput_10 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_10 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10,dbUser_tDBInput_10,dbPwd_tDBInput_10);
		        
				
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();
                stmt_tDBInput_10.setFetchSize(200000);

		    String dbquery_tDBInput_10 = "SELECT ldr_demo.Contact_Address_LDR.IUD,\n		ldr_demo.Contact_Address_LDR.Contact_ID,\n		ldr_demo.Contact_Address_LDR.Addr"
+"ess_ID\nFROM	ldr_demo.Contact_Address_LDR\nWhere Address_ID IS NOT NULL";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								row7.IUD = null;
							} else {
		                          
            row7.IUD = rs_tDBInput_10.getInt(1);
            if(rs_tDBInput_10.wasNull()){
                    row7.IUD = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								row7.Contact_ID = null;
							} else {
		                          
            row7.Contact_ID = rs_tDBInput_10.getInt(2);
            if(rs_tDBInput_10.wasNull()){
                    row7.Contact_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 3) {
								row7.Address_ID = null;
							} else {
		                          
            row7.Address_ID = rs_tDBInput_10.getInt(3);
            if(rs_tDBInput_10.wasNull()){
                    row7.Address_ID = null;
            }
		                    }
					



 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow1 = false;
       		  	    	
       		  	    	
 							row1Struct row1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row1HashKey.Contact_ID = row7.Contact_ID ;
                        		    		

								
		                        	row1HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row1.lookup( row1HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row1.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row1 != null && tHash_Lookup_row1.getCount(row1HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row1' and it contains more one result from keys :  row1.Contact_ID = '" + row1HashKey.Contact_ID + "'");
								} // G 071
							

							row1Struct row1 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row1Struct fromLookup_row1 = null;
							row1 = row1Default;
										 
							
								 
							
							
								if (tHash_Lookup_row1 !=null && tHash_Lookup_row1.hasNext()) { // G 099
								
							
								
								fromLookup_row1 = tHash_Lookup_row1.next();

							
							
								} // G 099
							
							

							if(fromLookup_row1 != null) {
								row1 = fromLookup_row1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;
Var.Address_ID_1 = Relational.ISNULL(row7.Address_ID) ? null : row7.Address_ID ;
Var.Address_ID_2 = Relational.ISNULL(row1.Address_ID) ? null : row1.Address_ID ;// ###############################
        // ###############################
        // # Output tables

out7 = null;
out5 = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'out7'
// # Filter conditions 
if( 

(row1.Contact_ID == row7.Contact_ID) && row1.Address_ID.equals(row7.Address_ID) && row1.DELETE_FLAG == 1 && !(Relational.ISNULL(row1.END_DATE))

 ) {
out7_tmp.IUD = 1;
out7_tmp.Contact_ID = row7.Contact_ID;
out7_tmp.Address_ID = row7.Address_ID;
out7 = out7_tmp;
} // closing filter/reject
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'out5'
// # Filter conditions 
if( rejectedInnerJoin_tMap_4 && (

Relational.ISNULL(row7.Contact_ID) || !row7.Contact_ID.equals(row1.Contact_ID) && !row7.Address_ID.equals(row1.Address_ID)

) ) {
out5_tmp.IUD = 1;
out5_tmp.Contact_ID = row7.Contact_ID ;
out5_tmp.Address_ID = row7.Address_ID ;
out5 = out5_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out5");
					}
					


	        				row4.IUD = out5.IUD;
	        				row4.Contact_ID = out5.Contact_ID;
	        				row4.Address_ID = out5.Address_ID;


nb++;

 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */
	
	/**
	 * [tJavaFlex_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					



        whetherReject_tDBOutput_5 = false;
                    if(row4.IUD == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_5.setInt(1, row4.IUD);
}

                    pstmt_tDBOutput_5.setInt(2 + count_tDBOutput_5, row4.Contact_ID);

                    pstmt_tDBOutput_5.setInt(3 + count_tDBOutput_5, row4.Address_ID);

                pstmt_tDBOutput_5.addBatch();
                batchSizeCounter_tDBOutput_5++;
                nb_line_tDBOutput_5++;
            if(!whetherReject_tDBOutput_5) {
            }
                if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                try {
                        batchSizeCounter_tDBOutput_5 = 0;
                        int countSum_tDBOutput_5 = 0;

                        for(int countEach_tDBOutput_5:pstmt_tDBOutput_5.executeBatch()) {
                            countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
                        }

                            updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
                }catch(java.sql.SQLException e_tDBOutput_5){
            java.sql.SQLException e3_tDBOutput_5 = e_tDBOutput_5;
                    boolean isFailure = false;
            while(e_tDBOutput_5 != null){
                if(e_tDBOutput_5.getErrorCode() == -2801){
                    System.out.println(" Message: " + e_tDBOutput_5.getMessage());
                    e_tDBOutput_5.printStackTrace();
                    System.out.println();
                }
                else if(e_tDBOutput_5.getErrorCode() == 1339){
                    isFailure = true;
                }
                else{
                    System.out.println(" Message: " + e_tDBOutput_5.getMessage());
                    e_tDBOutput_5.printStackTrace();
                }
                e_tDBOutput_5 = e_tDBOutput_5.getNextException();
            }
            if(isFailure && e_tDBOutput_5 != null){
                System.out.println(" Message: " + e_tDBOutput_5.getMessage());
                e_tDBOutput_5.printStackTrace();
            }
                System.err.println(e3_tDBOutput_5.getMessage());
                }
              }
                commitCounter_tDBOutput_5++;
                if(commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
                        try {
                                       if (batchSizeCounter_tDBOutput_5 > 0) {
                                           int countSum_tDBOutput_5 = 0;

                                           for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
                                               countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
                                           }

                                               updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
                                           batchSizeCounter_tDBOutput_5 = 0;
                                       }
                            conn_tDBOutput_5.commit();
                            commitCounter_tDBOutput_5 = 0;
                        }catch(java.sql.SQLException e_tDBOutput_5){
                    java.sql.SQLException e3_tDBOutput_5 = e_tDBOutput_5;
                            boolean isFailure = false;
                    while(e_tDBOutput_5 != null){
                        if(e_tDBOutput_5.getErrorCode() == -2801){
                            System.out.println(" Message: " + e_tDBOutput_5.getMessage());
                            e_tDBOutput_5.printStackTrace();
                            System.out.println();
                        }
                        else if(e_tDBOutput_5.getErrorCode() == 1339){
                            isFailure = true;
                        }
                        else{
                            System.out.println(" Message: " + e_tDBOutput_5.getMessage());
                            e_tDBOutput_5.printStackTrace();
                        }
                        e_tDBOutput_5 = e_tDBOutput_5.getNextException();
                    }
                    if(isFailure && e_tDBOutput_5 != null){
                        System.out.println(" Message: " + e_tDBOutput_5.getMessage());
                        e_tDBOutput_5.printStackTrace();
                    }
                        System.err.println(e3_tDBOutput_5.getMessage());
                        }
                }

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tJavaFlex_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 process_data_end ] stop
 */

} // End of branch "out5"




// Start of branch "out7"
if(out7 != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out7");
					}
					



        whetherReject_tDBOutput_6 = false;
                    if(out7.IUD == null) {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_6.setInt(1, out7.IUD);
}

                    if(out7.Contact_ID == null) {
pstmt_tDBOutput_6.setNull(2 + count_tDBOutput_6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_6.setInt(2 + count_tDBOutput_6, out7.Contact_ID);
}

                    if(out7.Address_ID == null) {
pstmt_tDBOutput_6.setNull(3 + count_tDBOutput_6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_6.setInt(3 + count_tDBOutput_6, out7.Address_ID);
}

                pstmt_tDBOutput_6.addBatch();
                batchSizeCounter_tDBOutput_6++;
                nb_line_tDBOutput_6++;
            if(!whetherReject_tDBOutput_6) {
            }
                if ((batchSize_tDBOutput_6 > 0) && (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
                try {
                        batchSizeCounter_tDBOutput_6 = 0;
                        int countSum_tDBOutput_6 = 0;

                        for(int countEach_tDBOutput_6:pstmt_tDBOutput_6.executeBatch()) {
                            countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
                        }

                            updatedCount_tDBOutput_6 += countSum_tDBOutput_6;
                }catch(java.sql.SQLException e_tDBOutput_6){
            java.sql.SQLException e3_tDBOutput_6 = e_tDBOutput_6;
                    boolean isFailure = false;
            while(e_tDBOutput_6 != null){
                if(e_tDBOutput_6.getErrorCode() == -2801){
                    System.out.println(" Message: " + e_tDBOutput_6.getMessage());
                    e_tDBOutput_6.printStackTrace();
                    System.out.println();
                }
                else if(e_tDBOutput_6.getErrorCode() == 1339){
                    isFailure = true;
                }
                else{
                    System.out.println(" Message: " + e_tDBOutput_6.getMessage());
                    e_tDBOutput_6.printStackTrace();
                }
                e_tDBOutput_6 = e_tDBOutput_6.getNextException();
            }
            if(isFailure && e_tDBOutput_6 != null){
                System.out.println(" Message: " + e_tDBOutput_6.getMessage());
                e_tDBOutput_6.printStackTrace();
            }
                System.err.println(e3_tDBOutput_6.getMessage());
                }
              }
                commitCounter_tDBOutput_6++;
                if(commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {
                        try {
                                       if (batchSizeCounter_tDBOutput_6 > 0) {
                                           int countSum_tDBOutput_6 = 0;

                                           for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
                                               countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
                                           }

                                               updatedCount_tDBOutput_6 += countSum_tDBOutput_6;
                                           batchSizeCounter_tDBOutput_6 = 0;
                                       }
                            conn_tDBOutput_6.commit();
                            commitCounter_tDBOutput_6 = 0;
                        }catch(java.sql.SQLException e_tDBOutput_6){
                    java.sql.SQLException e3_tDBOutput_6 = e_tDBOutput_6;
                            boolean isFailure = false;
                    while(e_tDBOutput_6 != null){
                        if(e_tDBOutput_6.getErrorCode() == -2801){
                            System.out.println(" Message: " + e_tDBOutput_6.getMessage());
                            e_tDBOutput_6.printStackTrace();
                            System.out.println();
                        }
                        else if(e_tDBOutput_6.getErrorCode() == 1339){
                            isFailure = true;
                        }
                        else{
                            System.out.println(" Message: " + e_tDBOutput_6.getMessage());
                            e_tDBOutput_6.printStackTrace();
                        }
                        e_tDBOutput_6 = e_tDBOutput_6.getNextException();
                    }
                    if(isFailure && e_tDBOutput_6 != null){
                        System.out.println(" Message: " + e_tDBOutput_6.getMessage());
                        e_tDBOutput_6.printStackTrace();
                    }
                        System.err.println(e3_tDBOutput_6.getMessage());
                        }
                }

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "out7"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	





	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
	if(conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {
	    

		
			conn_tDBInput_10.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);


 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row1 != null) {
						tHash_Lookup_row1.endGet();
					}
					globalMap.remove( "tHash_Lookup_row1" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	



globalMap.put("nb_line",nb);
if(nb==0)
{
globalMap.put("hasData",false);
}
else 
{
globalMap.put("hasData",true);
}

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());




/**
 * [tJavaFlex_1 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	




                try {
                    if ( batchSizeCounter_tDBOutput_5 > 0 ) { // do not commit empty batch, this is a jdbc error
                        int countSum_tDBOutput_5 = 0;
                        for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
                            countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
                        }

                            updatedCount_tDBOutput_5 += countSum_tDBOutput_5;

                        }
                //}catch (java.sql.BatchUpdateException e){
                }catch (java.sql.SQLException e){
            java.sql.SQLException e3 = e;
                    boolean isFailure = false;
                    int errorCode = 0;
            String sqlState = "";
            String message = "";
            while(e != null){
                if(e.getErrorCode() == -2801){
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                    System.out.println();
                }
                else if(e.getErrorCode() == 1339){
                    isFailure = true;
                } else{
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                }
                e = e.getNextException();
            }
            if(isFailure && e != null){
                System.out.println("[Message]: " + e.getMessage());
                e.printStackTrace();
            }
                System.err.println(e3.getMessage());
                }

        if(pstmt_tDBOutput_5 != null) {
            pstmt_tDBOutput_5.close();
            pstmt_tDBOutput_5 = null;
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);
            if (commitCounter_tDBOutput_5 > 0) {
                conn_tDBOutput_5.commit();
            }


        conn_tDBOutput_5.close();

        resourceMap.put("finish_tDBOutput_5", true);

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());

   			if ((Boolean)globalMap.get("hasData")) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tDBInput_15Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tDBOutput_5 end ] stop
 */







	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	




                try {
                    if ( batchSizeCounter_tDBOutput_6 > 0 ) { // do not commit empty batch, this is a jdbc error
                        int countSum_tDBOutput_6 = 0;
                        for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
                            countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
                        }

                            updatedCount_tDBOutput_6 += countSum_tDBOutput_6;

                        }
                //}catch (java.sql.BatchUpdateException e){
                }catch (java.sql.SQLException e){
            java.sql.SQLException e3 = e;
                    boolean isFailure = false;
                    int errorCode = 0;
            String sqlState = "";
            String message = "";
            while(e != null){
                if(e.getErrorCode() == -2801){
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                    System.out.println();
                }
                else if(e.getErrorCode() == 1339){
                    isFailure = true;
                } else{
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                }
                e = e.getNextException();
            }
            if(isFailure && e != null){
                System.out.println("[Message]: " + e.getMessage());
                e.printStackTrace();
            }
                System.err.println(e3.getMessage());
                }

        if(pstmt_tDBOutput_6 != null) {
            pstmt_tDBOutput_6.close();
            pstmt_tDBOutput_6 = null;
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);
            if (commitCounter_tDBOutput_6 > 0) {
                conn_tDBOutput_6.commit();
            }


        conn_tDBOutput_6.close();

        resourceMap.put("finish_tDBOutput_6", true);

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out7");
			  	}
			  	
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBInput_17Process(globalMap);



/**
 * [tDBOutput_6 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row1"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_5") == null){
            java.sql.Connection ctn_tDBOutput_5 = null;
            if((ctn_tDBOutput_5 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_5")) != null){
                try {
                    ctn_tDBOutput_5.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_5) {
                    String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :" + sqlEx_tDBOutput_5.getMessage();
                    System.err.println(errorMessage_tDBOutput_5);
                }
            }
        }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */







	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_6") == null){
            java.sql.Connection ctn_tDBOutput_6 = null;
            if((ctn_tDBOutput_6 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_6")) != null){
                try {
                    ctn_tDBOutput_6.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_6) {
                    String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :" + sqlEx_tDBOutput_6.getMessage();
                    System.err.println(errorMessage_tDBOutput_6);
                }
            }
        }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	

public void tDBInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_15", false);
		start_Hash.put("tDBInput_15", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_15";

	
		int tos_count_tDBInput_15 = 0;
		

    
	
		    int nb_line_tDBInput_15 = 0;
		    java.sql.Connection conn_tDBInput_15 = null;
				String driverClass_tDBInput_15 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_15 = java.lang.Class.forName(driverClass_tDBInput_15);
				String dbUser_tDBInput_15 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_15 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:VchfVPetXgMRo+/Y+O3jTT8wzxoYpw03s4QVSANVWC8fH6TF");
				
				String dbPwd_tDBInput_15 = decryptedPassword_tDBInput_15;
				
			String dbProperties_tDBInput_15 = "";
			String url_tDBInput_15 = null;
			if(dbProperties_tDBInput_15 == null || dbProperties_tDBInput_15.trim().length() == 0) {
				url_tDBInput_15 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_15 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_15 = java.sql.DriverManager.getConnection(url_tDBInput_15,dbUser_tDBInput_15,dbPwd_tDBInput_15);
		        
				
		    
			java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15.createStatement();
                stmt_tDBInput_15.setFetchSize(200000);

		    String dbquery_tDBInput_15 = "INSERT INTO CONTACT_ADDRESS_LDR_CORE (CONTACT_ID,ADDRESS_ID,ST_DATE,END_DATE,DELETE_FLAG)\nSELECT  CONTACT_ID,ADDRESS_I"
+"D,CURRENT_TIMESTAMP(3),NULL,0 FROM CONTACT_ADDRESS_LDR\nWHERE IUD = 1";
			

            	globalMap.put("tDBInput_15_QUERY",dbquery_tDBInput_15);
		    java.sql.ResultSet rs_tDBInput_15 = null;

		    try {
		    	rs_tDBInput_15 = stmt_tDBInput_15.executeQuery(dbquery_tDBInput_15);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15.getMetaData();
		    	int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15.getColumnCount();

		    String tmpContent_tDBInput_15 = null;
		    
		    
		    while (rs_tDBInput_15.next()) {
		        nb_line_tDBInput_15++;
		        



 



/**
 * [tDBInput_15 begin ] stop
 */
	
	/**
	 * [tDBInput_15 main ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 


	tos_count_tDBInput_15++;

/**
 * [tDBInput_15 main ] stop
 */
	
	/**
	 * [tDBInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 process_data_begin ] stop
 */
	
	/**
	 * [tDBInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_15 end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	





	}
}finally{
	if (rs_tDBInput_15 != null) {
		rs_tDBInput_15.close();
	}
	if (stmt_tDBInput_15 != null) {
		stmt_tDBInput_15.close();
	}
	if(conn_tDBInput_15 != null && !conn_tDBInput_15.isClosed()) {
	    

		
			conn_tDBInput_15.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_15_NB_LINE",nb_line_tDBInput_15);


 

ok_Hash.put("tDBInput_15", true);
end_Hash.put("tDBInput_15", System.currentTimeMillis());




/**
 * [tDBInput_15 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_15 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public Integer Contact_ID;

				public Integer getContact_ID () {
					return this.Contact_ID;
				}
				
			    public Integer Address_ID;

				public Integer getAddress_ID () {
					return this.Address_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Contact_ID == null) ? 0 : this.Contact_ID.hashCode());
					
						result = prime * result + ((this.Address_ID == null) ? 0 : this.Address_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.Contact_ID == null) {
							if (other.Contact_ID != null)
								return false;
						
						} else if (!this.Contact_ID.equals(other.Contact_ID))
						
							return false;
					
						if (this.Address_ID == null) {
							if (other.Address_ID != null)
								return false;
						
						} else if (!this.Address_ID.equals(other.Address_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.IUD = this.IUD;
	            other.Contact_ID = this.Contact_ID;
	            other.Address_ID = this.Address_ID;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.Contact_ID = this.Contact_ID;
	            	other.Address_ID = this.Address_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
						this.Contact_ID = readInteger(dis);
					
						this.Address_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// Integer
				
						writeInteger(this.Contact_ID,dos);
					
					// Integer
				
						writeInteger(this.Address_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Address_ID="+String.valueOf(Address_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Contact_ID, other.Contact_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Address_ID, other.Address_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tDBSCD_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBSCD_8", false);
		start_Hash.put("tDBSCD_8", System.currentTimeMillis());
		
	
	currentComponent="tDBSCD_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tDBSCD_8 = 0;
		



		class SCDSK_tDBSCD_8 {
private int hashCode;
public boolean hashCodeDirty = true;
Integer Contact_ID;
public boolean equals(Object obj) {
if (this == obj) return true;
if (obj == null) return false;
if (getClass() != obj.getClass()) return false;
final SCDSK_tDBSCD_8 other = (SCDSK_tDBSCD_8) obj;
if (this.Contact_ID == null) {
if (other.Contact_ID!= null)
return false;
} else if (!this.Contact_ID.equals(other.Contact_ID))
return false;

return true;
}
public int hashCode() {
if(hashCodeDirty) {
int prime = 31;hashCode = prime * hashCode + (Contact_ID == null ? 0 : Contact_ID.hashCode());
hashCodeDirty = false;
}
return hashCode;
}
}



	class SCDStruct_tDBSCD_8 {
private Integer Address_ID;
}


    int nb_line_update_tDBSCD_8 = 0;
    int nb_line_inserted_tDBSCD_8 = 0;
    String tableName_tDBSCD_8 = "Contact_Address_LDR_CORE";
    String dbName_tDBSCD_8 = "ldr_demo";


        java.lang.Class.forName("com.teradata.jdbc.TeraDriver");


            String connectionString_tDBSCD_8 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";



		 
	final String decryptedPassword_tDBSCD_8 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:SY3lzufepGW8feoXU+UBJLnSAbREYbWTjKOI8G0GWkCbOpxy");

        java.sql.Connection connection_tDBSCD_8 = java.sql.DriverManager.getConnection(connectionString_tDBSCD_8, "LDR_DEMO", decryptedPassword_tDBSCD_8);
    
        
    java.util.Calendar calendar_tDBSCD_8 = java.util.Calendar.getInstance();
    java.util.Calendar calendarYear0_tDBSCD_8 = java.util.Calendar.getInstance();
    
    calendar_tDBSCD_8.set(1, 0, 1, 0, 0, 0);
    calendarYear0_tDBSCD_8.set(0,0,0,0,0,0);
    
    final java.util.Date dateYear0_tDBSCD_8 = calendarYear0_tDBSCD_8.getTime();
    final long year1_tDBSCD_8 = calendar_tDBSCD_8.getTime().getTime();
    
    calendar_tDBSCD_8.set(10000, 0, 1, 0, 0, 0);
    final long year10000_tDBSCD_8 = calendar_tDBSCD_8.getTime().getTime();
    long date_tDBSCD_8 = 0;
    
    String dateStr_tDBSCD_8 = null;
    String tmpValue_tDBSCD_8 = null;
    

        String search_tDBSCD_8 = "SELECT \"Contact_ID\", \"Address_ID\" FROM \"" + tableName_tDBSCD_8 + "\" WHERE \"END_DATE\" IS NULL";
        java.sql.Statement statement_tDBSCD_8 = connection_tDBSCD_8.createStatement();
        java.sql.ResultSet resultSet_tDBSCD_8 = statement_tDBSCD_8.executeQuery(search_tDBSCD_8);
        java.util.Map<SCDSK_tDBSCD_8, SCDStruct_tDBSCD_8> cache_tDBSCD_8 = new java.util.HashMap<SCDSK_tDBSCD_8, SCDStruct_tDBSCD_8>();

        while(resultSet_tDBSCD_8.next()) {
            SCDSK_tDBSCD_8 sk_tDBSCD_8 = new SCDSK_tDBSCD_8();
            SCDStruct_tDBSCD_8 row_tDBSCD_8 = new SCDStruct_tDBSCD_8();


                    if(resultSet_tDBSCD_8.getObject(1) != null) {
                        sk_tDBSCD_8.Contact_ID = resultSet_tDBSCD_8.getInt(1);
                    }


                    if(resultSet_tDBSCD_8.getObject(2) != null) {
                        row_tDBSCD_8.Address_ID = resultSet_tDBSCD_8.getInt(2);
                    }

            cache_tDBSCD_8.put(sk_tDBSCD_8, row_tDBSCD_8);
        }
        resultSet_tDBSCD_8.close();
        statement_tDBSCD_8.close();

    String insertionSQL_tDBSCD_8 = "INSERT INTO \"" + tableName_tDBSCD_8 + "\"(\"Contact_ID\", \"Address_ID\", \"ST_DATE\", \"END_DATE\") VALUES(?, ?, ?, ?)";
    java.sql.PreparedStatement insertionStatement_tDBSCD_8 = connection_tDBSCD_8.prepareStatement(insertionSQL_tDBSCD_8);


            insertionStatement_tDBSCD_8.setTimestamp(3, new java.sql.Timestamp(start_Hash.get("tDBSCD_8")));


            insertionStatement_tDBSCD_8.setNull(4, java.sql.Types.DATE);
        String updateSQLForType2_tDBSCD_8 = "UPDATE \"" + tableName_tDBSCD_8 + "\" SET \"END_DATE\" = ? WHERE \"Contact_ID\" = ? AND \"END_DATE\" IS NULL";
        java.sql.PreparedStatement updateForType2_tDBSCD_8 = connection_tDBSCD_8.prepareStatement(updateSQLForType2_tDBSCD_8);

            updateForType2_tDBSCD_8.setTimestamp(1, new java.sql.Timestamp(start_Hash.get("tDBSCD_8")));

    

        SCDSK_tDBSCD_8 lookUpKey_tDBSCD_8 = null;        


    SCDStruct_tDBSCD_8 lookUpValue_tDBSCD_8 = null;
 



/**
 * [tDBSCD_8 begin ] stop
 */



	
	/**
	 * [tDBInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_17", false);
		start_Hash.put("tDBInput_17", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_17";

	
		int tos_count_tDBInput_17 = 0;
		

    
	
		    int nb_line_tDBInput_17 = 0;
		    java.sql.Connection conn_tDBInput_17 = null;
				String driverClass_tDBInput_17 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_17 = java.lang.Class.forName(driverClass_tDBInput_17);
				String dbUser_tDBInput_17 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_17 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:C6Gq/aihM/MmX5Uzv5uzV1oOnQmv0wO/Ih4oMhewOs5bMwOe");
				
				String dbPwd_tDBInput_17 = decryptedPassword_tDBInput_17;
				
			String dbProperties_tDBInput_17 = "";
			String url_tDBInput_17 = null;
			if(dbProperties_tDBInput_17 == null || dbProperties_tDBInput_17.trim().length() == 0) {
				url_tDBInput_17 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_17 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_17 = java.sql.DriverManager.getConnection(url_tDBInput_17,dbUser_tDBInput_17,dbPwd_tDBInput_17);
		        
				
		    
			java.sql.Statement stmt_tDBInput_17 = conn_tDBInput_17.createStatement();
                stmt_tDBInput_17.setFetchSize(200000);

		    String dbquery_tDBInput_17 = "SELECT ldr_demo.Contact_Address_LDR.IUD,\n		ldr_demo.Contact_Address_LDR.Contact_ID,\n		ldr_demo.Contact_Address_LDR.Addr"
+"ess_ID\nFROM	ldr_demo.Contact_Address_LDR\nWhere IUD = 1 ";
			

            	globalMap.put("tDBInput_17_QUERY",dbquery_tDBInput_17);
		    java.sql.ResultSet rs_tDBInput_17 = null;

		    try {
		    	rs_tDBInput_17 = stmt_tDBInput_17.executeQuery(dbquery_tDBInput_17);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_17 = rs_tDBInput_17.getMetaData();
		    	int colQtyInRs_tDBInput_17 = rsmd_tDBInput_17.getColumnCount();

		    String tmpContent_tDBInput_17 = null;
		    
		    
		    while (rs_tDBInput_17.next()) {
		        nb_line_tDBInput_17++;
		        
							if(colQtyInRs_tDBInput_17 < 1) {
								row3.IUD = null;
							} else {
		                          
            row3.IUD = rs_tDBInput_17.getInt(1);
            if(rs_tDBInput_17.wasNull()){
                    row3.IUD = null;
            }
		                    }
							if(colQtyInRs_tDBInput_17 < 2) {
								row3.Contact_ID = null;
							} else {
		                          
            row3.Contact_ID = rs_tDBInput_17.getInt(2);
            if(rs_tDBInput_17.wasNull()){
                    row3.Contact_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_17 < 3) {
								row3.Address_ID = null;
							} else {
		                          
            row3.Address_ID = rs_tDBInput_17.getInt(3);
            if(rs_tDBInput_17.wasNull()){
                    row3.Address_ID = null;
            }
		                    }
					



 



/**
 * [tDBInput_17 begin ] stop
 */
	
	/**
	 * [tDBInput_17 main ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 


	tos_count_tDBInput_17++;

/**
 * [tDBInput_17 main ] stop
 */
	
	/**
	 * [tDBInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tDBSCD_8 main ] start
	 */

	

	
	
	currentComponent="tDBSCD_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					


	try {
        lookUpKey_tDBSCD_8 = new SCDSK_tDBSCD_8();

            lookUpKey_tDBSCD_8.Contact_ID = row3.Contact_ID;


        lookUpKey_tDBSCD_8.hashCodeDirty = true;
        lookUpValue_tDBSCD_8 = cache_tDBSCD_8.get(lookUpKey_tDBSCD_8);
 
   
    if(lookUpValue_tDBSCD_8 == null) {


            lookUpValue_tDBSCD_8 = new SCDStruct_tDBSCD_8();

        
                    if(row3.Contact_ID == null) {
insertionStatement_tDBSCD_8.setNull(1, java.sql.Types.INTEGER);
} else {
insertionStatement_tDBSCD_8.setInt(1, row3.Contact_ID);
}


                    if(row3.Address_ID == null) {
insertionStatement_tDBSCD_8.setNull(2, java.sql.Types.INTEGER);
} else {
insertionStatement_tDBSCD_8.setInt(2, row3.Address_ID);
}



        nb_line_inserted_tDBSCD_8 += insertionStatement_tDBSCD_8.executeUpdate();


    } else {


            if((lookUpValue_tDBSCD_8.Address_ID == null && row3.Address_ID!= null) || (lookUpValue_tDBSCD_8.Address_ID != null && !lookUpValue_tDBSCD_8.Address_ID.equals(row3.Address_ID))) {


                    if(row3.Contact_ID == null) {
updateForType2_tDBSCD_8.setNull(2, java.sql.Types.INTEGER);
} else {
updateForType2_tDBSCD_8.setInt(2, row3.Contact_ID);
}



                nb_line_update_tDBSCD_8 += updateForType2_tDBSCD_8.executeUpdate();

                            if(row3.Contact_ID == null) {
insertionStatement_tDBSCD_8.setNull(1, java.sql.Types.INTEGER);
} else {
insertionStatement_tDBSCD_8.setInt(1, row3.Contact_ID);
}


                            if(row3.Address_ID == null) {
insertionStatement_tDBSCD_8.setNull(2, java.sql.Types.INTEGER);
} else {
insertionStatement_tDBSCD_8.setInt(2, row3.Address_ID);
}



                nb_line_inserted_tDBSCD_8 += insertionStatement_tDBSCD_8.executeUpdate();

            }


    }
    
	} catch (java.lang.Exception e) {//catch

                System.err.print(e.getMessage());

	}//end catch


                lookUpValue_tDBSCD_8.Address_ID = row3.Address_ID;

        cache_tDBSCD_8.put(lookUpKey_tDBSCD_8, lookUpValue_tDBSCD_8);
 


	tos_count_tDBSCD_8++;

/**
 * [tDBSCD_8 main ] stop
 */
	
	/**
	 * [tDBSCD_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBSCD_8";

	

 



/**
 * [tDBSCD_8 process_data_begin ] stop
 */
	
	/**
	 * [tDBSCD_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBSCD_8";

	

 



/**
 * [tDBSCD_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_17 end ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	





	}
}finally{
	if (rs_tDBInput_17 != null) {
		rs_tDBInput_17.close();
	}
	if (stmt_tDBInput_17 != null) {
		stmt_tDBInput_17.close();
	}
	if(conn_tDBInput_17 != null && !conn_tDBInput_17.isClosed()) {
	    

		
			conn_tDBInput_17.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_17_NB_LINE",nb_line_tDBInput_17);


 

ok_Hash.put("tDBInput_17", true);
end_Hash.put("tDBInput_17", System.currentTimeMillis());




/**
 * [tDBInput_17 end ] stop
 */

	
	/**
	 * [tDBSCD_8 end ] start
	 */

	

	
	
	currentComponent="tDBSCD_8";

	


    insertionStatement_tDBSCD_8.close();

        updateForType2_tDBSCD_8.close();


        if(connection_tDBSCD_8 != null && !connection_tDBSCD_8.isClosed()) {
            connection_tDBSCD_8.close();
        }


    globalMap.put("tDBSCD_8_NB_LINE_UPDATED", nb_line_update_tDBSCD_8);
    globalMap.put("tDBSCD_8_NB_LINE_INSERTED", nb_line_inserted_tDBSCD_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tDBSCD_8", true);
end_Hash.put("tDBSCD_8", System.currentTimeMillis());




/**
 * [tDBSCD_8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_17 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 finally ] stop
 */

	
	/**
	 * [tDBSCD_8 finally ] start
	 */

	

	
	
	currentComponent="tDBSCD_8";

	

 



/**
 * [tDBSCD_8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableComparableLookupRow<row1Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer Contact_ID;

				public Integer getContact_ID () {
					return this.Contact_ID;
				}
				
			    public Integer Address_ID;

				public Integer getAddress_ID () {
					return this.Address_ID;
				}
				
			    public java.util.Date ST_DATE;

				public java.util.Date getST_DATE () {
					return this.ST_DATE;
				}
				
			    public java.util.Date END_DATE;

				public java.util.Date getEND_DATE () {
					return this.END_DATE;
				}
				
			    public int DELETE_FLAG;

				public int getDELETE_FLAG () {
					return this.DELETE_FLAG;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Contact_ID == null) ? 0 : this.Contact_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.Contact_ID == null) {
							if (other.Contact_ID != null)
								return false;
						
						} else if (!this.Contact_ID.equals(other.Contact_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.Contact_ID = this.Contact_ID;
	            other.Address_ID = this.Address_ID;
	            other.ST_DATE = this.ST_DATE;
	            other.END_DATE = this.END_DATE;
	            other.DELETE_FLAG = this.DELETE_FLAG;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.Contact_ID = this.Contact_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2) {

        	try {

        		int length = 0;
		
						this.Contact_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Contact_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Address_ID = readInteger(dis,ois);
					
						this.ST_DATE = readDate(dis,ois);
					
						this.END_DATE = readDate(dis,ois);
					
			            this.DELETE_FLAG = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.Address_ID, dos, oos);
					
						writeDate(this.ST_DATE, dos, oos);
					
						writeDate(this.END_DATE, dos, oos);
					
		            	dos.writeInt(this.DELETE_FLAG);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Address_ID="+String.valueOf(Address_ID));
		sb.append(",ST_DATE="+String.valueOf(ST_DATE));
		sb.append(",END_DATE="+String.valueOf(END_DATE));
		sb.append(",DELETE_FLAG="+String.valueOf(DELETE_FLAG));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Contact_ID, other.Contact_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tAdvancedHash_row1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row1", false);
		start_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tAdvancedHash_row1 = 0;
		

			   		// connection name:row1
			   		// source node:tDBInput_11 - inputs:(after_tDBInput_10) outputs:(row1,row1) | target node:tAdvancedHash_row1 - inputs:(row1) outputs:()
			   		// linked node: tMap_4 - inputs:(row7,row1) outputs:(out5,out7)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row1Struct>getLookup(matchingModeEnum_row1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row1 begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		

    
	
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_11 = java.lang.Class.forName(driverClass_tDBInput_11);
				String dbUser_tDBInput_11 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_11 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:hCENVxwVSoQjUGf3RYDspMh7YWdztX3QAaWyzfcrhxFfHv3N");
				
				String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;
				
			String dbProperties_tDBInput_11 = "";
			String url_tDBInput_11 = null;
			if(dbProperties_tDBInput_11 == null || dbProperties_tDBInput_11.trim().length() == 0) {
				url_tDBInput_11 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_11 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_11 = java.sql.DriverManager.getConnection(url_tDBInput_11,dbUser_tDBInput_11,dbPwd_tDBInput_11);
		        
				
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();
                stmt_tDBInput_11.setFetchSize(200000);

		    String dbquery_tDBInput_11 = "SELECT ldr_demo.Contact_Address_LDR_CORE.Contact_ID,\n		ldr_demo.Contact_Address_LDR_CORE.Address_ID,\n		ldr_demo.Contact"
+"_Address_LDR_CORE.ST_DATE,\n		ldr_demo.Contact_Address_LDR_CORE.END_DATE,\n		ldr_demo.Contact_Address_LDR_CORE.DELETE_FLAG"
+"\nFROM	ldr_demo.Contact_Address_LDR_CORE";
			

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								row1.Contact_ID = null;
							} else {
		                          
            row1.Contact_ID = rs_tDBInput_11.getInt(1);
            if(rs_tDBInput_11.wasNull()){
                    row1.Contact_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								row1.Address_ID = null;
							} else {
		                          
            row1.Address_ID = rs_tDBInput_11.getInt(2);
            if(rs_tDBInput_11.wasNull()){
                    row1.Address_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 3) {
								row1.ST_DATE = null;
							} else {
										
			row1.ST_DATE = routines.system.JDBCUtil.getDate(rs_tDBInput_11, 3);
		                    }
							if(colQtyInRs_tDBInput_11 < 4) {
								row1.END_DATE = null;
							} else {
										
			row1.END_DATE = routines.system.JDBCUtil.getDate(rs_tDBInput_11, 4);
		                    }
							if(colQtyInRs_tDBInput_11 < 5) {
								row1.DELETE_FLAG = 0;
							} else {
		                          
            row1.DELETE_FLAG = rs_tDBInput_11.getInt(5);
            if(rs_tDBInput_11.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					



 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					


			   
			   

					row1Struct row1_HashRow = new row1Struct();
		   	   	   
				
				row1_HashRow.Contact_ID = row1.Contact_ID;
				
				row1_HashRow.Address_ID = row1.Address_ID;
				
				row1_HashRow.ST_DATE = row1.ST_DATE;
				
				row1_HashRow.END_DATE = row1.END_DATE;
				
				row1_HashRow.DELETE_FLAG = row1.DELETE_FLAG;
				
			tHash_Lookup_row1.put(row1_HashRow);
			
            




 


	tos_count_tAdvancedHash_row1++;

/**
 * [tAdvancedHash_row1 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	





	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
	if(conn_tDBInput_11 != null && !conn_tDBInput_11.isClosed()) {
	    

		
			conn_tDBInput_11.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);


 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());




/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

tHash_Lookup_row1.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row1", true);
end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());




/**
 * [tAdvancedHash_row1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public Integer Contact_ID;

				public Integer getContact_ID () {
					return this.Contact_ID;
				}
				
			    public Integer Address_ID;

				public Integer getAddress_ID () {
					return this.Address_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Contact_ID == null) ? 0 : this.Contact_ID.hashCode());
					
						result = prime * result + ((this.Address_ID == null) ? 0 : this.Address_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.Contact_ID == null) {
							if (other.Contact_ID != null)
								return false;
						
						} else if (!this.Contact_ID.equals(other.Contact_ID))
						
							return false;
					
						if (this.Address_ID == null) {
							if (other.Address_ID != null)
								return false;
						
						} else if (!this.Address_ID.equals(other.Address_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.IUD = this.IUD;
	            other.Contact_ID = this.Contact_ID;
	            other.Address_ID = this.Address_ID;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.Contact_ID = this.Contact_ID;
	            	other.Address_ID = this.Address_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
						this.Contact_ID = readInteger(dis);
					
						this.Address_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// Integer
				
						writeInteger(this.Contact_ID,dos);
					
					// Integer
				
						writeInteger(this.Address_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Address_ID="+String.valueOf(Address_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Contact_ID, other.Contact_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Address_ID, other.Address_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tDBOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_7", false);
		start_Hash.put("tDBOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tDBOutput_7 = 0;
		





int nb_line_tDBOutput_7 = 0;
int nb_line_update_tDBOutput_7 = 0;
int nb_line_inserted_tDBOutput_7 = 0;
int nb_line_deleted_tDBOutput_7 = 0;
int nb_line_rejected_tDBOutput_7 = 0;

int deletedCount_tDBOutput_7=0;
int updatedCount_tDBOutput_7=0;
int insertedCount_tDBOutput_7=0;
int rejectedCount_tDBOutput_7=0;

String tableName_tDBOutput_7 = "Contact_Address_LDR";
boolean whetherReject_tDBOutput_7 = false;
   int batchSize_tDBOutput_7 = 10000;
   int batchSizeCounter_tDBOutput_7=0;



        int updateKeyCount_tDBOutput_7 = 2;
        if(updateKeyCount_tDBOutput_7 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
    String dbname_tDBOutput_7 = "ldr_demo";
    String driverClass_tDBOutput_7 = "com.teradata.jdbc.TeraDriver";

    java.lang.Class.forName(driverClass_tDBOutput_7);
    String dbProperties_tDBOutput_7 = "";
	String url_tDBOutput_7 = null;
	if(dbProperties_tDBOutput_7 == null || dbProperties_tDBOutput_7.trim().length() == 0) {
		url_tDBOutput_7 = "jdbc:teradata://" + "192.168.197.128";
	} else {
	    url_tDBOutput_7 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
	}
    String dbUser_tDBOutput_7 = "LDR_DEMO";
 
	final String decryptedPassword_tDBOutput_7 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:zezpfVHapiX9hHPCXiYOxLNIKyMjJJJDKILBuQ4+mOcE6qPc");

    String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;

	
    java.sql.Connection conn_tDBOutput_7 = java.sql.DriverManager.getConnection(url_tDBOutput_7,dbUser_tDBOutput_7,dbPwd_tDBOutput_7);

	resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
        conn_tDBOutput_7.setAutoCommit(false);
        int commitEvery_tDBOutput_7 = 10000;
        int commitCounter_tDBOutput_7 = 0;
String dbschema_tDBOutput_7 = dbname_tDBOutput_7;
if(dbname_tDBOutput_7 == null || dbname_tDBOutput_7.trim().length() == 0) {
    tableName_tDBOutput_7 = "Contact_Address_LDR";
} else {
    tableName_tDBOutput_7 = dbname_tDBOutput_7 + "\".\"" + "Contact_Address_LDR";
}
int count_tDBOutput_7=0;
	 conn_tDBOutput_7.commit();
	    String update_tDBOutput_7 = "UPDATE \"" + tableName_tDBOutput_7 + "\" SET \"IUD\" = ? WHERE \"Contact_ID\" = ? AND \"Address_ID\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(update_tDBOutput_7);
	    resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);
	    


 



/**
 * [tDBOutput_7 begin ] stop
 */



	
	/**
	 * [tDBInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_18", false);
		start_Hash.put("tDBInput_18", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_18";

	
		int tos_count_tDBInput_18 = 0;
		

    
	
		    int nb_line_tDBInput_18 = 0;
		    java.sql.Connection conn_tDBInput_18 = null;
				String driverClass_tDBInput_18 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_18 = java.lang.Class.forName(driverClass_tDBInput_18);
				String dbUser_tDBInput_18 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_18 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:LcrK+UcUCTNiWm1HZxCP4R5oBuNKuFWrz2/0WRzl6WfNnRi9");
				
				String dbPwd_tDBInput_18 = decryptedPassword_tDBInput_18;
				
			String dbProperties_tDBInput_18 = "";
			String url_tDBInput_18 = null;
			if(dbProperties_tDBInput_18 == null || dbProperties_tDBInput_18.trim().length() == 0) {
				url_tDBInput_18 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_18 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_18 = java.sql.DriverManager.getConnection(url_tDBInput_18,dbUser_tDBInput_18,dbPwd_tDBInput_18);
		        
				
		    
			java.sql.Statement stmt_tDBInput_18 = conn_tDBInput_18.createStatement();
                stmt_tDBInput_18.setFetchSize(200000);

		    String dbquery_tDBInput_18 = "SELECT DISTINCT '2' AS IUD ,CONTACT_ADDRESS_LDR.CONTACT_ID,CONTACT_ADDRESS_LDR.ADDRESS_ID \nFROM CONTACT_ADDRESS_LDR\nI"
+"NNER JOIN CONTACT_ADDRESS_LDR_CORE\nON CONTACT_ADDRESS_LDR.CONTACT_ID = CONTACT_ADDRESS_LDR_CORE.CONTACT_ID\nWHERE CONTA"
+"CT_ADDRESS_LDR.ADDRESS_ID <> CONTACT_ADDRESS_LDR_CORE.ADDRESS_ID;";
			

            	globalMap.put("tDBInput_18_QUERY",dbquery_tDBInput_18);
		    java.sql.ResultSet rs_tDBInput_18 = null;

		    try {
		    	rs_tDBInput_18 = stmt_tDBInput_18.executeQuery(dbquery_tDBInput_18);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_18 = rs_tDBInput_18.getMetaData();
		    	int colQtyInRs_tDBInput_18 = rsmd_tDBInput_18.getColumnCount();

		    String tmpContent_tDBInput_18 = null;
		    
		    
		    while (rs_tDBInput_18.next()) {
		        nb_line_tDBInput_18++;
		        
							if(colQtyInRs_tDBInput_18 < 1) {
								row5.IUD = null;
							} else {
		                          
            row5.IUD = rs_tDBInput_18.getInt(1);
            if(rs_tDBInput_18.wasNull()){
                    row5.IUD = null;
            }
		                    }
							if(colQtyInRs_tDBInput_18 < 2) {
								row5.Contact_ID = null;
							} else {
		                          
            row5.Contact_ID = rs_tDBInput_18.getInt(2);
            if(rs_tDBInput_18.wasNull()){
                    row5.Contact_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_18 < 3) {
								row5.Address_ID = null;
							} else {
		                          
            row5.Address_ID = rs_tDBInput_18.getInt(3);
            if(rs_tDBInput_18.wasNull()){
                    row5.Address_ID = null;
            }
		                    }
					



 



/**
 * [tDBInput_18 begin ] stop
 */
	
	/**
	 * [tDBInput_18 main ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

 


	tos_count_tDBInput_18++;

/**
 * [tDBInput_18 main ] stop
 */
	
	/**
	 * [tDBInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

 



/**
 * [tDBInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_7 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					



        whetherReject_tDBOutput_7 = false;
                    if(row5.IUD == null) {
pstmt_tDBOutput_7.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setInt(1, row5.IUD);
}

                    if(row5.Contact_ID == null) {
pstmt_tDBOutput_7.setNull(2 + count_tDBOutput_7, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setInt(2 + count_tDBOutput_7, row5.Contact_ID);
}

                    if(row5.Address_ID == null) {
pstmt_tDBOutput_7.setNull(3 + count_tDBOutput_7, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setInt(3 + count_tDBOutput_7, row5.Address_ID);
}

                pstmt_tDBOutput_7.addBatch();
                batchSizeCounter_tDBOutput_7++;
                nb_line_tDBOutput_7++;
            if(!whetherReject_tDBOutput_7) {
            }
                if ((batchSize_tDBOutput_7 > 0) && (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {
                try {
                        batchSizeCounter_tDBOutput_7 = 0;
                        int countSum_tDBOutput_7 = 0;

                        for(int countEach_tDBOutput_7:pstmt_tDBOutput_7.executeBatch()) {
                            countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
                        }

                            updatedCount_tDBOutput_7 += countSum_tDBOutput_7;
                }catch(java.sql.SQLException e_tDBOutput_7){
            java.sql.SQLException e3_tDBOutput_7 = e_tDBOutput_7;
                    boolean isFailure = false;
            while(e_tDBOutput_7 != null){
                if(e_tDBOutput_7.getErrorCode() == -2801){
                    System.out.println(" Message: " + e_tDBOutput_7.getMessage());
                    e_tDBOutput_7.printStackTrace();
                    System.out.println();
                }
                else if(e_tDBOutput_7.getErrorCode() == 1339){
                    isFailure = true;
                }
                else{
                    System.out.println(" Message: " + e_tDBOutput_7.getMessage());
                    e_tDBOutput_7.printStackTrace();
                }
                e_tDBOutput_7 = e_tDBOutput_7.getNextException();
            }
            if(isFailure && e_tDBOutput_7 != null){
                System.out.println(" Message: " + e_tDBOutput_7.getMessage());
                e_tDBOutput_7.printStackTrace();
            }
                System.err.println(e3_tDBOutput_7.getMessage());
                }
              }
                commitCounter_tDBOutput_7++;
                if(commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {
                        try {
                                       if (batchSizeCounter_tDBOutput_7 > 0) {
                                           int countSum_tDBOutput_7 = 0;

                                           for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
                                               countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
                                           }

                                               updatedCount_tDBOutput_7 += countSum_tDBOutput_7;
                                           batchSizeCounter_tDBOutput_7 = 0;
                                       }
                            conn_tDBOutput_7.commit();
                            commitCounter_tDBOutput_7 = 0;
                        }catch(java.sql.SQLException e_tDBOutput_7){
                    java.sql.SQLException e3_tDBOutput_7 = e_tDBOutput_7;
                            boolean isFailure = false;
                    while(e_tDBOutput_7 != null){
                        if(e_tDBOutput_7.getErrorCode() == -2801){
                            System.out.println(" Message: " + e_tDBOutput_7.getMessage());
                            e_tDBOutput_7.printStackTrace();
                            System.out.println();
                        }
                        else if(e_tDBOutput_7.getErrorCode() == 1339){
                            isFailure = true;
                        }
                        else{
                            System.out.println(" Message: " + e_tDBOutput_7.getMessage());
                            e_tDBOutput_7.printStackTrace();
                        }
                        e_tDBOutput_7 = e_tDBOutput_7.getNextException();
                    }
                    if(isFailure && e_tDBOutput_7 != null){
                        System.out.println(" Message: " + e_tDBOutput_7.getMessage());
                        e_tDBOutput_7.printStackTrace();
                    }
                        System.err.println(e3_tDBOutput_7.getMessage());
                        }
                }

 


	tos_count_tDBOutput_7++;

/**
 * [tDBOutput_7 main ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

 



/**
 * [tDBInput_18 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_18 end ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	





	}
}finally{
	if (rs_tDBInput_18 != null) {
		rs_tDBInput_18.close();
	}
	if (stmt_tDBInput_18 != null) {
		stmt_tDBInput_18.close();
	}
	if(conn_tDBInput_18 != null && !conn_tDBInput_18.isClosed()) {
	    

		
			conn_tDBInput_18.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_18_NB_LINE",nb_line_tDBInput_18);


 

ok_Hash.put("tDBInput_18", true);
end_Hash.put("tDBInput_18", System.currentTimeMillis());




/**
 * [tDBInput_18 end ] stop
 */

	
	/**
	 * [tDBOutput_7 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	




                try {
                    if ( batchSizeCounter_tDBOutput_7 > 0 ) { // do not commit empty batch, this is a jdbc error
                        int countSum_tDBOutput_7 = 0;
                        for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
                            countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
                        }

                            updatedCount_tDBOutput_7 += countSum_tDBOutput_7;

                        }
                //}catch (java.sql.BatchUpdateException e){
                }catch (java.sql.SQLException e){
            java.sql.SQLException e3 = e;
                    boolean isFailure = false;
                    int errorCode = 0;
            String sqlState = "";
            String message = "";
            while(e != null){
                if(e.getErrorCode() == -2801){
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                    System.out.println();
                }
                else if(e.getErrorCode() == 1339){
                    isFailure = true;
                } else{
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                }
                e = e.getNextException();
            }
            if(isFailure && e != null){
                System.out.println("[Message]: " + e.getMessage());
                e.printStackTrace();
            }
                System.err.println(e3.getMessage());
                }

        if(pstmt_tDBOutput_7 != null) {
            pstmt_tDBOutput_7.close();
            pstmt_tDBOutput_7 = null;
            resourceMap.remove("pstmt_tDBOutput_7");
        }
    resourceMap.put("statementClosed_tDBOutput_7", true);
            if (commitCounter_tDBOutput_7 > 0) {
                conn_tDBOutput_7.commit();
            }


        conn_tDBOutput_7.close();

        resourceMap.put("finish_tDBOutput_7", true);

	nb_line_deleted_tDBOutput_7=nb_line_deleted_tDBOutput_7+ deletedCount_tDBOutput_7;
	nb_line_update_tDBOutput_7=nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
	nb_line_inserted_tDBOutput_7=nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
	nb_line_rejected_tDBOutput_7=nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;
	
        globalMap.put("tDBOutput_7_NB_LINE",nb_line_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_UPDATED",nb_line_update_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_DELETED",nb_line_deleted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tDBOutput_7", true);
end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBInput_19Process(globalMap);



/**
 * [tDBOutput_7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_18 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

 



/**
 * [tDBInput_18 finally ] stop
 */

	
	/**
	 * [tDBOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
                if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_7")) != null) {
                    pstmtToClose_tDBOutput_7.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_7") == null){
            java.sql.Connection ctn_tDBOutput_7 = null;
            if((ctn_tDBOutput_7 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_7")) != null){
                try {
                    ctn_tDBOutput_7.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_7) {
                    String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :" + sqlEx_tDBOutput_7.getMessage();
                    System.err.println(errorMessage_tDBOutput_7);
                }
            }
        }
    }
 



/**
 * [tDBOutput_7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public Integer Contact_ID;

				public Integer getContact_ID () {
					return this.Contact_ID;
				}
				
			    public Integer Address_ID;

				public Integer getAddress_ID () {
					return this.Address_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Contact_ID == null) ? 0 : this.Contact_ID.hashCode());
					
						result = prime * result + ((this.Address_ID == null) ? 0 : this.Address_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.Contact_ID == null) {
							if (other.Contact_ID != null)
								return false;
						
						} else if (!this.Contact_ID.equals(other.Contact_ID))
						
							return false;
					
						if (this.Address_ID == null) {
							if (other.Address_ID != null)
								return false;
						
						} else if (!this.Address_ID.equals(other.Address_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.IUD = this.IUD;
	            other.Contact_ID = this.Contact_ID;
	            other.Address_ID = this.Address_ID;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.Contact_ID = this.Contact_ID;
	            	other.Address_ID = this.Address_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
						this.Contact_ID = readInteger(dis);
					
						this.Address_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// Integer
				
						writeInteger(this.Contact_ID,dos);
					
					// Integer
				
						writeInteger(this.Address_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Address_ID="+String.valueOf(Address_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Contact_ID, other.Contact_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Address_ID, other.Address_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tDBSCD_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBSCD_9", false);
		start_Hash.put("tDBSCD_9", System.currentTimeMillis());
		
	
	currentComponent="tDBSCD_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tDBSCD_9 = 0;
		



		class SCDSK_tDBSCD_9 {
private int hashCode;
public boolean hashCodeDirty = true;
Integer Contact_ID;
public boolean equals(Object obj) {
if (this == obj) return true;
if (obj == null) return false;
if (getClass() != obj.getClass()) return false;
final SCDSK_tDBSCD_9 other = (SCDSK_tDBSCD_9) obj;
if (this.Contact_ID == null) {
if (other.Contact_ID!= null)
return false;
} else if (!this.Contact_ID.equals(other.Contact_ID))
return false;

return true;
}
public int hashCode() {
if(hashCodeDirty) {
int prime = 31;hashCode = prime * hashCode + (Contact_ID == null ? 0 : Contact_ID.hashCode());
hashCodeDirty = false;
}
return hashCode;
}
}



	class SCDStruct_tDBSCD_9 {
private Integer Address_ID;
}


    int nb_line_update_tDBSCD_9 = 0;
    int nb_line_inserted_tDBSCD_9 = 0;
    String tableName_tDBSCD_9 = "Contact_Address_LDR_CORE";
    String dbName_tDBSCD_9 = "ldr_demo";


        java.lang.Class.forName("com.teradata.jdbc.TeraDriver");


            String connectionString_tDBSCD_9 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";



		 
	final String decryptedPassword_tDBSCD_9 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:MfhsNaOL2ceO6jQgMpJEVA+JAA/olL3vjcdRB6Mi5sAbpNqY");

        java.sql.Connection connection_tDBSCD_9 = java.sql.DriverManager.getConnection(connectionString_tDBSCD_9, "LDR_DEMO", decryptedPassword_tDBSCD_9);
    
        
    java.util.Calendar calendar_tDBSCD_9 = java.util.Calendar.getInstance();
    java.util.Calendar calendarYear0_tDBSCD_9 = java.util.Calendar.getInstance();
    
    calendar_tDBSCD_9.set(1, 0, 1, 0, 0, 0);
    calendarYear0_tDBSCD_9.set(0,0,0,0,0,0);
    
    final java.util.Date dateYear0_tDBSCD_9 = calendarYear0_tDBSCD_9.getTime();
    final long year1_tDBSCD_9 = calendar_tDBSCD_9.getTime().getTime();
    
    calendar_tDBSCD_9.set(10000, 0, 1, 0, 0, 0);
    final long year10000_tDBSCD_9 = calendar_tDBSCD_9.getTime().getTime();
    long date_tDBSCD_9 = 0;
    
    String dateStr_tDBSCD_9 = null;
    String tmpValue_tDBSCD_9 = null;
    

        String search_tDBSCD_9 = "SELECT \"Contact_ID\", \"Address_ID\" FROM \"" + tableName_tDBSCD_9 + "\" WHERE \"END_DATE\" IS NULL";
        java.sql.Statement statement_tDBSCD_9 = connection_tDBSCD_9.createStatement();
        java.sql.ResultSet resultSet_tDBSCD_9 = statement_tDBSCD_9.executeQuery(search_tDBSCD_9);
        java.util.Map<SCDSK_tDBSCD_9, SCDStruct_tDBSCD_9> cache_tDBSCD_9 = new java.util.HashMap<SCDSK_tDBSCD_9, SCDStruct_tDBSCD_9>();

        while(resultSet_tDBSCD_9.next()) {
            SCDSK_tDBSCD_9 sk_tDBSCD_9 = new SCDSK_tDBSCD_9();
            SCDStruct_tDBSCD_9 row_tDBSCD_9 = new SCDStruct_tDBSCD_9();


                    if(resultSet_tDBSCD_9.getObject(1) != null) {
                        sk_tDBSCD_9.Contact_ID = resultSet_tDBSCD_9.getInt(1);
                    }


                    if(resultSet_tDBSCD_9.getObject(2) != null) {
                        row_tDBSCD_9.Address_ID = resultSet_tDBSCD_9.getInt(2);
                    }

            cache_tDBSCD_9.put(sk_tDBSCD_9, row_tDBSCD_9);
        }
        resultSet_tDBSCD_9.close();
        statement_tDBSCD_9.close();

    String insertionSQL_tDBSCD_9 = "INSERT INTO \"" + tableName_tDBSCD_9 + "\"(\"Contact_ID\", \"Address_ID\", \"ST_DATE\", \"END_DATE\") VALUES(?, ?, ?, ?)";
    java.sql.PreparedStatement insertionStatement_tDBSCD_9 = connection_tDBSCD_9.prepareStatement(insertionSQL_tDBSCD_9);


            insertionStatement_tDBSCD_9.setTimestamp(3, new java.sql.Timestamp(start_Hash.get("tDBSCD_9")));


            insertionStatement_tDBSCD_9.setNull(4, java.sql.Types.DATE);
        String updateSQLForType2_tDBSCD_9 = "UPDATE \"" + tableName_tDBSCD_9 + "\" SET \"END_DATE\" = ? WHERE \"Contact_ID\" = ? AND \"END_DATE\" IS NULL";
        java.sql.PreparedStatement updateForType2_tDBSCD_9 = connection_tDBSCD_9.prepareStatement(updateSQLForType2_tDBSCD_9);

            updateForType2_tDBSCD_9.setTimestamp(1, new java.sql.Timestamp(start_Hash.get("tDBSCD_9")));

    

        SCDSK_tDBSCD_9 lookUpKey_tDBSCD_9 = null;        


    SCDStruct_tDBSCD_9 lookUpValue_tDBSCD_9 = null;
 



/**
 * [tDBSCD_9 begin ] stop
 */



	
	/**
	 * [tDBInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_19", false);
		start_Hash.put("tDBInput_19", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_19";

	
		int tos_count_tDBInput_19 = 0;
		

    
	
		    int nb_line_tDBInput_19 = 0;
		    java.sql.Connection conn_tDBInput_19 = null;
				String driverClass_tDBInput_19 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_19 = java.lang.Class.forName(driverClass_tDBInput_19);
				String dbUser_tDBInput_19 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_19 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:N89OuHUth+IjffSQCENx6yINOT7oeQW4zTjWZxEiNYOwMU0D");
				
				String dbPwd_tDBInput_19 = decryptedPassword_tDBInput_19;
				
			String dbProperties_tDBInput_19 = "";
			String url_tDBInput_19 = null;
			if(dbProperties_tDBInput_19 == null || dbProperties_tDBInput_19.trim().length() == 0) {
				url_tDBInput_19 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_19 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_19 = java.sql.DriverManager.getConnection(url_tDBInput_19,dbUser_tDBInput_19,dbPwd_tDBInput_19);
		        
				
		    
			java.sql.Statement stmt_tDBInput_19 = conn_tDBInput_19.createStatement();
                stmt_tDBInput_19.setFetchSize(200000);

		    String dbquery_tDBInput_19 = "SELECT ldr_demo.Contact_Address_LDR.IUD,\n		ldr_demo.Contact_Address_LDR.Contact_ID,\n		ldr_demo.Contact_Address_LDR.Addr"
+"ess_ID\nFROM	ldr_demo.Contact_Address_LDR\nWHERE IUD = 2";
			

            	globalMap.put("tDBInput_19_QUERY",dbquery_tDBInput_19);
		    java.sql.ResultSet rs_tDBInput_19 = null;

		    try {
		    	rs_tDBInput_19 = stmt_tDBInput_19.executeQuery(dbquery_tDBInput_19);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_19 = rs_tDBInput_19.getMetaData();
		    	int colQtyInRs_tDBInput_19 = rsmd_tDBInput_19.getColumnCount();

		    String tmpContent_tDBInput_19 = null;
		    
		    
		    while (rs_tDBInput_19.next()) {
		        nb_line_tDBInput_19++;
		        
							if(colQtyInRs_tDBInput_19 < 1) {
								row6.IUD = null;
							} else {
		                          
            row6.IUD = rs_tDBInput_19.getInt(1);
            if(rs_tDBInput_19.wasNull()){
                    row6.IUD = null;
            }
		                    }
							if(colQtyInRs_tDBInput_19 < 2) {
								row6.Contact_ID = null;
							} else {
		                          
            row6.Contact_ID = rs_tDBInput_19.getInt(2);
            if(rs_tDBInput_19.wasNull()){
                    row6.Contact_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_19 < 3) {
								row6.Address_ID = null;
							} else {
		                          
            row6.Address_ID = rs_tDBInput_19.getInt(3);
            if(rs_tDBInput_19.wasNull()){
                    row6.Address_ID = null;
            }
		                    }
					



 



/**
 * [tDBInput_19 begin ] stop
 */
	
	/**
	 * [tDBInput_19 main ] start
	 */

	

	
	
	currentComponent="tDBInput_19";

	

 


	tos_count_tDBInput_19++;

/**
 * [tDBInput_19 main ] stop
 */
	
	/**
	 * [tDBInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_19";

	

 



/**
 * [tDBInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tDBSCD_9 main ] start
	 */

	

	
	
	currentComponent="tDBSCD_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					


	try {
        lookUpKey_tDBSCD_9 = new SCDSK_tDBSCD_9();

            lookUpKey_tDBSCD_9.Contact_ID = row6.Contact_ID;


        lookUpKey_tDBSCD_9.hashCodeDirty = true;
        lookUpValue_tDBSCD_9 = cache_tDBSCD_9.get(lookUpKey_tDBSCD_9);
 
   
    if(lookUpValue_tDBSCD_9 == null) {


            lookUpValue_tDBSCD_9 = new SCDStruct_tDBSCD_9();

        
                    if(row6.Contact_ID == null) {
insertionStatement_tDBSCD_9.setNull(1, java.sql.Types.INTEGER);
} else {
insertionStatement_tDBSCD_9.setInt(1, row6.Contact_ID);
}


                    if(row6.Address_ID == null) {
insertionStatement_tDBSCD_9.setNull(2, java.sql.Types.INTEGER);
} else {
insertionStatement_tDBSCD_9.setInt(2, row6.Address_ID);
}



        nb_line_inserted_tDBSCD_9 += insertionStatement_tDBSCD_9.executeUpdate();


    } else {


            if((lookUpValue_tDBSCD_9.Address_ID == null && row6.Address_ID!= null) || (lookUpValue_tDBSCD_9.Address_ID != null && !lookUpValue_tDBSCD_9.Address_ID.equals(row6.Address_ID))) {


                    if(row6.Contact_ID == null) {
updateForType2_tDBSCD_9.setNull(2, java.sql.Types.INTEGER);
} else {
updateForType2_tDBSCD_9.setInt(2, row6.Contact_ID);
}



                nb_line_update_tDBSCD_9 += updateForType2_tDBSCD_9.executeUpdate();

                            if(row6.Contact_ID == null) {
insertionStatement_tDBSCD_9.setNull(1, java.sql.Types.INTEGER);
} else {
insertionStatement_tDBSCD_9.setInt(1, row6.Contact_ID);
}


                            if(row6.Address_ID == null) {
insertionStatement_tDBSCD_9.setNull(2, java.sql.Types.INTEGER);
} else {
insertionStatement_tDBSCD_9.setInt(2, row6.Address_ID);
}



                nb_line_inserted_tDBSCD_9 += insertionStatement_tDBSCD_9.executeUpdate();

            }


    }
    
	} catch (java.lang.Exception e) {//catch

                System.err.print(e.getMessage());

	}//end catch


                lookUpValue_tDBSCD_9.Address_ID = row6.Address_ID;

        cache_tDBSCD_9.put(lookUpKey_tDBSCD_9, lookUpValue_tDBSCD_9);
 


	tos_count_tDBSCD_9++;

/**
 * [tDBSCD_9 main ] stop
 */
	
	/**
	 * [tDBSCD_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBSCD_9";

	

 



/**
 * [tDBSCD_9 process_data_begin ] stop
 */
	
	/**
	 * [tDBSCD_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBSCD_9";

	

 



/**
 * [tDBSCD_9 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_19";

	

 



/**
 * [tDBInput_19 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_19 end ] start
	 */

	

	
	
	currentComponent="tDBInput_19";

	





	}
}finally{
	if (rs_tDBInput_19 != null) {
		rs_tDBInput_19.close();
	}
	if (stmt_tDBInput_19 != null) {
		stmt_tDBInput_19.close();
	}
	if(conn_tDBInput_19 != null && !conn_tDBInput_19.isClosed()) {
	    

		
			conn_tDBInput_19.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_19_NB_LINE",nb_line_tDBInput_19);


 

ok_Hash.put("tDBInput_19", true);
end_Hash.put("tDBInput_19", System.currentTimeMillis());




/**
 * [tDBInput_19 end ] stop
 */

	
	/**
	 * [tDBSCD_9 end ] start
	 */

	

	
	
	currentComponent="tDBSCD_9";

	


    insertionStatement_tDBSCD_9.close();

        updateForType2_tDBSCD_9.close();


        if(connection_tDBSCD_9 != null && !connection_tDBSCD_9.isClosed()) {
            connection_tDBSCD_9.close();
        }


    globalMap.put("tDBSCD_9_NB_LINE_UPDATED", nb_line_update_tDBSCD_9);
    globalMap.put("tDBSCD_9_NB_LINE_INSERTED", nb_line_inserted_tDBSCD_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tDBSCD_9", true);
end_Hash.put("tDBSCD_9", System.currentTimeMillis());




/**
 * [tDBSCD_9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_19 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_19";

	

 



/**
 * [tDBInput_19 finally ] stop
 */

	
	/**
	 * [tDBSCD_9 finally ] start
	 */

	

	
	
	currentComponent="tDBSCD_9";

	

 



/**
 * [tDBSCD_9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_19_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];

	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public Integer Address_ID;

				public Integer getAddress_ID () {
					return this.Address_ID;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
						this.Address_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// Integer
				
						writeInteger(this.Address_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Address_ID="+String.valueOf(Address_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];

	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public Integer Address_ID;

				public Integer getAddress_ID () {
					return this.Address_ID;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
						this.Address_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// Integer
				
						writeInteger(this.Address_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Address_ID="+String.valueOf(Address_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
row8Struct row9 = row8;





	
	/**
	 * [tDBOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_8", false);
		start_Hash.put("tDBOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tDBOutput_8 = 0;
		





int nb_line_tDBOutput_8 = 0;
int nb_line_update_tDBOutput_8 = 0;
int nb_line_inserted_tDBOutput_8 = 0;
int nb_line_deleted_tDBOutput_8 = 0;
int nb_line_rejected_tDBOutput_8 = 0;

int deletedCount_tDBOutput_8=0;
int updatedCount_tDBOutput_8=0;
int insertedCount_tDBOutput_8=0;
int rejectedCount_tDBOutput_8=0;

String tableName_tDBOutput_8 = "Contact_Address_LDR";
boolean whetherReject_tDBOutput_8 = false;
   int batchSize_tDBOutput_8 = 10000;
   int batchSizeCounter_tDBOutput_8=0;



    String dbname_tDBOutput_8 = "ldr_demo";
    String driverClass_tDBOutput_8 = "com.teradata.jdbc.TeraDriver";

    java.lang.Class.forName(driverClass_tDBOutput_8);
    String dbProperties_tDBOutput_8 = "";
	String url_tDBOutput_8 = null;
	if(dbProperties_tDBOutput_8 == null || dbProperties_tDBOutput_8.trim().length() == 0) {
		url_tDBOutput_8 = "jdbc:teradata://" + "192.168.197.128";
	} else {
	    url_tDBOutput_8 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
	}
    String dbUser_tDBOutput_8 = "LDR_DEMO";
 
	final String decryptedPassword_tDBOutput_8 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:FA72vl0I4/xnCR6zcOJQqNxpDn6cU9n1Ler/QndshRkYN8GQ");

    String dbPwd_tDBOutput_8 = decryptedPassword_tDBOutput_8;

	
    java.sql.Connection conn_tDBOutput_8 = java.sql.DriverManager.getConnection(url_tDBOutput_8,dbUser_tDBOutput_8,dbPwd_tDBOutput_8);

	resourceMap.put("conn_tDBOutput_8", conn_tDBOutput_8);
        conn_tDBOutput_8.setAutoCommit(false);
        int commitEvery_tDBOutput_8 = 10000;
        int commitCounter_tDBOutput_8 = 0;
String dbschema_tDBOutput_8 = dbname_tDBOutput_8;
if(dbname_tDBOutput_8 == null || dbname_tDBOutput_8.trim().length() == 0) {
    tableName_tDBOutput_8 = "Contact_Address_LDR";
} else {
    tableName_tDBOutput_8 = dbname_tDBOutput_8 + "\".\"" + "Contact_Address_LDR";
}
int count_tDBOutput_8=0;
	 conn_tDBOutput_8.commit();
	    String insert_tDBOutput_8 = "INSERT INTO \"" + tableName_tDBOutput_8 + "\" (\"IUD\",\"Contact_ID\",\"Address_ID\") VALUES (?,?,?)";
	    java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
	    resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);
	    


 



/**
 * [tDBOutput_8 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_21", false);
		start_Hash.put("tDBInput_21", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_21";

	
		int tos_count_tDBInput_21 = 0;
		

    
	
		    int nb_line_tDBInput_21 = 0;
		    java.sql.Connection conn_tDBInput_21 = null;
				String driverClass_tDBInput_21 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_21 = java.lang.Class.forName(driverClass_tDBInput_21);
				String dbUser_tDBInput_21 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_21 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:v2KN3qwMfVAOPD0mP53vYjmr3OXn+enLWaBYWqeuXsYYB2dI");
				
				String dbPwd_tDBInput_21 = decryptedPassword_tDBInput_21;
				
			String dbProperties_tDBInput_21 = "";
			String url_tDBInput_21 = null;
			if(dbProperties_tDBInput_21 == null || dbProperties_tDBInput_21.trim().length() == 0) {
				url_tDBInput_21 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_21 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_21 = java.sql.DriverManager.getConnection(url_tDBInput_21,dbUser_tDBInput_21,dbPwd_tDBInput_21);
		        
				
		    
			java.sql.Statement stmt_tDBInput_21 = conn_tDBInput_21.createStatement();
                stmt_tDBInput_21.setFetchSize(200000);

		    String dbquery_tDBInput_21 = "SELECT '3' AS IUD,CALC.CONTACT_ID,CALC.ADDRESS_ID \nFROM CONTACT_ADDRESS_LDR_CORE CALC\nLEFT JOIN CONTACT_ADDRESS_LDR C"
+"AL\nON CAL.CONTACT_ID = CALC.CONTACT_ID\nWHERE CAL.CONTACT_ID IS NULL\nAND CALC.END_DATE IS NULL \nAND CALC.DELETE_FLAG "
+"= 0";
			

            	globalMap.put("tDBInput_21_QUERY",dbquery_tDBInput_21);
		    java.sql.ResultSet rs_tDBInput_21 = null;

		    try {
		    	rs_tDBInput_21 = stmt_tDBInput_21.executeQuery(dbquery_tDBInput_21);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_21 = rs_tDBInput_21.getMetaData();
		    	int colQtyInRs_tDBInput_21 = rsmd_tDBInput_21.getColumnCount();

		    String tmpContent_tDBInput_21 = null;
		    
		    
		    while (rs_tDBInput_21.next()) {
		        nb_line_tDBInput_21++;
		        
							if(colQtyInRs_tDBInput_21 < 1) {
								row8.IUD = null;
							} else {
		                          
            row8.IUD = rs_tDBInput_21.getInt(1);
            if(rs_tDBInput_21.wasNull()){
                    row8.IUD = null;
            }
		                    }
							if(colQtyInRs_tDBInput_21 < 2) {
								row8.Contact_ID = 0;
							} else {
		                          
            row8.Contact_ID = rs_tDBInput_21.getInt(2);
            if(rs_tDBInput_21.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_21 < 3) {
								row8.Address_ID = null;
							} else {
		                          
            row8.Address_ID = rs_tDBInput_21.getInt(3);
            if(rs_tDBInput_21.wasNull()){
                    row8.Address_ID = null;
            }
		                    }
					



 



/**
 * [tDBInput_21 begin ] stop
 */
	
	/**
	 * [tDBInput_21 main ] start
	 */

	

	
	
	currentComponent="tDBInput_21";

	

 


	tos_count_tDBInput_21++;

/**
 * [tDBInput_21 main ] stop
 */
	
	/**
	 * [tDBInput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_21";

	

 



/**
 * [tDBInput_21 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row8.IUD != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.IUD)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.Contact_ID)							
				);


							  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.Address_ID != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.Address_ID)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row9 = row8;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_8 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					



        whetherReject_tDBOutput_8 = false;
                    if(row9.IUD == null) {
pstmt_tDBOutput_8.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_8.setInt(1, row9.IUD);
}

                    pstmt_tDBOutput_8.setInt(2, row9.Contact_ID);

                    if(row9.Address_ID == null) {
pstmt_tDBOutput_8.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_8.setInt(3, row9.Address_ID);
}

                pstmt_tDBOutput_8.addBatch();
                batchSizeCounter_tDBOutput_8++;
                nb_line_tDBOutput_8++;
            if(!whetherReject_tDBOutput_8) {
            }
                if ((batchSize_tDBOutput_8 > 0) && (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8)) {
                try {
                        batchSizeCounter_tDBOutput_8 = 0;
                        int countSum_tDBOutput_8 = 0;

                        for(int countEach_tDBOutput_8:pstmt_tDBOutput_8.executeBatch()) {
                            countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
                        }

                            insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
                }catch(java.sql.SQLException e_tDBOutput_8){
            java.sql.SQLException e3_tDBOutput_8 = e_tDBOutput_8;
                    boolean isFailure = false;
            while(e_tDBOutput_8 != null){
                if(e_tDBOutput_8.getErrorCode() == -2801){
                    System.out.println(" Message: " + e_tDBOutput_8.getMessage());
                    e_tDBOutput_8.printStackTrace();
                    System.out.println();
                }
                else if(e_tDBOutput_8.getErrorCode() == 1339){
                    isFailure = true;
                }
                else{
                    System.out.println(" Message: " + e_tDBOutput_8.getMessage());
                    e_tDBOutput_8.printStackTrace();
                }
                e_tDBOutput_8 = e_tDBOutput_8.getNextException();
            }
            if(isFailure && e_tDBOutput_8 != null){
                System.out.println(" Message: " + e_tDBOutput_8.getMessage());
                e_tDBOutput_8.printStackTrace();
            }
                System.err.println(e3_tDBOutput_8.getMessage());
                }
              }
                commitCounter_tDBOutput_8++;
                if(commitEvery_tDBOutput_8 <= commitCounter_tDBOutput_8) {
                        try {
                                       if (batchSizeCounter_tDBOutput_8 > 0) {
                                           int countSum_tDBOutput_8 = 0;

                                           for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
                                               countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
                                           }

                                               insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
                                           batchSizeCounter_tDBOutput_8 = 0;
                                       }
                            conn_tDBOutput_8.commit();
                            commitCounter_tDBOutput_8 = 0;
                        }catch(java.sql.SQLException e_tDBOutput_8){
                    java.sql.SQLException e3_tDBOutput_8 = e_tDBOutput_8;
                            boolean isFailure = false;
                    while(e_tDBOutput_8 != null){
                        if(e_tDBOutput_8.getErrorCode() == -2801){
                            System.out.println(" Message: " + e_tDBOutput_8.getMessage());
                            e_tDBOutput_8.printStackTrace();
                            System.out.println();
                        }
                        else if(e_tDBOutput_8.getErrorCode() == 1339){
                            isFailure = true;
                        }
                        else{
                            System.out.println(" Message: " + e_tDBOutput_8.getMessage());
                            e_tDBOutput_8.printStackTrace();
                        }
                        e_tDBOutput_8 = e_tDBOutput_8.getNextException();
                    }
                    if(isFailure && e_tDBOutput_8 != null){
                        System.out.println(" Message: " + e_tDBOutput_8.getMessage());
                        e_tDBOutput_8.printStackTrace();
                    }
                        System.err.println(e3_tDBOutput_8.getMessage());
                        }
                }

 


	tos_count_tDBOutput_8++;

/**
 * [tDBOutput_8 main ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_21";

	

 



/**
 * [tDBInput_21 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_21 end ] start
	 */

	

	
	
	currentComponent="tDBInput_21";

	





	}
}finally{
	if (rs_tDBInput_21 != null) {
		rs_tDBInput_21.close();
	}
	if (stmt_tDBInput_21 != null) {
		stmt_tDBInput_21.close();
	}
	if(conn_tDBInput_21 != null && !conn_tDBInput_21.isClosed()) {
	    

		
			conn_tDBInput_21.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_21_NB_LINE",nb_line_tDBInput_21);


 

ok_Hash.put("tDBInput_21", true);
end_Hash.put("tDBInput_21", System.currentTimeMillis());




/**
 * [tDBInput_21 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tDBOutput_8 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	




                try {
                    if ( batchSizeCounter_tDBOutput_8 > 0 ) { // do not commit empty batch, this is a jdbc error
                        int countSum_tDBOutput_8 = 0;
                        for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
                            countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
                        }

                            insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

                        }
                //}catch (java.sql.BatchUpdateException e){
                }catch (java.sql.SQLException e){
            java.sql.SQLException e3 = e;
                    boolean isFailure = false;
                    int errorCode = 0;
            String sqlState = "";
            String message = "";
            while(e != null){
                if(e.getErrorCode() == -2801){
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                    System.out.println();
                }
                else if(e.getErrorCode() == 1339){
                    isFailure = true;
                } else{
                    System.out.println("[Message]: " + e.getMessage());
                    e.printStackTrace();
                }
                e = e.getNextException();
            }
            if(isFailure && e != null){
                System.out.println("[Message]: " + e.getMessage());
                e.printStackTrace();
            }
                System.err.println(e3.getMessage());
                }

        if(pstmt_tDBOutput_8 != null) {
            pstmt_tDBOutput_8.close();
            pstmt_tDBOutput_8 = null;
            resourceMap.remove("pstmt_tDBOutput_8");
        }
    resourceMap.put("statementClosed_tDBOutput_8", true);
            if (commitCounter_tDBOutput_8 > 0) {
                conn_tDBOutput_8.commit();
            }


        conn_tDBOutput_8.close();

        resourceMap.put("finish_tDBOutput_8", true);

	nb_line_deleted_tDBOutput_8=nb_line_deleted_tDBOutput_8+ deletedCount_tDBOutput_8;
	nb_line_update_tDBOutput_8=nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
	nb_line_inserted_tDBOutput_8=nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
	nb_line_rejected_tDBOutput_8=nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;
	
        globalMap.put("tDBOutput_8_NB_LINE",nb_line_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_UPDATED",nb_line_update_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_DELETED",nb_line_deleted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tDBOutput_8", true);
end_Hash.put("tDBOutput_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBInput_20Process(globalMap);



/**
 * [tDBOutput_8 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_21 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_21";

	

 



/**
 * [tDBInput_21 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
                if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_8")) != null) {
                    pstmtToClose_tDBOutput_8.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_8") == null){
            java.sql.Connection ctn_tDBOutput_8 = null;
            if((ctn_tDBOutput_8 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_8")) != null){
                try {
                    ctn_tDBOutput_8.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_8) {
                    String errorMessage_tDBOutput_8 = "failed to close the connection in tDBOutput_8 :" + sqlEx_tDBOutput_8.getMessage();
                    System.err.println(errorMessage_tDBOutput_8);
                }
            }
        }
    }
 



/**
 * [tDBOutput_8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_21_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];
    static byte[] commonByteArray_DEMO_STAGING_FINANCE_Contact_Address_SCD_2 = new byte[0];

	
			    public Integer IUD;

				public Integer getIUD () {
					return this.IUD;
				}
				
			    public int Contact_ID;

				public int getContact_ID () {
					return this.Contact_ID;
				}
				
			    public Integer Address_ID;

				public Integer getAddress_ID () {
					return this.Address_ID;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEMO_STAGING_FINANCE_Contact_Address_SCD_2) {

        	try {

        		int length = 0;
		
						this.IUD = readInteger(dis);
					
			        this.Contact_ID = dis.readInt();
					
						this.Address_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IUD,dos);
					
					// int
				
		            	dos.writeInt(this.Contact_ID);
					
					// Integer
				
						writeInteger(this.Address_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IUD="+String.valueOf(IUD));
		sb.append(",Contact_ID="+String.valueOf(Contact_ID));
		sb.append(",Address_ID="+String.valueOf(Address_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tDBRow_1 = 0;
		




	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
			String driverClass_tDBRow_1 = "com.teradata.jdbc.TeraDriver";
		    java.lang.Class jdbcclazz_tDBRow_1 = java.lang.Class.forName(driverClass_tDBRow_1);
		
			String dbProperties_tDBRow_1 = "";
			String url_tDBRow_1 = null;
			if(dbProperties_tDBRow_1 == null || dbProperties_tDBRow_1.trim().length() == 0) {
				url_tDBRow_1 = "jdbc:teradata://" + "192.168.197.128";
			} else {
			    url_tDBRow_1 = "jdbc:teradata://" + "192.168.197.128" + "/" + "";
			}
		
					String dbUser_tDBRow_1 = "LDR_DEMO";
	        
            		
            		
            		 
	final String decryptedPassword_tDBRow_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:sD3D9P4/5sHGhsEqLVJSY4w2hxOoJ8BKHoL+3YrOkJsAKDGd");
        		   	
        	        String dbPwd_tDBRow_1 = decryptedPassword_tDBRow_1;
	        
					
			conn_tDBRow_1 = java.sql.DriverManager.getConnection(url_tDBRow_1,dbUser_tDBRow_1,dbPwd_tDBRow_1);
		
    resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
					if(conn_tDBRow_1.getAutoCommit()) {
						
				conn_tDBRow_1.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_1 = 10000;
					int commitCounter_tDBRow_1 = 0;
				
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);

	

 



/**
 * [tDBRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_20", false);
		start_Hash.put("tDBInput_20", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_20";

	
		int tos_count_tDBInput_20 = 0;
		

    
	
		    int nb_line_tDBInput_20 = 0;
		    java.sql.Connection conn_tDBInput_20 = null;
				String driverClass_tDBInput_20 = "com.teradata.jdbc.TeraDriver";
			    java.lang.Class jdbcclazz_tDBInput_20 = java.lang.Class.forName(driverClass_tDBInput_20);
				String dbUser_tDBInput_20 = "LDR_DEMO";
				
				 
	final String decryptedPassword_tDBInput_20 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:dZK7H4ttpgggYPLHChJWVRKvcvHkGJH+FUeSrrYeg7YuLz9S");
				
				String dbPwd_tDBInput_20 = decryptedPassword_tDBInput_20;
				
			String dbProperties_tDBInput_20 = "";
			String url_tDBInput_20 = null;
			if(dbProperties_tDBInput_20 == null || dbProperties_tDBInput_20.trim().length() == 0) {
				url_tDBInput_20 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo";    
			} else {
			    url_tDBInput_20 = "jdbc:teradata://" + "192.168.197.128" + "/DATABASE=" + "ldr_demo" + "," + "";
			}       
				
				conn_tDBInput_20 = java.sql.DriverManager.getConnection(url_tDBInput_20,dbUser_tDBInput_20,dbPwd_tDBInput_20);
		        
				
		    
			java.sql.Statement stmt_tDBInput_20 = conn_tDBInput_20.createStatement();
                stmt_tDBInput_20.setFetchSize(200000);

		    String dbquery_tDBInput_20 = "SELECT ldr_demo.Contact_Address_LDR.IUD,\n		ldr_demo.Contact_Address_LDR.Contact_ID,\n		ldr_demo.Contact_Address_LDR.Addr"
+"ess_ID\nFROM	ldr_demo.Contact_Address_LDR\nWHERE IUD = 3";
			

            	globalMap.put("tDBInput_20_QUERY",dbquery_tDBInput_20);
		    java.sql.ResultSet rs_tDBInput_20 = null;

		    try {
		    	rs_tDBInput_20 = stmt_tDBInput_20.executeQuery(dbquery_tDBInput_20);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_20 = rs_tDBInput_20.getMetaData();
		    	int colQtyInRs_tDBInput_20 = rsmd_tDBInput_20.getColumnCount();

		    String tmpContent_tDBInput_20 = null;
		    
		    
		    while (rs_tDBInput_20.next()) {
		        nb_line_tDBInput_20++;
		        
							if(colQtyInRs_tDBInput_20 < 1) {
								row10.IUD = null;
							} else {
		                          
            row10.IUD = rs_tDBInput_20.getInt(1);
            if(rs_tDBInput_20.wasNull()){
                    row10.IUD = null;
            }
		                    }
							if(colQtyInRs_tDBInput_20 < 2) {
								row10.Contact_ID = 0;
							} else {
		                          
            row10.Contact_ID = rs_tDBInput_20.getInt(2);
            if(rs_tDBInput_20.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_20 < 3) {
								row10.Address_ID = null;
							} else {
		                          
            row10.Address_ID = rs_tDBInput_20.getInt(3);
            if(rs_tDBInput_20.wasNull()){
                    row10.Address_ID = null;
            }
		                    }
					



 



/**
 * [tDBInput_20 begin ] stop
 */
	
	/**
	 * [tDBInput_20 main ] start
	 */

	

	
	
	currentComponent="tDBInput_20";

	

 


	tos_count_tDBInput_20++;

/**
 * [tDBInput_20 main ] stop
 */
	
	/**
	 * [tDBInput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_20";

	

 



/**
 * [tDBInput_20 process_data_begin ] stop
 */

	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					

query_tDBRow_1 = "UPDATE CONTACT_ADDRESS_LDR_CORE\nSET\nDELETE_FLAG = 1,\nEND_DATE = CURRENT_TIMESTAMP(3)\nWHERE CONTACT_ADDRESS_LDR.CONT"
+"ACT_ID = CONTACT_ADDRESS_LDR_CORE.CONTACT_ID\nAND CONTACT_ADDRESS_LDR.ADDRESS_ID = CONTACT_ADDRESS_LDR_CORE.ADDRESS_ID\n"
+"AND CONTACT_ADDRESS_LDR.IUD = 3\nAND CONTACT_ADDRESS_LDR_CORE.END_DATE IS NULL\nAND CONTACT_ADDRESS_LDR_CORE.DELETE_FLAG"
+" = 0";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
		stmt_tDBRow_1.execute(query_tDBRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_1++;
		if(commitEvery_tDBRow_1 <= commitCounter_tDBRow_1) {
			
			conn_tDBRow_1.commit();
			
			commitCounter_tDBRow_1=0;
		}
		

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_20";

	

 



/**
 * [tDBInput_20 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_20 end ] start
	 */

	

	
	
	currentComponent="tDBInput_20";

	





	}
}finally{
	if (rs_tDBInput_20 != null) {
		rs_tDBInput_20.close();
	}
	if (stmt_tDBInput_20 != null) {
		stmt_tDBInput_20.close();
	}
	if(conn_tDBInput_20 != null && !conn_tDBInput_20.isClosed()) {
	    

		
			conn_tDBInput_20.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
}
globalMap.put("tDBInput_20_NB_LINE",nb_line_tDBInput_20);


 

ok_Hash.put("tDBInput_20", true);
end_Hash.put("tDBInput_20", System.currentTimeMillis());




/**
 * [tDBInput_20 end ] stop
 */

	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	





	stmt_tDBRow_1.close();
	resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
		if(commitEvery_tDBRow_1>commitCounter_tDBRow_1){

			
			conn_tDBRow_1.commit();
			

			commitCounter_tDBRow_1=0;

		}
	

	
	
			conn_tDBRow_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_20 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_20";

	

 



/**
 * [tDBInput_20 finally ] stop
 */

	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_1") == null){
            java.sql.Connection ctn_tDBRow_1 = null;
            if((ctn_tDBRow_1 = (java.sql.Connection)resourceMap.get("conn_tDBRow_1")) != null){
                try {
                    ctn_tDBRow_1.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_1) {
                    String errorMessage_tDBRow_1 = "failed to close the connection in tDBRow_1 :" + sqlEx_tDBRow_1.getMessage();
                    System.err.println(errorMessage_tDBRow_1);
                }
            }
        }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_20_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Contact_Address_SCD_2 Contact_Address_SCD_2Class = new Contact_Address_SCD_2();

        int exitCode = Contact_Address_SCD_2Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Contact_Address_SCD_2.class.getClassLoader().getResourceAsStream("demo_staging_finance/contact_address_scd_2_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Contact_Address_SCD_2.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_10Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_10) {
globalMap.put("tDBInput_10_SUBPROCESS_STATE", -1);

e_tDBInput_10.printStackTrace();

}
try {
errorCode = null;tDBInput_18Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_18) {
globalMap.put("tDBInput_18_SUBPROCESS_STATE", -1);

e_tDBInput_18.printStackTrace();

}
try {
errorCode = null;tDBInput_21Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_21) {
globalMap.put("tDBInput_21_SUBPROCESS_STATE", -1);

e_tDBInput_21.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Contact_Address_SCD_2");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     223849 characters generated by Talend Open Studio for Data Integration 
 *     on the January 19, 2021 3:44:22 PM PKT
 ************************************************************************************************/